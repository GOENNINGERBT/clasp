#ifdef GC_DECLARE_FORWARDS
 namespace clbind {
    class DummyCreator_O;
    class ClassRep_O;
    class ClassRegistry_O;
    namespace detail {
        class class_map;
    };
 };
 namespace core {
    class TwoWayStream_O;
    class MultiStringBuffer_O;
    class WeakHashTable_O;
    class CoreExposer_O;
    class BitVectorNs_O;
    class SimpleMDArray_byte64_t_O;
    class HashTableEqual_O;
    class ReadTable_O;
    class PosixTimeDuration_O;
    class Bignum_O;
    class SimpleMDArray_byte32_t_O;
    class SmallMap_O;
    class Instance_O;
    class Archive_O;
    class LogicalPathname_O;
    class CatchEnvironment_O;
    class BlockEnvironment_O;
    class VaList_dummy_O;
    class Lisp_O;
    class SimpleVectorDouble_O;
    class NativeVector_float_O;
    class Reader_O;
    class SymbolToEnumConverter_O;
    class WeakKeyMapping_O;
    class DerivableCxxObject_O;
    class SimpleVector_int16_t_O;
    class General_O;
    class ClassRepCreator_O;
    class BroadcastStream_O;
    class ClosureWithSlots_O;
    class ExternalObject_O;
    class UserData_O;
    class MDArrayBaseChar_O;
    class Ratio_O;
    class WeakKeyHashTable_O;
    class SynonymStream_O;
    class MDArrayDouble_O;
    class FuncallableInstance_O;
    class Cons_O;
    class MacroletEnvironment_O;
    class SingleDispatchMethodFunction_O;
    class AuxArgument;
    class SymbolMacroletEnvironment_O;
    class Fixnum_dummy_O;
    class MDArray_int8_t_O;
    class SmallMultimap_O;
    class ConcatenatedStream_O;
    class SimpleMDArray_size_t_O;
    class MDArray_int64_t_O;
    class LambdaListHandler_O;
    class HashTableEqualp_O;
    class MDArray_int32_t_O;
    class Sigset_O;
    class HashTableEq_O;
    class StringStream_O;
    class DerivableCxxClassCreator_O;
    class FunctionValueEnvironment_O;
    class SimpleString_O;
    class SimpleMDArray_int64_t_O;
    class DoubleFloat_O;
    class SymbolStorage;
    class UnwindProtectEnvironment_O;
    class SimpleVector_O;
    class StrNs_O;
    class Environment_O;
    class CxxMethodFunction_O;
    class ValueEnvironment_O;
    class SingleFloat_dummy_O;
    class KeywordArgument;
    class BranchSNode_O;
    class AnsiStream_O;
    class StringOutputStream_O;
    class SingleDispatchGenericFunctionClosure_O;
    class SexpLoadArchive_O;
    class MDArray_byte8_t_O;
    class SimpleVector_byte32_t_O;
    class FuncallableInstanceCreator_O;
    class SimpleVector_fixnum_O;
    class Real_O;
    class MDArray_byte64_t_O;
    class HashTableEql_O;
    class MDArrayFloat_O;
    class RandomState_O;
    class Function_O;
    class SingleDispatchEffectiveMethodFunction_O;
    class MDArrayCharacter_O;
    class Rational_O;
    class FileStream_O;
    class Complex_O;
    class SaveArchive_O;
    class SimpleVector_int32_t_O;
    class SequenceStepper_O;
    class SimpleMDArray_byte8_t_O;
    class ValueFrame_O;
    class RuntimeVisibleEnvironment_O;
    class IOFileStream_O;
    class MDArray_int16_t_O;
    class LeafSNode_O;
    class WeakPointer_O;
    class TranslationFunctor_O;
    class SimpleVector_int64_t_O;
    class LongFloat_O;
    class FunctionFrame_O;
    class DynamicBinding;
    class Float_O;
    class StringInputStream_O;
    class LoadArchive_O;
    class VectorStepper_O;
    class SNode_O;
    class RecursiveDirectoryIterator_O;
    class SimpleVectorFloat_O;
    class Pointer_O;
    class MDArray_byte16_t_O;
    class CxxObject_O;
    class GlueEnvironment_O;
    class NativeVector_double_O;
    class SingleDispatchMethod_O;
    class RequiredArgument;
    class MDArrayBit_O;
    class SimpleMDArrayBit_O;
    class ExceptionEntry;
    class Null_O;
    class EchoStream_O;
    class SymbolClassPair;
    class Iterator_O;
    class StrWNs_O;
    class Array_O;
    class SimpleCharacterString_O;
    class SimpleMDArrayCharacter_O;
    class IOStreamStream_O;
    class Symbol_O;
    class InstanceCreator_O;
    class NativeVector_int_O;
    class SexpSaveArchive_O;
    class SpecialForm_O;
    class Path_O;
    class CompileTimeEnvironment_O;
    class TagbodyEnvironment_O;
    class ConsStepper_O;
    class Character_dummy_O;
    class MDArray_byte32_t_O;
    class SimpleMDArray_int8_t_O;
    class SourceManager_O;
    class Str8Ns_O;
    class Pathname_O;
    class SimpleMDArray_byte16_t_O;
    class AbstractSimpleVector_O;
    class LoadTimeValues_O;
    class Cache_O;
    class SimpleMDArrayDouble_O;
    class T_O;
    class SharpEqualWrapper_O;
    class Number_O;
    class MDArray_fixnum_O;
    class ShortFloat_O;
    class CacheRecord;
    class Stream_O;
    class SimpleMDArray_O;
    class SimpleVector_byte8_t_O;
    class SimpleMDArrayBaseChar_O;
    class Package_O;
    class FileStatus_O;
    class SimpleMDArrayFloat_O;
    class SimpleVector_size_t_O;
    class InvocationHistoryFrameIterator_O;
    class SimpleVector_int8_t_O;
    class FunctionContainerEnvironment_O;
    class SimpleBitVector_O;
    class PosixTime_O;
    class HashTable_O;
    class LexicalEnvironment_O;
    class OptionalArgument;
    class DirectoryIterator_O;
    class SingleDispatchCxxEffectiveMethodFunction_O;
    class Exposer_O;
    class StandardClassCreator_O;
    class ActivationFrame_O;
    class SourcePosInfo_O;
    class SimpleMDArrayT_O;
    class SimpleMDArray_int16_t_O;
    class IntArray_O;
    class SourceFileInfo_O;
    class DirectoryEntry_O;
    class MDArrayT_O;
    class LightUserData_O;
    class MDArray_O;
    class Record_O;
    class SimpleMDArray_int32_t_O;
    class Integer_O;
    class SimpleBaseString_O;
    class SimpleVector_byte64_t_O;
    class SimpleMDArray_fixnum_O;
    class SimpleVector_byte16_t_O;
    class MDArray_size_t_O;
 };
 namespace clcenv {
    class VariableType_O;
    class SpecialVariableInfo_O;
    class VariableIgnore_O;
    class Function_O;
    class Info_O;
    class GlobalMacroInfo_O;
    class LocalMacroInfo_O;
    class SymbolMacro_O;
    class FunctionDynamicExtent_O;
    class OptimizeInfo_O;
    class BlockInfo_O;
    class LexicalVariableInfo_O;
    class Inline_O;
    class Closure_O;
    class Optimize_O;
    class LocalFunctionInfo_O;
    class LambdaName_O;
    class FunctionInfo_O;
    class SymbolMacroInfo_O;
    class SpecialOperatorInfo_O;
    class ConstantVariableInfo_O;
    class Tag_O;
    class Block_O;
    class FunctionType_O;
    class GlobalEnvironment_O;
    class VariableDynamicExtent_O;
    class LexicalVariable_O;
    class VariableInfo_O;
    class SpecialVariable_O;
    class LambdaNameInfo_O;
    class Macro_O;
    class Entry_O;
    class GlobalFunctionInfo_O;
    class FunctionIgnore_O;
 };
 namespace clasp_ffi {
    class ForeignTypeSpec_O;
    class ForeignData_O;
 };
 namespace llvmo {
    class PointerType_O;
    class GlobalValue_O;
    class UnaryInstruction_O;
    class Triple_O;
    class SequentialType_O;
    class LLVMTargetMachine_O;
    class TargetOptions_O;
    class ConstantDataArray_O;
    class TargetSubtargetInfo_O;
    class DINodeArray_O;
    class Pass_O;
    class SwitchInst_O;
    class Attribute_O;
    class ExecutionEngine_O;
    class GlobalVariable_O;
    class DINode_O;
    class LLVMContext_O;
    class ImmutablePass_O;
    class ConstantFP_O;
    class PassManagerBuilder_O;
    class IntegerType_O;
    class DICompositeType_O;
    class BlockAddress_O;
    class MCSubtargetInfo_O;
    class ArrayType_O;
    class FunctionPassManager_O;
    class DISubprogram_O;
    class CallInst_O;
    class PassManager_O;
    class AtomicRMWInst_O;
    class AttributeSet_O;
    class InvokeInst_O;
    class Module_O;
    class TerminatorInst_O;
    class Target_O;
    class StructType_O;
    class LandingPadInst_O;
    class ConstantExpr_O;
    class ValueAsMetadata_O;
    class VectorType_O;
    class Instruction_O;
    class ConstantPointerNull_O;
    class AtomicCmpXchgInst_O;
    class FenceInst_O;
    class User_O;
    class DebugLoc_O;
    class StoreInst_O;
    class TargetLibraryInfoWrapperPass_O;
    class ConstantDataSequential_O;
    class DIDerivedType_O;
    class ModulePass_O;
    class UnreachableInst_O;
    class ModuleHandle_O;
    class Type_O;
    class DILexicalBlock_O;
    class DITypeRefArray_O;
    class FunctionType_O;
    class ReturnInst_O;
    class DILocalScope_O;
    class IRBuilderBase_O;
    class Argument_O;
    class InsertPoint_O;
    class APFloat_O;
    class APInt_O;
    class DIBuilder_O;
    class DIBasicType_O;
    class Constant_O;
    class EngineBuilder_O;
    class UndefValue_O;
    class BasicBlock_O;
    class FunctionPass_O;
    class DataLayout_O;
    class DIFile_O;
    class DICompileUnit_O;
    class MDString_O;
    class VAArgInst_O;
    class MDNode_O;
    class DILexicalBlockBase_O;
    class ClaspJIT_O;
    class PHINode_O;
    class ConstantArray_O;
    class IRBuilder_O;
    class IndirectBrInst_O;
    class DIScope_O;
    class DIType_O;
    class Function_O;
    class ResumeInst_O;
    class DISubroutineType_O;
    class ConstantStruct_O;
    class LoadInst_O;
    class PassManagerBase_O;
    class AllocaInst_O;
    class BranchInst_O;
    class CompositeType_O;
    class Linker_O;
    class ConstantInt_O;
    class Metadata_O;
    class Value_O;
    class TargetMachine_O;
    class NamedMDNode_O;
 };
 namespace asttooling {
    class AsttoolingExposer_O;
    class DerivableSyntaxOnlyAction;
    class DerivableFrontendActionFactory;
    class DerivableASTFrontendAction;
    class DerivableMatchCallback;
    class AstVisitor_O;
 };
 namespace mp {
    class ConditionVariable_O;
    class Mutex_O;
    class BlockingConcurrentQueue_O;
    class SharedMutex_O;
    class RecursiveMutex_O;
    class Process_O;
    class ConcurrentQueue_O;
 };
#endif // GC_DECLARE_FORWARDS
#if defined(GC_STAMP)
// Attempted to assign stamp to class asttooling::DerivableFrontendActionFactory due to inherit from clang::tooling::ToolAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::tooling::FrontendActionFactory> due to inherit from clang::tooling::ToolAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableSyntaxOnlyAction due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::SyntaxOnlyAction> due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableASTFrontendAction due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::ASTFrontendAction> due to inherit from clang::FrontendAction but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableMatchCallback due to inherit from clang::ast_matchers::MatchFinder::MatchCallback but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class clbind::Derivable<clang::ast_matchers::MatchFinder::MatchCallback> due to inherit from clang::ast_matchers::MatchFinder::MatchCallback but it already has one due to inheritance from core::T_O
// Attempted to assign stamp to class asttooling::DerivableASTFrontendAction due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::ASTFrontendAction> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class asttooling::DerivableSyntaxOnlyAction due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::SyntaxOnlyAction> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class asttooling::DerivableMatchCallback due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::ast_matchers::MatchFinder::MatchCallback> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class asttooling::DerivableFrontendActionFactory due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
// Attempted to assign stamp to class clbind::Derivable<clang::tooling::FrontendActionFactory> due to inherit from core::T_O but it already has one due to inheritance from core::DerivableCxxObject_O
STAMP_null = 0, 
STAMP_core__T_O = 1,
STAMP_core__VaList_dummy_O = 2,
STAMP_core__General_O = 3,
STAMP_core__MultiStringBuffer_O = 4,
STAMP_core__WeakHashTable_O = 5,
STAMP_core__WeakKeyHashTable_O = 6,
STAMP_core__ReadTable_O = 7,
STAMP_core__PosixTimeDuration_O = 8,
STAMP_clasp_ffi__ForeignTypeSpec_O = 9,
STAMP_core__Instance_O = 10,
STAMP_core__DerivableCxxObject_O = 11,
STAMP_clbind__ClassRep_O = 12,
STAMP_core__SmallMap_O = 13,
STAMP_core__WrappedPointer_O = 14,
STAMP_core__Archive_O = 15,
STAMP_core__SaveArchive_O = 16,
STAMP_core__SexpSaveArchive_O = 17,
STAMP_core__LoadArchive_O = 18,
STAMP_core__SexpLoadArchive_O = 19,
STAMP_core__SymbolToEnumConverter_O = 20,
STAMP_core__Reader_O = 21,
STAMP_core__WeakKeyMapping_O = 22,
STAMP_llvmo__Attribute_O = 23,
STAMP_core__ExternalObject_O = 24,
STAMP_llvmo__Triple_O = 25,
STAMP_llvmo__TargetOptions_O = 26,
STAMP_llvmo__Pass_O = 27,
STAMP_llvmo__ModulePass_O = 28,
STAMP_llvmo__ImmutablePass_O = 29,
STAMP_llvmo__TargetLibraryInfoWrapperPass_O = 30,
STAMP_llvmo__FunctionPass_O = 31,
STAMP_llvmo__ExecutionEngine_O = 32,
STAMP_llvmo__LLVMContext_O = 33,
STAMP_llvmo__PassManagerBuilder_O = 34,
STAMP_llvmo__MCSubtargetInfo_O = 35,
STAMP_llvmo__TargetSubtargetInfo_O = 36,
STAMP_llvmo__Module_O = 37,
STAMP_llvmo__Target_O = 38,
STAMP_llvmo__Type_O = 39,
STAMP_llvmo__IntegerType_O = 40,
STAMP_llvmo__FunctionType_O = 41,
STAMP_llvmo__CompositeType_O = 42,
STAMP_llvmo__SequentialType_O = 43,
STAMP_llvmo__PointerType_O = 44,
STAMP_llvmo__ArrayType_O = 45,
STAMP_llvmo__VectorType_O = 46,
STAMP_llvmo__StructType_O = 47,
STAMP_llvmo__IRBuilderBase_O = 48,
STAMP_llvmo__IRBuilder_O = 49,
STAMP_llvmo__APFloat_O = 50,
STAMP_llvmo__APInt_O = 51,
STAMP_llvmo__DIBuilder_O = 52,
STAMP_llvmo__EngineBuilder_O = 53,
STAMP_llvmo__PassManagerBase_O = 54,
STAMP_llvmo__FunctionPassManager_O = 55,
STAMP_llvmo__PassManager_O = 56,
STAMP_llvmo__Linker_O = 57,
STAMP_llvmo__Metadata_O = 58,
STAMP_llvmo__ValueAsMetadata_O = 59,
STAMP_llvmo__MDString_O = 60,
STAMP_llvmo__MDNode_O = 61,
STAMP_llvmo__DINode_O = 62,
STAMP_llvmo__DIScope_O = 63,
STAMP_llvmo__DILocalScope_O = 64,
STAMP_llvmo__DISubprogram_O = 65,
STAMP_llvmo__DILexicalBlockBase_O = 66,
STAMP_llvmo__DILexicalBlock_O = 67,
STAMP_llvmo__DIFile_O = 68,
STAMP_llvmo__DICompileUnit_O = 69,
STAMP_llvmo__DIType_O = 70,
STAMP_llvmo__DICompositeType_O = 71,
STAMP_llvmo__DIDerivedType_O = 72,
STAMP_llvmo__DIBasicType_O = 73,
STAMP_llvmo__DISubroutineType_O = 74,
STAMP_llvmo__Value_O = 75,
STAMP_llvmo__User_O = 76,
STAMP_llvmo__Instruction_O = 77,
STAMP_llvmo__UnaryInstruction_O = 78,
STAMP_llvmo__VAArgInst_O = 79,
STAMP_llvmo__LoadInst_O = 80,
STAMP_llvmo__AllocaInst_O = 81,
STAMP_llvmo__CallInst_O = 82,
STAMP_llvmo__AtomicRMWInst_O = 83,
STAMP_llvmo__TerminatorInst_O = 84,
STAMP_llvmo__SwitchInst_O = 85,
STAMP_llvmo__InvokeInst_O = 86,
STAMP_llvmo__UnreachableInst_O = 87,
STAMP_llvmo__ReturnInst_O = 88,
STAMP_llvmo__IndirectBrInst_O = 89,
STAMP_llvmo__ResumeInst_O = 90,
STAMP_llvmo__BranchInst_O = 91,
STAMP_llvmo__LandingPadInst_O = 92,
STAMP_llvmo__AtomicCmpXchgInst_O = 93,
STAMP_llvmo__FenceInst_O = 94,
STAMP_llvmo__StoreInst_O = 95,
STAMP_llvmo__PHINode_O = 96,
STAMP_llvmo__Constant_O = 97,
STAMP_llvmo__GlobalValue_O = 98,
STAMP_llvmo__GlobalVariable_O = 99,
STAMP_llvmo__Function_O = 100,
STAMP_llvmo__ConstantFP_O = 101,
STAMP_llvmo__BlockAddress_O = 102,
STAMP_llvmo__ConstantExpr_O = 103,
STAMP_llvmo__ConstantPointerNull_O = 104,
STAMP_llvmo__ConstantDataSequential_O = 105,
STAMP_llvmo__ConstantDataArray_O = 106,
STAMP_llvmo__UndefValue_O = 107,
STAMP_llvmo__ConstantArray_O = 108,
STAMP_llvmo__ConstantStruct_O = 109,
STAMP_llvmo__ConstantInt_O = 110,
STAMP_llvmo__Argument_O = 111,
STAMP_llvmo__BasicBlock_O = 112,
STAMP_llvmo__TargetMachine_O = 113,
STAMP_llvmo__LLVMTargetMachine_O = 114,
STAMP_llvmo__NamedMDNode_O = 115,
STAMP_core__SmallMultimap_O = 116,
STAMP_core__LambdaListHandler_O = 117,
STAMP_core__Sigset_O = 118,
STAMP_llvmo__AttributeSet_O = 119,
STAMP_core__Environment_O = 120,
STAMP_core__GlueEnvironment_O = 121,
STAMP_core__LexicalEnvironment_O = 122,
STAMP_core__RuntimeVisibleEnvironment_O = 123,
STAMP_core__BlockEnvironment_O = 124,
STAMP_core__FunctionValueEnvironment_O = 125,
STAMP_core__ValueEnvironment_O = 126,
STAMP_core__TagbodyEnvironment_O = 127,
STAMP_core__CompileTimeEnvironment_O = 128,
STAMP_core__CatchEnvironment_O = 129,
STAMP_core__MacroletEnvironment_O = 130,
STAMP_core__SymbolMacroletEnvironment_O = 131,
STAMP_core__UnwindProtectEnvironment_O = 132,
STAMP_core__FunctionContainerEnvironment_O = 133,
STAMP_core__ActivationFrame_O = 134,
STAMP_core__ValueFrame_O = 135,
STAMP_core__FunctionFrame_O = 136,
STAMP_core__RandomState_O = 137,
STAMP_core__Function_O = 138,
STAMP_core__Closure_O = 139,
STAMP_core__ClosureWithSlots_O = 140,
STAMP_core__SingleDispatchMethodFunction_O = 141,
STAMP_core__CxxMethodFunction_O = 142,
STAMP_core__BuiltinClosure_O = 143,
STAMP_core__TranslationFunctor_O = 144,
STAMP_core__SingleDispatchGenericFunctionClosure_O = 145,
STAMP_core__SingleDispatchEffectiveMethodFunction_O = 146,
STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O = 147,
STAMP_core__FuncallableInstance_O = 148,
STAMP_core__Creator_O = 149,
STAMP_core__ClassRepCreator_O = 150,
STAMP_core__DerivableCxxClassCreator_O = 151,
STAMP_core__FuncallableInstanceCreator_O = 152,
STAMP_clbind__ConstructorCreator_O = 153,
STAMP_clbind__DummyCreator_O = 154,
STAMP_core__InstanceCreator_O = 155,
STAMP_core__StandardClassCreator_O = 156,
STAMP_core__SpecialForm_O = 157,
STAMP_core__SequenceStepper_O = 158,
STAMP_core__VectorStepper_O = 159,
STAMP_core__ConsStepper_O = 160,
STAMP_core__WeakPointer_O = 161,
STAMP_llvmo__DebugLoc_O = 162,
STAMP_core__SNode_O = 163,
STAMP_core__BranchSNode_O = 164,
STAMP_core__LeafSNode_O = 165,
STAMP_llvmo__ModuleHandle_O = 166,
STAMP_core__Pointer_O = 167,
STAMP_clasp_ffi__ForeignData_O = 168,
STAMP_core__CxxObject_O = 169,
STAMP_llvmo__DINodeArray_O = 170,
STAMP_core__NativeVector_float_O = 171,
STAMP_clcenv__Info_O = 172,
STAMP_clcenv__OptimizeInfo_O = 173,
STAMP_clcenv__BlockInfo_O = 174,
STAMP_clcenv__FunctionInfo_O = 175,
STAMP_clcenv__GlobalMacroInfo_O = 176,
STAMP_clcenv__LocalMacroInfo_O = 177,
STAMP_clcenv__LocalFunctionInfo_O = 178,
STAMP_clcenv__SpecialOperatorInfo_O = 179,
STAMP_clcenv__LambdaNameInfo_O = 180,
STAMP_clcenv__GlobalFunctionInfo_O = 181,
STAMP_clcenv__VariableInfo_O = 182,
STAMP_clcenv__SpecialVariableInfo_O = 183,
STAMP_clcenv__LexicalVariableInfo_O = 184,
STAMP_clcenv__SymbolMacroInfo_O = 185,
STAMP_clcenv__ConstantVariableInfo_O = 186,
STAMP_mp__ConditionVariable_O = 187,
STAMP_mp__Mutex_O = 188,
STAMP_mp__RecursiveMutex_O = 189,
STAMP_llvmo__DITypeRefArray_O = 190,
STAMP_core__NativeVector_double_O = 191,
STAMP_core__NativeVector_int_O = 192,
STAMP_mp__SharedMutex_O = 193,
STAMP_clcenv__Entry_O = 194,
STAMP_clcenv__VariableType_O = 195,
STAMP_clcenv__VariableIgnore_O = 196,
STAMP_clcenv__Function_O = 197,
STAMP_clcenv__SymbolMacro_O = 198,
STAMP_clcenv__FunctionDynamicExtent_O = 199,
STAMP_clcenv__Inline_O = 200,
STAMP_clcenv__Closure_O = 201,
STAMP_clcenv__Optimize_O = 202,
STAMP_clcenv__LambdaName_O = 203,
STAMP_clcenv__Tag_O = 204,
STAMP_clcenv__Block_O = 205,
STAMP_clcenv__FunctionType_O = 206,
STAMP_clcenv__GlobalEnvironment_O = 207,
STAMP_clcenv__VariableDynamicExtent_O = 208,
STAMP_clcenv__LexicalVariable_O = 209,
STAMP_clcenv__SpecialVariable_O = 210,
STAMP_clcenv__Macro_O = 211,
STAMP_clcenv__FunctionIgnore_O = 212,
STAMP_mp__Process_O = 213,
STAMP_core__SingleDispatchMethod_O = 214,
STAMP_core__Iterator_O = 215,
STAMP_core__RecursiveDirectoryIterator_O = 216,
STAMP_core__DirectoryIterator_O = 217,
STAMP_llvmo__InsertPoint_O = 218,
STAMP_core__Array_O = 219,
STAMP_core__AbstractSimpleVector_O = 220,
STAMP_core__template_SimpleVector_core__SimpleVectorFloat_O_float_core__AbstractSimpleVector_O_ = 221,
STAMP_core__SimpleVectorFloat_O = 222,
STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_ = 223,
STAMP_core__SimpleVector_byte64_t_O = 224,
STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_ = 225,
STAMP_core__SimpleVector_int64_t_O = 226,
STAMP_core__SimpleString_O = 227,
STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_ = 228,
STAMP_core__SimpleCharacterString_O = 229,
STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_ = 230,
STAMP_core__SimpleBaseString_O = 231,
STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_ = 232,
STAMP_core__SimpleVector_int16_t_O = 233,
STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_ = 234,
STAMP_core__SimpleVector_byte16_t_O = 235,
STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_ = 236,
STAMP_core__SimpleVector_fixnum_O = 237,
STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_ = 238,
STAMP_core__SimpleVector_int8_t_O = 239,
STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_ = 240,
STAMP_core__SimpleVector_O = 241,
STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_ = 242,
STAMP_core__SimpleVector_byte8_t_O = 243,
STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_ = 244,
STAMP_core__SimpleVector_int32_t_O = 245,
STAMP_core__SimpleBitVector_O = 246,
STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_ = 247,
STAMP_core__SimpleVector_byte32_t_O = 248,
STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_ = 249,
STAMP_core__SimpleVector_size_t_O = 250,
STAMP_core__template_SimpleVector_core__SimpleVectorDouble_O_double_core__AbstractSimpleVector_O_ = 251,
STAMP_core__SimpleVectorDouble_O = 252,
STAMP_core__MDArray_O = 253,
STAMP_core__BitVectorNs_O = 254,
STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_ = 255,
STAMP_core__MDArray_byte64_t_O = 256,
STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_ = 257,
STAMP_core__MDArray_int16_t_O = 258,
STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_ = 259,
STAMP_core__MDArray_int8_t_O = 260,
STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_ = 261,
STAMP_core__MDArrayCharacter_O = 262,
STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_ = 263,
STAMP_core__MDArray_int32_t_O = 264,
STAMP_core__template_Array_core__MDArrayFloat_O_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__MDArray_O_ = 265,
STAMP_core__MDArrayFloat_O = 266,
STAMP_core__StrNs_O = 267,
STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_ = 268,
STAMP_core__StrWNs_O = 269,
STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_ = 270,
STAMP_core__Str8Ns_O = 271,
STAMP_core__template_Array_core__MDArrayDouble_O_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__MDArray_O_ = 272,
STAMP_core__MDArrayDouble_O = 273,
STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_ = 274,
STAMP_core__MDArrayT_O = 275,
STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_ = 276,
STAMP_core__MDArray_size_t_O = 277,
STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_ = 278,
STAMP_core__MDArray_byte8_t_O = 279,
STAMP_core__MDArrayBit_O = 280,
STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_ = 281,
STAMP_core__MDArray_int64_t_O = 282,
STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_ = 283,
STAMP_core__MDArray_byte16_t_O = 284,
STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_ = 285,
STAMP_core__MDArray_byte32_t_O = 286,
STAMP_core__SimpleMDArray_O = 287,
STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_ = 288,
STAMP_core__SimpleMDArray_int8_t_O = 289,
STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_ = 290,
STAMP_core__SimpleMDArrayCharacter_O = 291,
STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_ = 292,
STAMP_core__SimpleMDArray_fixnum_O = 293,
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_ = 294,
STAMP_core__SimpleMDArray_byte32_t_O = 295,
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_ = 296,
STAMP_core__SimpleMDArray_byte16_t_O = 297,
STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_ = 298,
STAMP_core__SimpleMDArrayT_O = 299,
STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_ = 300,
STAMP_core__SimpleMDArray_int32_t_O = 301,
STAMP_core__template_SimpleArray_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__SimpleMDArray_O_ = 302,
STAMP_core__SimpleMDArrayDouble_O = 303,
STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_ = 304,
STAMP_core__SimpleMDArrayBaseChar_O = 305,
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_ = 306,
STAMP_core__SimpleMDArray_byte64_t_O = 307,
STAMP_core__SimpleMDArrayBit_O = 308,
STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_ = 309,
STAMP_core__SimpleMDArray_int16_t_O = 310,
STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_ = 311,
STAMP_core__SimpleMDArray_byte8_t_O = 312,
STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_ = 313,
STAMP_core__SimpleMDArray_size_t_O = 314,
STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_ = 315,
STAMP_core__SimpleMDArray_int64_t_O = 316,
STAMP_core__template_SimpleArray_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__SimpleMDArray_O_ = 317,
STAMP_core__SimpleMDArrayFloat_O = 318,
STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_ = 319,
STAMP_core__MDArray_fixnum_O = 320,
STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_ = 321,
STAMP_core__MDArrayBaseChar_O = 322,
STAMP_core__Symbol_O = 323,
STAMP_core__Null_O = 324,
STAMP_mp__BlockingConcurrentQueue_O = 325,
STAMP_core__Path_O = 326,
STAMP_core__Character_dummy_O = 327,
STAMP_core__SourceManager_O = 328,
STAMP_llvmo__DataLayout_O = 329,
STAMP_core__Pathname_O = 330,
STAMP_core__LogicalPathname_O = 331,
STAMP_core__Cache_O = 332,
STAMP_core__LoadTimeValues_O = 333,
STAMP_core__SharpEqualWrapper_O = 334,
STAMP_core__Number_O = 335,
STAMP_core__Real_O = 336,
STAMP_core__Rational_O = 337,
STAMP_core__Ratio_O = 338,
STAMP_core__Integer_O = 339,
STAMP_core__Bignum_O = 340,
STAMP_core__Fixnum_dummy_O = 341,
STAMP_core__Float_O = 342,
STAMP_core__DoubleFloat_O = 343,
STAMP_core__SingleFloat_dummy_O = 344,
STAMP_core__LongFloat_O = 345,
STAMP_core__ShortFloat_O = 346,
STAMP_core__Complex_O = 347,
STAMP_core__Stream_O = 348,
STAMP_core__AnsiStream_O = 349,
STAMP_core__TwoWayStream_O = 350,
STAMP_core__BroadcastStream_O = 351,
STAMP_core__SynonymStream_O = 352,
STAMP_core__ConcatenatedStream_O = 353,
STAMP_core__StringStream_O = 354,
STAMP_core__StringOutputStream_O = 355,
STAMP_core__StringInputStream_O = 356,
STAMP_core__FileStream_O = 357,
STAMP_core__IOFileStream_O = 358,
STAMP_core__IOStreamStream_O = 359,
STAMP_core__EchoStream_O = 360,
STAMP_core__Package_O = 361,
STAMP_llvmo__ClaspJIT_O = 362,
STAMP_core__FileStatus_O = 363,
STAMP_core__InvocationHistoryFrameIterator_O = 364,
STAMP_core__PosixTime_O = 365,
STAMP_core__HashTable_O = 366,
STAMP_core__HashTableEqual_O = 367,
STAMP_core__HashTableEqualp_O = 368,
STAMP_core__HashTableEq_O = 369,
STAMP_core__HashTableEql_O = 370,
STAMP_core__Exposer_O = 371,
STAMP_core__CoreExposer_O = 372,
STAMP_asttooling__AsttoolingExposer_O = 373,
STAMP_core__SourcePosInfo_O = 374,
STAMP_core__IntArray_O = 375,
STAMP_core__SourceFileInfo_O = 376,
STAMP_core__DirectoryEntry_O = 377,
STAMP_core__LightUserData_O = 378,
STAMP_core__UserData_O = 379,
STAMP_core__Record_O = 380,
STAMP_clbind__ClassRegistry_O = 381,
STAMP_mp__ConcurrentQueue_O = 382,
STAMP_core__Cons_O = 383,
STAMP_clang__ast_matchers__MatchFinder__MatchCallback = 384,
STAMP_core__Lisp_O = 385,
STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_ = 386,
STAMP_asttooling__AstVisitor_O = 387,
STAMP_gctools__GCContainer = 388,
STAMP_gctools__GCVector_moveable_core__KeywordArgument_ = 389,
STAMP_gctools__GCArray_moveable_unsigned_int_ = 390,
STAMP_gctools__GCVector_moveable_core__CacheRecord_ = 391,
STAMP_gctools__GCVector_moveable_core__RequiredArgument_ = 392,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ = 393,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__ = 394,
STAMP_gctools__GCVector_moveable_double_ = 395,
STAMP_gctools__GCVector_moveable_core__SymbolStorage_ = 396,
STAMP_gctools__GCArray_moveable_short_ = 397,
STAMP_gctools__GCVector_moveable_core__DynamicBinding_ = 398,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__ = 399,
STAMP_gctools__GCArray_moveable_unsigned_long_ = 400,
STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_ = 401,
STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___ = 402,
STAMP_gctools__GCArray_moveable_signed_char_ = 403,
STAMP_gctools__GCVector_moveable_core__ExceptionEntry_ = 404,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__ = 405,
STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___ = 406,
STAMP_gctools__GCArray_moveable_int_ = 407,
STAMP_gctools__GCArray_moveable_unsigned_char_ = 408,
STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__ = 409,
STAMP_gctools__GCVector_moveable_core__AuxArgument_ = 410,
STAMP_gctools__GCArray_moveable_long_ = 411,
STAMP_gctools__GCVector_moveable_int_ = 412,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__ = 413,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ = 414,
STAMP_gctools__GCVector_moveable_core__SymbolClassPair_ = 415,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__ = 416,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ = 417,
STAMP_gctools__GCArray_moveable_float_ = 418,
STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__ = 419,
STAMP_gctools__GCArray_moveable_double_ = 420,
STAMP_gctools__GCVector_moveable_core__T_O___ = 421,
STAMP_gctools__GCVector_moveable_core__OptionalArgument_ = 422,
STAMP_gctools__GCArray_moveable_unsigned_short_ = 423,
STAMP_gctools__GCVector_moveable_float_ = 424,
STAMP_clang__FrontendAction = 425,
STAMP_clang__ASTFrontendAction = 426,
STAMP_clang__SyntaxOnlyAction = 427,
STAMP_clang__tooling__ToolAction = 428,
STAMP_clang__tooling__FrontendActionFactory = 429,
STAMP_clbind__detail__class_map = 430,
// Unused CLEAVIR-IR::SLOT-WRITE-INSTRUCTION = 1800, 
// Unused CLEAVIR-ENVIRONMENT::NO-FUNCTION-INFO = 1436, 
// Unused CLASP-CLEAVIR-AST::DEBUG-MESSAGE-AST = 2068, 
// Unused CONCRETE-SYNTAX-TREE::AUX-PARAMETER-GROUP = 1044, 
// Unused CORE::INDENTATION = 910, 
// Unused CLEAVIR-IR::FETCH-INSTRUCTION = 1816, 
// Unused ECLECTOR.READER::INVALID-RADIX = 1206, 
// Unused CLEAVIR-IR::MULTIPLE-VALUE-CALL-INSTRUCTION = 1810, 
// Unused CLEAVIR-GENERATE-AST::LAMBDA-CALL-FIRST-SYMBOL-NOT-LAMBDA = 1570, 
// Unused CLEAVIR-GENERATE-AST::BINDING-MUST-BE-SYMBOL-OR-LIST = 1542, 
// Unused CLEAVIR-GENERATE-AST::NOT-ENOUGH-ARGUMENTS = 1520, 
// Unused CLEAVIR-AST::FIXNUM-NOT-GREATER-AST = 1310, 
// Unused CLASP-CLEAVIR-AST::THROW-AST = 2066, 
// Unused SICL-ADDITIONAL-CONDITIONS::SLOT-OPTION-NAME-MUST-BE-SYMBOL = 2008, 
// Unused CLEAVIR-IR::FIXED-TO-MULTIPLE-INSTRUCTION = 1808, 
// Unused CLASP-CLEAVIR-AST::FOREIGN-CALL-POINTER-AST = 2076, 
// Unused CONCRETE-SYNTAX-TREE::MACRO-LAMBDA-LIST = 1114, 
// Unused CLEAVIR-AST-TO-HIR::MISCONTEXT = 1832, 
// Unused CLEAVIR-IR::IMMEDIATE-INPUT = 1702, 
// Unused ECLECTOR.READER::SHARPSIGN-EQUALS-LABEL-DEFINED-MORE-THAN-ONCE = 1220, 
// Unused CLEAVIR-CODE-UTILITIES::REQUIRED-MUST-BE-VARIABLE = 1422, 
// Unused CLEAVIR-CODE-UTILITIES::ENVIRONMENT-CAN-APPEAR-AT-MOST-ONCE = 1400, 
// Unused CLASP-CLEAVIR-AST::PRECALC-VECTOR-FUNCTION-AST = 2090, 
// Unused CORE::FRAME = 748, 
// Unused CLEAVIR-KILDALL-TYPE-INFERENCE::TYPE-INFERENCE = 1856, 
// Unused CLEAVIR-AST::FIXNUM-LESS-AST = 1308, 
// Unused CLEAVIR-AST-TO-HIR::CONTEXT = 1830, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-LAMBDA-LIST = 1116, 
// Unused CLASP-CLEAVIR-HIR::ARRAY-TOTAL-SIZE-INSTRUCTION = 2110, 
// Unused CLASP-CLEAVIR-HIR::SETF-FDEFINITION-INSTRUCTION = 2124, 
// Unused CLEAVIR-IR::MEMSET1-INSTRUCTION = 1892, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-START-INDEX = 1946, 
// Unused CORE::PPRINT-DISPATCH-ENTRY = 918, 
// Unused CLEAVIR-AST::FLOAT-ADD-AST = 1318, 
// Unused GRAY::FUNDAMENTAL-STREAM = 882, 
// Unused CLEAVIR-AST::FIXNUM-EQUAL-AST = 1316, 
// Unused CLEAVIR-GENERATE-AST::FLET-FUNCTIONS-MUST-BE-PROPER-LIST = 1534, 
// Unused CLEAVIR-IR::THE-VALUES-INSTRUCTION = 1812, 
// Unused CLASP-ANALYZER::DEPENDENT-NAME-CTYPE = 2416, 
// Unused CORE::TOO-FEW-ARGUMENTS-ERROR = 860, 
// Unused CLEAVIR-LIVENESS::LIVE-AFTER-MIXIN = 1854, 
// Unused CLEAVIR-METER::METER = 1232, 
// Unused CLEAVIR-IR::UNSIGNED-NOT-GREATER-INSTRUCTION = 1910, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-KEYWORD-NOT-ALLOWED = 1380, 
// Unused CLANG-TOOL::MULTITOOL = 2196, 
// Unused CLANG-TOOL::COMPILATION-TOOL-DATABASE = 2178, 
// Unused CLASP-ANALYZER::ENUM-CTYPE = 2418, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-TYPE-ERROR = 1922, 
// Unused CLASP-CLEAVIR-HIR::MULTIPLE-VALUE-ONE-FORM-CALL-INSTRUCTION = 2122, 
// Unused CLEAVIR-CODE-UTILITIES::ODD-NUMBER-OF-KEYWORD-ARGUMENTS = 1372, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-ALLOW-OTHER-KEYS = 1098, 
// Unused CLEAVIR-CST-TO-AST::SITUATIONS-MUST-BE-PROPER-LIST = 1620, 
// Unused ACCLIMATION::TIENG-VIET = 982, 
// Unused CLASP-CLEAVIR-AST::SETF-FDEFINITION-AST = 2062, 
// Unused CLEAVIR-METER::BASIC-METER = 1234, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-UNKNOWN = 1560, 
// Unused CLEAVIR-AST::FIXNUM-ADD-AST = 1304, 
// Unused SICL-ADDITIONAL-CONDITIONS::SLOT-OPTIONS-MUST-BE-EVEN = 2006, 
// Unused CLASP-ANALYZER::POINTER-CTYPE = 2438, 
// Unused CLEAVIR-ENVIRONMENT::LOCAL-MACRO-INFO = 1454, 
// Unused CLASP-CLEAVIR-AST::ARRAY-TOTAL-SIZE-AST = 2084, 
// Unused CLEAVIR-CST-TO-AST::INCORRECT-NUMBER-OF-ARGUMENTS = 1610, 
// Unused CLEAVIR-AST::SLOT-READ-AST = 1352, 
// Unused COMMON-LISP::METHOD = 760, 
// Unused COMMON-LISP::FLOATING-POINT-OVERFLOW = 850, 
// Unused CLEAVIR-IR::CAR-INSTRUCTION = 1790, 
// Unused COMMON-LISP::TYPE-ERROR = 808, 
// Unused CLEAVIR-AST::FLOAT-GREATER-AST = 1330, 
// Unused COMMON-LISP::SIMPLE-CONDITION = 786, 
// Unused CLEAVIR-IR::RAW-FLOAT = 1886, 
// Unused CONCRETE-SYNTAX-TREE::EXPLICIT-MULTI-PARAMETER-GROUP = 1030, 
// Unused CONCRETE-SYNTAX-TREE::DEFINE-MODIFY-MACRO-LAMBDA-LIST = 1124, 
// Unused CORE::SIMPLE-STREAM-ERROR = 826, 
// Unused CORE::UNRECOGNIZED-KEYWORD-ARGUMENT-ERROR = 864, 
// Unused ECLECTOR.READER::INVALID-DEFAULT-FLOAT-FORMAT = 1208, 
// Unused CLEAVIR-CST-TO-AST::TOO-MANY-ARGUMENTS-WARNING = 1670, 
// Unused CC-MIR::HEADERQ-INSTRUCTION = 2138, 
// Unused SICL-ADDITIONAL-CONDITIONS::UNKNOWN-CLASS-OPTION = 2036, 
// Unused EXT::STACK-OVERFLOW = 800, 
// Unused COMMON-LISP::PACKAGE-ERROR = 834, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST = 1430, 
// Unused CLEAVIR-IR::DYNAMIC-ALLOCATION-INSTRUCTION = 1730, 
// Unused CLEAVIR-CST-TO-AST::ODD-KEYWORD-PORTION = 1606, 
// Unused ECLECTOR.READER::READ-TIME-EVALUATION-INHIBITED = 1200, 
// Unused CONCRETE-SYNTAX-TREE::PARAMETER-GROUP = 1020, 
// Unused CLEAVIR-CST-TO-AST::READ-ONLY-P-MUST-BE-BOOLEAN = 1644, 
// Unused CLEAVIR-IR::ALLOCATION-MIXIN = 1694, 
// Unused CONCRETE-SYNTAX-TREE::DEFSETF-LAMBDA-LIST = 1120, 
// Unused CLASP-ANALYZER::STAMP = 2378, 
// Unused SB-BSD-SOCKETS::OUT-OF-MEMORY-ERROR = 948, 
// Unused COMMON-LISP::UNBOUND-VARIABLE = 840, 
// Unused SB-BSD-SOCKETS::NETWORK-UNREACHABLE-ERROR = 958, 
// Unused CLEAVIR-LIVENESS::LIVENESS = 1846, 
// Unused CLEAVIR-AST::MULTIPLE-VALUE-CALL-AST = 1290, 
// Unused CLEAVIR-GENERATE-AST::LAMBDA-MUST-BE-PROPER-LIST = 1536, 
// Unused COMMON-LISP::ERROR = 784, 
// Unused CLEAVIR-LIVENESS::LIVENESS-MIXIN = 1850, 
// Unused CONCRETE-SYNTAX-TREE::IMPLICIT-PARAMETER-GROUP = 1026, 
// Unused CLEAVIR-GENERATE-AST::ODD-KEYWORD-PORTION-STYLE-WARNING = 1582, 
// Unused CLEAVIR-IR::STORE-TO-STATIC-ENVIRONMENT-INSTRUCTION = 1828, 
// Unused COMMON-LISP::STANDARD-METHOD = 762, 
// Unused CLEAVIR-IR::SLOT-READ-INSTRUCTION = 1798, 
// Unused SICL-ADDITIONAL-CONDITIONS::EMPTY-BODY = 2038, 
// Unused CLEAVIR-AST::AST = 1238, 
// Unused CORE::TOO-MANY-ARGUMENTS-ERROR = 862, 
// Unused CLASP-CLEAVIR-HIR::DISPLACED-INDEX-OFFSET-INSTRUCTION = 2108, 
// Unused CLASP-ANALYZER::CCLASS = 2356, 
// Unused CONCRETE-SYNTAX-TREE::EXPLICIT-PARAMETER-GROUP = 1028, 
// Unused SB-BSD-SOCKETS::NO-BUFFERS-ERROR = 946, 
// Unused CLASP-ANALYZER::ROOTCLASSALLOC = 2372, 
// Unused CLASP-CLEAVIR::CONTINUE-HIR = 2130, 
// Unused CLEAVIR-AST::RETURN-FROM-AST = 1270, 
// Unused CLASP-CLEAVIR::CLASP-ORDINARY-LAMBDA-LIST = 2058, 
// Unused CLEAVIR-IR::RAW-UNSIGNED-INTEGER = 1882, 
// Unused CLEAVIR-CST-TO-AST::BLOCK-NAME-MUST-BE-A-SYMBOL = 1616, 
// Unused CLEAVIR-CST-TO-AST::NOT-ENOUGH-ARGUMENTS-WARNING = 1674, 
// Unused SB-BSD-SOCKETS::HOST-NOT-FOUND-ERROR = 966, 
// Unused CLEAVIR-ENVIRONMENT::INLINE-EXPANSION = 1498, 
// Unused CLEAVIR-CST-TO-AST::SETQ-MUST-HAVE-EVEN-NUMBER-OF-ARGUMENTS = 1648, 
// Unused CLEAVIR-AST::AREF-AST = 1356, 
// Unused SB-BSD-SOCKETS::NO-ADDRESS-ERROR = 972, 
// Unused CLASP-ANALYZER::MANAGER = 2490, 
// Unused CLASP-ANALYZER::INSTANCE-VARIABLE = 2360, 
// Unused COMMON-LISP::VARIABLE = 2384, 
// Unused CLEAVIR-GENERATE-AST::COMPILATION-WARNING = 1508, 
// Unused COMMON-LISP::CONDITION = 778, 
// Unused CLEAVIR-IR::COERCE-INSTRUCTION = 1788, 
// Unused ECLECTOR.READER::TWO-PACKAGE-MARKERS-MUST-NOT-BE-FIRST = 1186, 
// Unused CLEAVIR-CST-TO-AST::ARGUMENT-MISMATCH-STYLE-WARNING = 1600, 
// Unused ECLECTOR.READER::EXTRANEOUS-OBJECTS-IGNORED = 1196, 
// Unused CORE::FORMAT-ERROR = 878, 
// Unused CONCRETE-SYNTAX-TREE::WHOLE-PARAMETER-GROUP = 1062, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-SPECIALIZED-REQUIRED = 1402, 
// Unused CLEAVIR-PARTIAL-INLINING::WORKLIST-ITEM = 1866, 
// Unused CLEAVIR-IR::SYMBOL-VALUE-INSTRUCTION = 1744, 
// Unused CLEAVIR-IR::FIXNUM-LESS-INSTRUCTION = 1762, 
// Unused CLEAVIR-AST::FDEFINITION-AST = 1258, 
// Unused CLEAVIR-ENVIRONMENT::NO-TAG-INFO = 1440, 
// Unused CLOS::FORWARD-REFERENCED-CLASS = 720, 
// Unused CLEAVIR-IR::DATUM = 1682, 
// Unused CLEAVIR-ENVIRONMENT::BLOCK-INFO = 1460, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-SLOT-SPEC = 2002, 
// Unused CLASP-ANALYZER::CLASS-LAYOUT = 2376, 
// Unused CLEAVIR-IR::MULTIPLE-TO-FIXED-INSTRUCTION = 1806, 
// Unused CLEAVIR-AST::ONE-VALUE-AST-MIXIN = 1244, 
// Unused CLASP-CLEAVIR-HIR::DEBUG-MESSAGE-INSTRUCTION = 2096, 
// Unused CORE::TAB = 916, 
// Unused SB-BSD-SOCKETS::PROTOCOL-NOT-SUPPORTED-ERROR = 954, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DEFGENERIC-OPTIONAL = 1406, 
// Unused ECLECTOR.READER::SINGLE-FEATURE-EXPECTED = 1216, 
// Unused CONCRETE-SYNTAX-TREE::MULTI-PARAMETER-GROUP-MIXIN = 1024, 
// Unused CLOS::METAOBJECT = 704, 
// Unused CLEAVIR-LIVENESS::LIVE-BEFORE-MIXIN = 1852, 
// Unused COMMON-LISP::UNDEFINED-FUNCTION = 844, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-UNKNOWN = 1656, 
// Unused CONCRETE-SYNTAX-TREE::SINGLETON-PARAMETER-GROUP-MIXIN = 1022, 
// Unused CLEAVIR-IR::REMOVE-ACTIVATION-RECORD-INSTRUCTION = 1824, 
// Unused COMMON-LISP::RESTART = 776, 
// Unused CLASP-CLEAVIR-HIR::ARRAY-RANK-INSTRUCTION = 2112, 
// Unused COMMON-LISP::CELL-ERROR = 838, 
// Unused CLEAVIR-AST::BLOCK-AST = 1268, 
// Unused CORE::PRETTY-STREAM = 900, 
// Unused CLANG-TOOL::GOOD-DUMP-MATCH-CALLBACK = 2182, 
// Unused CLASP-CLEAVIR-AST::DISPLACEMENT-AST = 2080, 
// Unused CC-MIR::ASSIGN-CATCH-INSTRUCTION = 2142, 
// Unused CORE::FOREIGN-DATA = 746, 
// Unused COMMON-LISP::FLOATING-POINT-INEXACT = 854, 
// Unused CLASP-CLEAVIR-HIR::DISPLACEMENT-INSTRUCTION = 2106, 
// Unused SICL-ADDITIONAL-CONDITIONS::UNRECOGNIZED-KEYWORD-ARGUMENT = 1992, 
// Unused SICL-ADDITIONAL-CONDITIONS::SUPERCLASS-LIST-MUST-BE-PROPER-LIST = 1998, 
// Unused SICL-ADDITIONAL-CONDITIONS::UNKNOWN-EVAL-WHEN-SITUATION = 1976, 
// Unused CLOS::INITARGS-UPDATER = 772, 
// Unused CLASP-CLEAVIR-HIR::VECTOR-LENGTH-INSTRUCTION = 2104, 
// Unused CONCRETE-SYNTAX-TREE::CCL = 1016, 
// Unused COMMON-LISP::PARSE-ERROR = 870, 
// Unused COMMON-LISP::SIMPLE-ERROR = 794, 
// Unused CLEAVIR-IR::RPLACD-INSTRUCTION = 1796, 
// Unused CLEAVIR-AST::TAGBODY-AST = 1278, 
// Unused ECLECTOR.READER::TOO-MANY-ELEMENTS = 1210, 
// Unused CLEAVIR-GENERATE-AST::NOT-ENOUGH-ARGUMENTS-STYLE-WARNING = 1578, 
// Unused CLEAVIR-IR::CATCH-INSTRUCTION = 1732, 
// Unused CONCRETE-SYNTAX-TREE::RULE = 1130, 
// Unused CLASP-CLEAVIR::KEYWORD-VA-REST = 2056, 
// Unused CLASP-ANALYZER::CTYPE = 2402, 
// Unused SB-BSD-SOCKETS::SOCKET-TYPE-NOT-SUPPORTED-ERROR = 956, 
// Unused CLEAVIR-GENERATE-AST::COMPILATION-PROGRAM-ERROR = 1506, 
// Unused CLEAVIR-COMPILATION-POLICY::UNKNOWN-OPTIMIZE-QUALITY = 1502, 
// Unused CLEAVIR-IR::SET-SYMBOL-VALUE-INSTRUCTION = 1746, 
// Unused CLOS::STANDARD-DIRECT-SLOT-DEFINITION = 700, 
// Unused CLEAVIR-ENVIRONMENT::BLOCK = 1478, 
// Unused CLASP-ANALYZER::SIMPLE-CTYPE = 2406, 
// Unused CLEAVIR-IR::ENTER-INSTRUCTION = 1706, 
// Unused CLEAVIR-CST-TO-AST::NOT-ENOUGH-ARGUMENTS = 1604, 
// Unused SICL-ADDITIONAL-CONDITIONS::FORM-MUST-BE-PROPER-LIST = 1958, 
// Unused CLEAVIR-CODE-UTILITIES::WHOLE-MUST-BE-FOLLOWED-BY-VARIABLE = 1396, 
// Unused CLEAVIR-ENVIRONMENT::NO-BLOCK-INFO = 1438, 
// Unused CLEAVIR-IR::FLOAT-SUB-INSTRUCTION = 1770, 
// Unused CLEAVIR-CST-TO-AST::ARGUMENT-MISMATCH = 1596, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-SLOTS-LIST = 2000, 
// Unused ACCLIMATION::VIETNAMESE = 990, 
// Unused ECLECTOR.READER::INVALID-CONTEXT-FOR-BACKQUOTE = 1158, 
// Unused CLASP-ANALYZER::POD-OFFSET = 2472, 
// Unused SICL-ADDITIONAL-CONDITIONS::FORM-TOO-LONG = 1974, 
// Unused SB-BSD-SOCKETS::ADDRESS-IN-USE-ERROR = 932, 
// Unused CORE::ABORT-FAILURE = 866, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-BODY = 1094, 
// Unused CLEAVIR-IR::FIXNUM-SUB-INSTRUCTION = 1760, 
// Unused CLASP-CLEAVIR-AST::ARRAY-RANK-AST = 2086, 
// Unused CLASP-CLEAVIR-AST::BIND-VA-LIST-AST = 2094, 
// Unused CLEAVIR-IR::FUNCALL-NO-RETURN-INSTRUCTION = 1718, 
// Unused CLEAVIR-IR::ENCLOSE-INSTRUCTION = 1724, 
// Unused COMMON-LISP::UNBOUND-SLOT = 842, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION-DYNAMIC-EXTENT = 1492, 
// Unused CORE::SIMPLE-PARSE-ERROR = 872, 
// Unused CLEAVIR-IR::SIGNED-SUB-INSTRUCTION = 1898, 
// Unused CLASP-ANALYZER::ALLOC = 2364, 
// Unused ECLECTOR.READER::END-OF-LIST = 1154, 
// Unused COMMON-LISP::SIMPLE-WARNING = 788, 
// Unused CONCRETE-SYNTAX-TREE::BOA-LAMBDA-LIST = 1118, 
// Unused COMMON-LISP::FLOATING-POINT-UNDERFLOW = 852, 
// Unused CONCRETE-SYNTAX-TREE::CLIENT = 1006, 
// Unused CC-MIR::SAVE-FRAME-INSTRUCTION = 2140, 
// Unused SICL-ADDITIONAL-CONDITIONS::FORM-TOO-SHORT = 1972, 
// Unused CLEAVIR-GENERATE-AST::ODD-KEYWORD-PORTION-WARNING = 1580, 
// Unused CLEAVIR-AST::BIND-AST = 1300, 
// Unused CLEAVIR-ENVIRONMENT::VARIABLE-TYPE = 1482, 
// Unused CC-MIR::TYPED-LEXICAL-LOCATION = 2132, 
// Unused CLEAVIR-GENERATE-AST::NO-DEFAULT-METHOD = 1568, 
// Unused CLEAVIR-GENERATE-AST::SOURCE-LOCATION = 1584, 
// Unused ECLECTOR.CONCRETE-SYNTAX-TREE::CST-CLIENT = 1224, 
// Unused CLANG-TOOL::DUMP-MATCH-CALLBACK = 2184, 
// Unused COMMON-LISP::FLOATING-POINT-INVALID-OPERATION = 856, 
// Unused CLEAVIR-IR::ASSIGNMENT-INSTRUCTION = 1714, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION-TYPE = 1484, 
// Unused CLEAVIR-CODE-UTILITIES::MULTIPLE-OCCURRENCES-OF-LAMBDA-LIST-KEYWORD = 1384, 
// Unused CLASP-ANALYZER::PROJECT = 2392, 
// Unused ACCLIMATION::SWEDISH = 988, 
// Unused CLEAVIR-CST-TO-AST::FORM-MUST-BE-PROPER-LIST = 1618, 
// Unused COMMON-LISP::STORAGE-CONDITION = 796, 
// Unused CLASP-ANALYZER::INSTANCE-FIELD = 2358, 
// Unused SB-BSD-SOCKETS::INVALID-ARGUMENT-ERROR = 944, 
// Unused CLASP-ANALYZER::INSTANCE-ARRAY-ELEMENT = 2362, 
// Unused CORE::MDARRAY-DUMP = 734, 
// Unused COMMON-LISP::READER-ERROR = 874, 
// Unused CLEAVIR-AST::FLOAT-COS-AST = 1338, 
// Unused CLEAVIR-CST-TO-AST::SETQ-CONSTANT-VARIABLE = 1652, 
// Unused COMMON-LISP::PROGRAM-ERROR = 814, 
// Unused CLEAVIR-IO::UNKNOWN-FILE-VERSION = 1230, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION = 1474, 
// Unused SICL-ADDITIONAL-CONDITIONS::ILLEGAL-SLOT-NAME = 2004, 
// Unused COMMON-LISP::VECTOR = 732, 
// Unused SICL-ADDITIONAL-CONDITIONS::AT-LEAST-ONE-LIST-REQUIRED = 1932, 
// Unused CLEAVIR-AST::EQ-AST = 1302, 
// Unused CLEAVIR-IR::BOTH-OR-NO-INDIVIDUAL-SUCCESSORS-MUST-BE-GIVEN = 1876, 
// Unused CLASP-ANALYZER::RECORD-CTYPE = 2432, 
// Unused CLEAVIR-IR::AREF-INSTRUCTION = 1802, 
// Unused CLANG-TOOL::CODE-MATCH-TIMER = 2180, 
// Unused CLEAVIR-GENERATE-AST::BODY = 1586, 
// Unused CONCRETE-SYNTAX-TREE::TARGET = 1128, 
// Unused EXT::SEGMENTATION-VIOLATION = 798, 
// Unused CORE::LOGICAL-BLOCK = 902, 
// Unused CLEAVIR-AST::SETQ-AST = 1272, 
// Unused CLEAVIR-GENERATE-AST::BINDING-MUST-HAVE-LENGTH-ONE-OR-TWO = 1544, 
// Unused CONCRETE-SYNTAX-TREE::CST = 996, 
// Unused CLEAVIR-CST-TO-AST::BINDINGS-MUST-BE-PROPER-LIST = 1636, 
// Unused SB-BSD-SOCKETS::NO-RECOVERY-ERROR = 970, 
// Unused SICL-ADDITIONAL-CONDITIONS::CLASS-OPTION-NAME-MUST-BE-SYMBOL = 2022, 
// Unused CLEAVIR-IR::SIDE-EFFECT-MIXIN = 1692, 
// Unused CLEAVIR-IR::THE-INSTRUCTION = 1728, 
// Unused CLASP-ANALYZER::SIMPLE-STAMP = 2380, 
// Unused CLEAVIR-IR::FLOAT-SQRT-INSTRUCTION = 1786, 
// Unused ACCLIMATION::LANGUAGE = 976, 
// Unused CLEAVIR-IR::INSTRUCTION = 1684, 
// Unused CLEAVIR-IR::FUNCALL-INSTRUCTION = 1716, 
// Unused CLEAVIR-IR::RAW-DATUM = 1880, 
// Unused CLEAVIR-AST::PROGN-AST = 1266, 
// Unused CLEAVIR-IR::UNREACHABLE-INSTRUCTION = 1712, 
// Unused CLEAVIR-IR::WRITE-CELL-INSTRUCTION = 1820, 
// Unused SICL-ADDITIONAL-CONDITIONS::DECLARATIONS-NOT-ALLOWED-IN-BODY = 1968, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-DEFAULT-INITARGS-OPTION = 2028, 
// Unused CLASP-CLEAVIR-HIR::BIND-VA-LIST-INSTRUCTION = 2116, 
// Unused CLOS::STANDARD-EFFECTIVE-SLOT-DEFINITION = 698, 
// Unused CLASP-ANALYZER::PARALLEL-RESULT = 2498, 
// Unused EXT::STORAGE-EXHAUSTED = 802, 
// Unused CLEAVIR-IR::FLOAT-ADD-INSTRUCTION = 1768, 
// Unused CLEAVIR-AST::SET-SYMBOL-VALUE-AST = 1256, 
// Unused CONCRETE-SYNTAX-TREE::CST-ERROR = 1002, 
// Unused GRAY::FUNDAMENTAL-BINARY-OUTPUT-STREAM = 898, 
// Unused CLEAVIR-CODE-UTILITIES::SUSPECT-LAMBDA-LIST-KEYWORD = 1424, 
// Unused CLEAVIR-AST::CALL-AST = 1260, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-AUX = 1416, 
// Unused CONCRETE-SYNTAX-TREE::KEY-PARAMETER-GROUP = 1038, 
// Unused CLEAVIR-IR::FLOAT-COS-INSTRUCTION = 1784, 
// Unused CLEAVIR-IR::LEXICAL-LOCATION = 1698, 
// Unused CORE::CXX-CLASS = 722, 
// Unused SB-BSD-SOCKETS::SOCKET-ERROR = 930, 
// Unused CONCRETE-SYNTAX-TREE::LAMBDA-LIST-TYPE = 1106, 
// Unused CONCRETE-SYNTAX-TREE::SUPPLIED-P-MIXIN = 1068, 
// Unused SB-BSD-SOCKETS::SOCKET = 924, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-REST = 1092, 
// Unused CLEAVIR-AST::SYMBOL-VALUE-AST = 1254, 
// Unused CLEAVIR-GENERATE-AST::TOO-MANY-ARGUMENTS-WARNING = 1572, 
// Unused CORE::NEWLINE = 908, 
// Unused CORE::PPRINT-DISPATCH-TABLE = 920, 
// Unused ECLECTOR.READER::SHARPSIGN-INVALID = 1218, 
// Unused CLEAVIR-ENVIRONMENT::TAG-INFO = 1462, 
// Unused CLEAVIR-AST::RPLACD-AST = 1350, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-OPTIONAL-PARAMETER = 1074, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-OPTIONAL-PARAMETER-GROUP = 1046, 
// Unused CLEAVIR-GENERATE-AST::BINDINGS-MUST-BE-PROPER-LIST = 1540, 
// Unused CLEAVIR-CST-TO-AST::VARIABLE-NAME-UNKNOWN = 1654, 
// Unused CLASP-ANALYZER::CONTAINER-OFFSET = 2478, 
// Unused ECLECTOR.READER::NO-OBJECTS-SUPPLIED = 1198, 
// Unused CLEAVIR-IR::READ-CELL-INSTRUCTION = 1818, 
// Unused CLASP-ANALYZER::GLOBAL-VARIABLE = 2386, 
// Unused CLEAVIR-CST-TO-AST::LET-OR-LET*-MUST-HAVE-AT-LEAST-ONE-ARGUMENT = 1634, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-ORDINARY-KEY = 1410, 
// Unused CC-MIR::SINGLE-FLOAT-P-INSTRUCTION = 2136, 
// Unused CLEAVIR-KILDALL::ITERATE-MIXIN = 1834, 
// Unused CORE::SIMPLE-FILE-ERROR = 832, 
// Unused CLEAVIR-IR::RAW-SIGNED-INTEGER = 1884, 
// Unused COMMON-LISP::STYLE-WARNING = 790, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-LAMBDA-LIST = 1110, 
// Unused CLEAVIR-CST-TO-AST::INVALID-EVAL-WHEN-SITUATION = 1622, 
// Unused CLEAVIR-IR::FLOAT-NOT-GREATER-INSTRUCTION = 1778, 
// Unused SICL-ADDITIONAL-CONDITIONS::DUPLICATE-CLASS-OPTION-NOT-ALLOWED = 2024, 
// Unused ECLECTOR.READER::UNQUOTE-SPLICING-IN-DOTTED-LIST = 1162, 
// Unused COMMON-LISP::STANDARD-OBJECT = 702, 
// Unused CLEAVIR-CST-TO-AST::LAMBDA-MUST-BE-PROPER-LIST = 1628, 
// Unused EXT::UNIX-SIGNAL-RECEIVED = 806, 
// Unused CLEAVIR-CST-TO-AST::VARIABLE-MUST-BE-A-SYMBOL = 1642, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-SYNTAX-ERROR = 1952, 
// Unused CONCRETE-SYNTAX-TREE::EARLEY-ITEM = 1134, 
// Unused CLEAVIR-IR::FDEFINITION-INSTRUCTION = 1748, 
// Unused CLEAVIR-GENERATE-AST::SETQ-VAR-MUST-BE-SYMBOL = 1554, 
// Unused CLEAVIR-AST::TAG-AST = 1276, 
// Unused CLASP-ANALYZER::ARRAY-OFFSET = 2474, 
// Unused CLASP-ANALYZER::GCVECTOR-OFFSET = 2484, 
// Unused CLEAVIR-CODE-UTILITIES::FUNCTION-BODY-MUST-BE-PROPER-LIST = 1428, 
// Unused CLASP-CLEAVIR::LITERAL = 2144, 
// Unused CLEAVIR-IR::USE-INSTRUCTION = 1752, 
// Unused CLEAVIR-IR::LOAD-FROM-STATIC-ENVIRONMENT-INSTRUCTION = 1826, 
// Unused CLEAVIR-CODE-UTILITIES::FORM-MUST-BE-PROPER-LIST = 1364, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-OPTIONAL-PARAMETER-GROUP = 1036, 
// Unused CLASP-ANALYZER::FUNCTION-PROTO-CTYPE = 2408, 
// Unused CLEAVIR-IR::FIXNUM-ADD-INSTRUCTION = 1758, 
// Unused CLANG-TOOL::COUNT-MATCH-CALLBACK = 2186, 
// Unused CONCRETE-SYNTAX-TREE::FORM-MIXIN = 1066, 
// Unused CLEAVIR-BASIC-BLOCKS::BASIC-BLOCK = 1914, 
// Unused CLEAVIR-GENERATE-AST::ARGUMENT-MISMATCH-WARNING = 1514, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-OPTIONAL-PARAMETER = 1082, 
// Unused COMMON-LISP::SERIOUS-CONDITION = 782, 
// Unused ACCLIMATION::JAPANESE = 992, 
// Unused CORE::CODE-BLOCK = 744, 
// Unused ECLECTOR.READER::INCORRECT-INITIALIZATION-LENGTH = 1214, 
// Unused CLEAVIR-ENVIRONMENT::SPECIAL-VARIABLE-INFO = 1444, 
// Unused CLEAVIR-AST::LEXICAL-AST = 1252, 
// Unused CLASP-ANALYZER::POINTER-OFFSET = 2470, 
// Unused SICL-ADDITIONAL-CONDITIONS::TAGBODY-ELEMENT-MUST-BE-SYMBOL-INTEGER-OR-COMPOUND-FORM = 1984, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-KEY-PARAMETER-GROUP = 1040, 
// Unused SICL-ADDITIONAL-CONDITIONS::BODY-MUST-BE-PROPER-LIST = 1962, 
// Unused SICL-ADDITIONAL-CONDITIONS::BOTH-TEST-AND-TEST-NOT-GIVEN = 1930, 
// Unused CLEAVIR-AST::FLOAT-EQUAL-AST = 1334, 
// Unused CLASP-CLEAVIR-HIR::FOREIGN-CALL-INSTRUCTION = 2100, 
// Unused CLEAVIR-KILDALL::INTERFUNCTION-MIXIN = 1844, 
// Unused CLEAVIR-KILDALL::ALIST-POOL-MIXIN = 1840, 
// Unused CLEAVIR-ENVIRONMENT::GLOBAL-FUNCTION-INFO = 1452, 
// Unused CLOS::EFFECTIVE-SLOT-DEFINITION = 712, 
// Unused CLEAVIR-AST::COERCE-AST = 1342, 
// Unused CLASP-ANALYZER::CLASSALLOC = 2370, 
// Unused CLASP-ANALYZER::CLASS-TEMPLATE-SPECIALIZATION-CTYPE = 2446, 
// Unused CLEAVIR-IR::FLOAT-EQUAL-INSTRUCTION = 1780, 
// Unused CLASP-ANALYZER::GC-TEMPLATE-ARGUMENT = 2400, 
// Unused SB-BSD-SOCKETS::TRY-AGAIN-ERROR = 968, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-UNBOUND-VARIABLE = 1926, 
// Unused CONCRETE-SYNTAX-TREE::CONS-CST-REQUIRED = 1004, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-REQUIRED-PARAMETER-GROUP = 1050, 
// Unused CLEAVIR-AST::MULTIPLE-VALUE-SETQ-AST = 1274, 
// Unused CLEAVIR-IR::BOTH-INDIVIDUAL-INPUTS-MUST-BE-GIVEN = 1872, 
// Unused CLEAVIR-ENVIRONMENT::SPECIAL-OPERATOR-INFO = 1458, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-PARAMETER = 1086, 
// Unused CLASP-CLEAVIR::RETURN-VALUES = 2150, 
// Unused CLEAVIR-GENERATE-AST::NOT-ENOUGH-ARGUMENTS-WARNING = 1576, 
// Unused CLASP-ANALYZER::STATIC-LOCAL-VARIABLE = 2388, 
// Unused ACCLIMATION::CONDITION = 994, 
// Unused CLEAVIR-AST::IMMEDIATE-AST = 1248, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-PARSE-ERROR = 1144, 
// Unused CLOS::DIRECT-SLOT-DEFINITION = 710, 
// Unused MP::LOCK = 750, 
// Unused SB-BSD-SOCKETS::LOCAL-SOCKET = 928, 
// Unused CLANG-TOOL::WRONG-MATCHER = 2200, 
// Unused CLEAVIR-AST::DYNAMIC-ALLOCATION-AST = 1296, 
// Unused CLASP-CLEAVIR::IMMEDIATE-LITERAL = 2146, 
// Unused COMMON-LISP::WARNING = 780, 
// Unused CLEAVIR-AST::FLOAT-SUB-AST = 1320, 
// Unused CLASP-ANALYZER::CONSTANT-ARRAY-OFFSET = 2476, 
// Unused CLEAVIR-IR::LOAD-TIME-VALUE-INPUT = 1704, 
// Unused CLEAVIR-IR::UNSIGNED-SUB-INSTRUCTION = 1906, 
// Unused CLANG-TOOL::MATCH-INFO = 2188, 
// Unused ECLECTOR.READER::SYMBOL-NAME-MUST-NOT-END-WITH-PACKAGE-MARKER = 1178, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-NAMES-LOCAL-MACRO = 1564, 
// Unused SICL-ADDITIONAL-CONDITIONS::TOO-FEW-ARGUMENTS = 1988, 
// Unused CLEAVIR-IR::PHI-INSTRUCTION = 1750, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-REQUIRED-PARAMETER-GROUP = 1032, 
// Unused CONCRETE-SYNTAX-TREE::SIMPLE-VARIABLE = 1072, 
// Unused SB-BSD-SOCKETS::INTERRUPTED-ERROR = 942, 
// Unused ECLECTOR.READER::INVALID-CONTEXT-FOR-RIGHT-PARENTHESIS = 1172, 
// Unused SICL-ADDITIONAL-CONDITIONS::DECLARATION-FOLLOWS-FORM-IN-BODY = 1970, 
// Unused CLEAVIR-HIR-TRANSFORMATIONS::DAG-NODE = 1860, 
// Unused GRAY::FUNDAMENTAL-CHARACTER-INPUT-STREAM = 892, 
// Unused MP::RWLOCK = 752, 
// Unused COMMON-LISP::DIVISION-BY-ZERO = 848, 
// Unused CLASP-CLEAVIR-AST::ARRAY-DIMENSION-AST = 2088, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-MUST-NOT-BE-CIRCULAR = 1376, 
// Unused CLASP-CLEAVIR-HIR::THROW-INSTRUCTION = 2126, 
// Unused CLASP-CLEAVIR-AST::MULTIPLE-VALUE-FOREIGN-CALL-AST = 2072, 
// Unused CLEAVIR-ENVIRONMENT::INLINE = 1496, 
// Unused COMMON-LISP::STANDARD-GENERIC-FUNCTION = 758, 
// Unused SB-BSD-SOCKETS::NAME-SERVICE-ERROR = 960, 
// Unused ECLECTOR.READER::MULTIPLE-OBJECTS-FOLLOWING-CONSING-DOT = 1170, 
// Unused SB-BSD-SOCKETS::INET-SOCKET = 926, 
// Unused ACCLIMATION::LOCALE = 974, 
// Unused CLOSER-MOP::STANDARD-GENERIC-FUNCTION = 1148, 
// Unused CLEAVIR-AST::RPLACA-AST = 1348, 
// Unused CLASP-ANALYZER::RVALUE-REFERENCE-CTYPE = 2414, 
// Unused CLASP-ANALYZER::CONSTANT-ARRAY-CTYPE = 2440, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-INITFORM-OPTIONS-NOT-PERMITTED = 2010, 
// Unused CLEAVIR-ENVIRONMENT::NO-INFO = 1432, 
// Unused CONCRETE-SYNTAX-TREE::CONS-CST = 1000, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-KEYWORD-NOT-ALLOWED-IN-DOTTED-LAMBDA-LIST = 1382, 
// Unused CLEAVIR-CST-TO-AST::ARGUMENT-MISMATCH-WARNING = 1598, 
// Unused CLEAVIR-IR::FLOAT-SIN-INSTRUCTION = 1782, 
// Unused ECLECTOR.READER::SYMBOL-DOES-NOT-EXIST = 1180, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-PROGRAM-STYLE-WARNING = 1956, 
// Unused SICL-ADDITIONAL-CONDITIONS::TOO-MANY-ARGUMENTS = 1990, 
// Unused CLEAVIR-ENVIRONMENT::VARIABLE-IGNORE = 1486, 
// Unused CLASP-ANALYZER::GCVECTOR-MOVEABLE-CTYPE = 2454, 
// Unused CLASP-ANALYZER::UNCLASSIFIED-TEMPLATE-SPECIALIZATION-CTYPE = 2430, 
// Unused CLEAVIR-CODE-UTILITIES::REST/BODY-MUST-BE-FOLLOWED-BY-VARIABLE = 1390, 
// Unused CLASP-ANALYZER::BITUNIT-CTYPE = 2404, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-MUST-BE-LIST = 1374, 
// Unused CLEAVIR-IR::SIGNED-NOT-GREATER-INSTRUCTION = 1902, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-AUX = 1100, 
// Unused CLASP-CLEAVIR-HIR::ARRAY-DIMENSION-INSTRUCTION = 2114, 
// Unused CLEAVIR-CODE-UTILITIES::TOO-MANY-ARGUMENTS = 1370, 
// Unused CLASP-ANALYZER::UNKNOWN-CTYPE = 2426, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-ARGUMENT-MUST-BE-FUNCTION-NAME-OR-LAMBDA-EXPRESSION = 1538, 
// Unused SICL-ADDITIONAL-CONDITIONS::GO-TAG-MUST-BE-SYMBOL-OR-INTEGER = 1978, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-CELL-ERROR = 1924, 
// Unused CLEAVIR-IR::MEMREF2-INSTRUCTION = 1890, 
// Unused CLEAVIR-IR::FIXNUMP-INSTRUCTION = 1740, 
// Unused GRAY::FUNDAMENTAL-INPUT-STREAM = 884, 
// Unused CLASP-ANALYZER::TEMPLATE-TYPE-PARM-CTYPE = 2412, 
// Unused CLEAVIR-AST::THE-AST = 1282, 
// Unused CLEAVIR-ENVIRONMENT::SYMBOL-MACRO-INFO = 1448, 
// Unused CLEAVIR-ENVIRONMENT::CONSTANT-VARIABLE-INFO = 1446, 
// Unused ECLECTOR.READER::CHAR-MUST-BE-A-DISPATCHING-CHARACTER = 1176, 
// Unused CLEAVIR-IR::UNSIGNED-ADD-INSTRUCTION = 1904, 
// Unused GRAY::FUNDAMENTAL-BINARY-STREAM = 890, 
// Unused SICL-ADDITIONAL-CONDITIONS::DOCUMENTATION-STRING-NOT-ALLOWED-IN-BODY = 1966, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-NAMES-GLOBAL-MACRO = 1562, 
// Unused GRAY::FUNDAMENTAL-CHARACTER-OUTPUT-STREAM = 894, 
// Unused CLEAVIR-AST::LOAD-TIME-VALUE-AST = 1286, 
// Unused CLEAVIR-AST::FLOAT-DIV-AST = 1324, 
// Unused CLANG-TOOL::SOURCE-LOC-MATCH-CALLBACK = 2192, 
// Unused SICL-ADDITIONAL-CONDITIONS::SETQ-VARIABLE-MUST-BE-SYMBOL = 1982, 
// Unused CLOSER-MOP::DEFMETHOD-WITHOUT-GENERIC-FUNCTION = 1150, 
// Unused CLOS::FUNCALLABLE-STANDARD-CLASS = 726, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-KEY-PARAMETER = 1076, 
// Unused CLEAVIR-CST-TO-AST::RUN-TIME-PROGRAM-ERROR = 1608, 
// Unused CLEAVIR-GENERATE-AST::ARGUMENT-MISMATCH-STYLE-WARNING = 1516, 
// Unused CLEAVIR-IR::RETURN-INSTRUCTION = 1722, 
// Unused CLASP-ANALYZER::UNSUPPORTED-TYPE = 2352, 
// Unused ECLECTOR.READER::NUMERIC-PARAMETER-SUPPLIED-BUT-IGNORED = 1192, 
// Unused CLEAVIR-AST::CAR-AST = 1344, 
// Unused CLEAVIR-COMPILATION-POLICY::BAD-OPTIMIZE-VALUE = 1500, 
// Unused CLEAVIR-CST-TO-AST::COMPILATION-PROGRAM-ERROR = 1590, 
// Unused CONCRETE-SYNTAX-TREE::PARSER = 1138, 
// Unused CLASP-ANALYZER::PARALLEL-JOB = 2496, 
// Unused CONCRETE-SYNTAX-TREE::PARAMETER = 1064, 
// Unused SICL-ADDITIONAL-CONDITIONS::DEPRECATED-EVAL-WHEN-SITUATION = 2042, 
// Unused CLASP-CLEAVIR-AST::NAMED-FUNCTION-AST = 2064, 
// Unused GRAY::FUNDAMENTAL-OUTPUT-STREAM = 886, 
// Unused CLEAVIR-CODE-UTILITIES::ORDINARY-BODY-MUST-BE-PROPER-LIST = 1426, 
// Unused SB-BSD-SOCKETS::HOST-ENT = 922, 
// Unused CLEAVIR-IR::FLOAT-MUL-INSTRUCTION = 1772, 
// Unused CLEAVIR-IR::TWO-SUCCESSORS-MIXIN = 1690, 
// Unused CLEAVIR-CST-TO-AST::COMPILATION-WARNING = 1592, 
// Unused CLASP-ANALYZER::GCSTRING-OFFSET = 2486, 
// Unused CLOS::SLOT-DEFINITION = 706, 
// Unused CLEAVIR-CST-TO-AST::IGNORED-VARIABLE-REFERENCED = 1614, 
// Unused ECLECTOR.READER::SYMBOL-IS-NOT-EXTERNAL = 1182, 
// Unused CLASP-ANALYZER::TEMPLATE-SPECIALIZATION-CTYPE = 2428, 
// Unused ECLECTOR.READER::SYMBOL-CAN-HAVE-AT-MOST-TWO-PACKAGE-MARKERS = 1188, 
// Unused CLOS::STANDARD-ACCESSOR-METHOD = 764, 
// Unused CLASP-ANALYZER::BUILTIN-CTYPE = 2420, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-DOCUMENTATION-OPTIONS-NOT-PERMITTED = 2012, 
// Unused CLEAVIR-AST::FUNCTION-AST = 1262, 
// Unused CLEAVIR-CODE-UTILITIES::WHOLE-MUST-APPEAR-FIRST = 1394, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-LAMBDA-LIST-PATTERN = 1420, 
// Unused CLEAVIR-CODE-UTILITIES::CODE-CONDITION = 1362, 
// Unused CLASP-CLEAVIR::CLASP-GLOBAL-ENVIRONMENT = 2050, 
// Unused CLASP-ANALYZER::TAGGED-POINTER-OFFSET = 2468, 
// Unused CLEAVIR-IR::SIGNED-LESS-INSTRUCTION = 1900, 
// Unused CLEAVIR-AST::FIXNUM-SUB-AST = 1306, 
// Unused ACCLIMATION::SVENSKA = 978, 
// Unused CLASP-ANALYZER::LOCAL-VARIABLE = 2390, 
// Unused COMMON-LISP::STRUCTURE-OBJECT = 770, 
// Unused CLASP-ANALYZER::NAMESPACE = 2494, 
// Unused ECLECTOR.READTABLE.SIMPLE::READTABLE = 1152, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-NAMES-SPECIAL-OPERATOR = 1662, 
// Unused CLEAVIR-KILDALL::START-EVERYWHERE-MIXIN = 1836, 
// Unused CLEAVIR-AST::FLOAT-NOT-GREATER-AST = 1328, 
// Unused COMMON-LISP::METHOD-COMBINATION = 714, 
// Unused CLASP-ANALYZER::CONTAINERALLOC = 2374, 
// Unused CLEAVIR-CST-TO-AST::ODD-KEYWORD-PORTION-STYLE-WARNING = 1680, 
// Unused CLEAVIR-GENERATE-AST::VARIABLE-NAME-UNKNOWN = 1558, 
// Unused CLEAVIR-AST::FLOAT-SIN-AST = 1336, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-NAMES-LOCAL-MACRO = 1660, 
// Unused CLEAVIR-ENVIRONMENT::FUNCTION-IGNORE = 1488, 
// Unused ECLECTOR.READER::NUMERIC-PARAMETER-NOT-SUPPLIED-BUT-REQUIRED = 1194, 
// Unused CLASP-ANALYZER::INCOMPLETE-ARRAY-CTYPE = 2442, 
// Unused SICL-ADDITIONAL-CONDITIONS::WARN-BOTH-TEST-AND-TEST-NOT-GIVEN = 1938, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-LAMBDA-LIST = 1108, 
// Unused CLEAVIR-IR::SIGNED-ADD-INSTRUCTION = 1896, 
// Unused CLEAVIR-IR::OUTPUT-MUST-BE-GIVEN = 1870, 
// Unused ACCLIMATION::FRENCH = 986, 
// Unused CLASP-CLEAVIR-AST::VECTOR-LENGTH-AST = 2078, 
// Unused CLEAVIR-ENVIRONMENT::GLOBAL-MACRO-INFO = 1456, 
// Unused SICL-ADDITIONAL-CONDITIONS::SLOT-DOCUMENTATION-OPTION-MUST-BE-STRING = 2018, 
// Unused CLEAVIR-IR::UNBOX-INSTRUCTION = 1756, 
// Unused CLASP-CLEAVIR::FUNCTION-INFO = 2128, 
// Unused CONCRETE-SYNTAX-TREE::SPECIALIZED-REQUIRED-PARAMETER = 1084, 
// Unused CLEAVIR-AST::ASET-AST = 1358, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-MUST-BE-PROPER-FUNCTION-NAME = 1632, 
// Unused CLASP-ANALYZER::GCARRAY-OFFSET = 2480, 
// Unused COMMON-LISP::CONTROL-ERROR = 820, 
// Unused CLEAVIR-LIVENESS::LIVENESS-TRAVERSE = 1848, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-ALLOCATION-OPTIONS-NOT-PERMITTED = 2014, 
// Unused CLASP-ANALYZER::CXXRECORD-CTYPE = 2444, 
// Unused CLASP-ANALYZER::GCARRAY-MOVEABLE-CTYPE = 2456, 
// Unused SICL-ADDITIONAL-CONDITIONS::NUMERIC-CATCH-TAG = 2040, 
// Unused CLEAVIR-CST-TO-AST::NO-DEFAULT-METHOD = 1664, 
// Unused CLEAVIR-AST::UNREACHABLE-AST = 1298, 
// Unused CONCRETE-SYNTAX-TREE::ECL = 1014, 
// Unused CLEAVIR-GENERATE-AST::INVALID-EVAL-WHEN-SITUATION = 1532, 
// Unused COMMON-LISP::PRINT-NOT-READABLE = 868, 
// Unused CLASP-CLEAVIR::ABI-X86-64 = 2052, 
// Unused CLOS::SPECIALIZER = 716, 
// Unused CLEAVIR-IR::RPLACA-INSTRUCTION = 1794, 
// Unused CLEAVIR-GENERATE-AST::VARIABLE-MUST-BE-A-SYMBOL = 1546, 
// Unused SICL-ADDITIONAL-CONDITIONS::LOAD-TIME-VALUE-READ-ONLY-P-NOT-EVALUATED = 2044, 
// Unused ECLECTOR.READER::SUB-CHAR-MUST-NOT-BE-A-DECIMAL-DIGIT = 1174, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-MIXIN = 1070, 
// Unused COMMON-LISP::SIMPLE-TYPE-ERROR = 810, 
// Unused CLEAVIR-GENERATE-AST::ARGUMENT-MISMATCH = 1512, 
// Unused CLEAVIR-IO::FILE-DOES-NOT-EXIST = 1228, 
// Unused SB-BSD-SOCKETS::OPERATION-TIMEOUT-ERROR = 940, 
// Unused SB-BSD-SOCKETS::OPERATION-NOT-PERMITTED-ERROR = 952, 
// Unused CLANG-TOOL::NO-NODE-FOR-TAG-ERROR = 2194, 
// Unused CLOS::STANDARD-WRITER-METHOD = 768, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-OPTIONAL = 1090, 
// Unused CLEAVIR-HIR-TRANSFORMATIONS::INTERIOR-NODE = 1864, 
// Unused CLEAVIR-IR::ONE-SUCCESSOR-MIXIN = 1688, 
// Unused CLEAVIR-GENERATE-AST::SITUATIONS-MUST-BE-PROPER-LIST = 1530, 
// Unused CLEAVIR-GENERATE-AST::READ-ONLY-P-MUST-BE-BOOLEAN = 1548, 
// Unused COMMON-LISP::STREAM-ERROR = 824, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-END-INDEX = 1948, 
// Unused CLASP-CLEAVIR::CLASP = 2046, 
// Unused SB-BSD-SOCKETS::CONNECTION-REFUSED-ERROR = 938, 
// Unused CONCRETE-SYNTAX-TREE::DEFTYPE-LAMBDA-LIST = 1122, 
// Unused CLASP-CLEAVIR-HIR::NAMED-ENTER-INSTRUCTION = 2118, 
// Unused CORE::CASE-FAILURE = 812, 
// Unused CLEAVIR-IR::BOX-INSTRUCTION = 1754, 
// Unused CORE::SECTION-START = 906, 
// Unused CLEAVIR-CODE-UTILITIES::BOTH-REST-AND-BODY-OCCUR-IN-LAMBDA-LIST = 1388, 
// Unused CONCRETE-SYNTAX-TREE::GRAMMAR = 1132, 
// Unused CLEAVIR-GENERATE-AST::COMPILATION-STYLE-WARNING = 1510, 
// Unused CLEAVIR-IR::CHARACTERP-INSTRUCTION = 1742, 
// Unused SICL-ADDITIONAL-CONDITIONS::DEFAULT-INITARGS-OPTION-ONCE = 2030, 
// Unused SICL-ADDITIONAL-CONDITIONS::LIST-AS-SEQUENCE-MUST-BE-PROPER = 1940, 
// Unused CLEAVIR-IR::SUCCESSOR1-MUST-BE-GIVEN = 1878, 
// Unused CORE::SIMPLE-READER-ERROR = 876, 
// Unused ECLECTOR.READER::TWO-PACKAGE-MARKERS-MUST-BE-ADJACENT = 1184, 
// Unused COMMON-LISP::FILE-ERROR = 830, 
// Unused CLEAVIR-ENVIRONMENT::LEXICAL-VARIABLE = 1468, 
// Unused CLEAVIR-CST-TO-AST::VALUES-&REST-SYNTAX = 1612, 
// Unused CLEAVIR-CODE-UTILITIES::ATOMIC-LAMBDA-LIST-TAIL-MUST-BE-VARIABLE = 1392, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-KEY-PARAMETER = 1078, 
// Unused CONCRETE-SYNTAX-TREE::CLASP = 1012, 
// Unused CLASP-ANALYZER::OFFSET = 2462, 
// Unused CLEAVIR-AST::IF-AST = 1288, 
// Unused CORE::SIMPLE-PROGRAM-ERROR = 816, 
// Unused CLEAVIR-ENVIRONMENT::VARIABLE-DYNAMIC-EXTENT = 1490, 
// Unused SICL-ADDITIONAL-CONDITIONS::ODD-NUMBER-OF-KEYWORD-ARGUMENTS = 1996, 
// Unused CLASP-CLEAVIR-HIR::FOREIGN-CALL-POINTER-INSTRUCTION = 2102, 
// Unused COMMON-LISP::END-OF-FILE = 828, 
// Unused CLANG-TOOL::SINGLE-TOOL = 2198, 
// Unused CLEAVIR-CST-TO-AST::BODY = 1588, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-KEY = 1096, 
// Unused CLEAVIR-IR::EQ-INSTRUCTION = 1736, 
// Unused CORE::BLOCK-START = 912, 
// Unused CLEAVIR-ENVIRONMENT::TAG = 1480, 
// Unused SB-BSD-SOCKETS::OPERATION-NOT-SUPPORTED-ERROR = 950, 
// Unused CLEAVIR-IR::CDR-INSTRUCTION = 1792, 
// Unused CLASP-ANALYZER::SMART-PTR-OFFSET = 2466, 
// Unused CLEAVIR-IR::TYPEQ-INSTRUCTION = 1726, 
// Unused CLEAVIR-ENVIRONMENT::LEXICAL-VARIABLE-INFO = 1442, 
// Unused CLASP-CLEAVIR::CLASP-64BIT = 2048, 
// Unused SICL-ADDITIONAL-CONDITIONS::LISTS-MUST-HAVE-THE-SAME-LENGTH = 1936, 
// Unused CLEAVIR-IR::VALUES-LOCATION = 1700, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-PROGRAM-ERROR = 1950, 
// Unused CLOS::STANDARD-SLOT-DEFINITION = 708, 
// Unused CLEAVIR-IR::EQUAL-INSTRUCTION = 1912, 
// Unused SICL-ADDITIONAL-CONDITIONS::AT-LEAST-ONE-ARGUMENT-REQUIRED = 1934, 
// Unused SICL-ADDITIONAL-CONDITIONS::CLASS-OPTION-MUST-BE-NON-EMPTY-LIST = 2020, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DEFGENERIC-KEY = 1412, 
// Unused CLASP-ANALYZER::SMART-PTR-CTYPE = 2434, 
// Unused CONCRETE-SYNTAX-TREE::EARLEY-STATE = 1136, 
// Unused CLEAVIR-AST::FLOAT-NOT-LESS-AST = 1332, 
// Unused CLASP-CLEAVIR-AST::BASE-FOREIGN-CALL-AST = 2070, 
// Unused CLEAVIR-AST::SLOT-WRITE-AST = 1354, 
// Unused CC-MIR::CHARACTERP-INSTRUCTION = 2134, 
// Unused CLEAVIR-IR::FLOAT-DIV-INSTRUCTION = 1774, 
// Unused CLEAVIR-CST-TO-AST::NOT-ENOUGH-ARGUMENTS-STYLE-WARNING = 1676, 
// Unused CLASP-ANALYZER::TAGGED-POINTER-CTYPE = 2436, 
// Unused CLEAVIR-GENERATE-AST::SETQ-CONSTANT-VARIABLE = 1556, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-ORDINARY-OPTIONAL = 1404, 
// Unused CLEAVIR-IR::TAILCALL-INSTRUCTION = 1720, 
// Unused CLEAVIR-IR::FIXNUM-EQUAL-INSTRUCTION = 1766, 
// Unused CLEAVIR-COMPILATION-POLICY::NO-POLICY-COMPUTER = 1504, 
// Unused SB-BSD-SOCKETS::BAD-FILE-DESCRIPTOR-ERROR = 936, 
// Unused CLEAVIR-ENVIRONMENT::MACRO = 1476, 
// Unused CLEAVIR-CODE-UTILITIES::INVALID-NUMBER-OF-ARGUMENTS = 1366, 
// Unused CLASP-ANALYZER::HNODE = 2398, 
// Unused CLASP-ANALYZER::STAMP-VALUE-GENERATOR = 2394, 
// Unused CLEAVIR-ENVIRONMENT::OPTIMIZE-INFO = 1464, 
// Unused COMMON-LISP::LIST = 730, 
// Unused CLEAVIR-CST-TO-AST::COMPILATION-STYLE-WARNING = 1594, 
// Unused CLEAVIR-ESCAPE::ESCAPE = 1858, 
// Unused CLEAVIR-KILDALL::BITSET-POOL-MIXIN = 1842, 
// Unused CLASP-CLEAVIR::CLASP-ORDINARY-REST-PARAMETER-GROUP = 2060, 
// Unused CLEAVIR-HIR-TRANSFORMATIONS::FUNCTION-DAG = 1862, 
// Unused CLASP-ANALYZER::LVALUE-REFERENCE-CTYPE = 2410, 
// Unused CLASP-ANALYZER::TEMPLATED-STAMP = 2382, 
// Unused CORE::DO-NOT-FUNCALL-SPECIAL-OPERATOR = 858, 
// Unused CLEAVIR-AST::FIXNUM-GREATER-AST = 1312, 
// Unused CLASP-ANALYZER::INJECTED-CLASS-NAME-CTYPE = 2448, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-ARGUMENT-MUST-BE-FUNCTION-NAME-OR-LAMBDA-EXPRESSION = 1630, 
// Unused CLASP-ANALYZER::ABSTRACTALLOC = 2366, 
// Unused CLEAVIR-AST::GO-AST = 1280, 
// Unused ECLECTOR.READER::UNKNOWN-MACRO-SUB-CHARACTER = 1190, 
// Unused CLEAVIR-CST-TO-AST::BINDING-MUST-BE-SYMBOL-OR-LIST = 1638, 
// Unused CORE::SIMPLE-STYLE-WARNING = 792, 
// Unused SICL-ADDITIONAL-CONDITIONS::DOCUMENTATION-OPTION-ONCE = 2032, 
// Unused ECLECTOR.READER::BACKQUOTE-CONDITION = 1156, 
// Unused CORE::SIMPLE-CONTROL-ERROR = 822, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-ENVIRONMENT = 1102, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-READER-ERROR = 1142, 
// Unused CLEAVIR-AST::BOOLEAN-AST-MIXIN = 1240, 
// Unused SICL-ADDITIONAL-CONDITIONS::MALFORMED-METACLASS-OPTION = 2026, 
// Unused CONCRETE-SYNTAX-TREE::SINGLETON-PARAMETER-GROUP = 1052, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DESTRUCTURING-KEY = 1414, 
// Unused SB-BSD-SOCKETS::NETDB-INTERNAL-ERROR = 962, 
// Unused SICL-ADDITIONAL-CONDITIONS::SEQUENCE-ERROR-MIXIN = 1942, 
// Unused CLEAVIR-CODE-UTILITIES::LAMBDA-LIST-MUST-BE-PROPER-LIST = 1378, 
// Unused CLEAVIR-AST::SIDE-EFFECT-FREE-AST-MIXIN = 1246, 
// Unused CLEAVIR-CODE-UTILITIES::INCORRECT-KEYWORD-ORDER = 1386, 
// Unused SICL-ADDITIONAL-CONDITIONS::METACLASS-OPTION-ONCE = 2034, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-ERROR = 1920, 
// Unused CLEAVIR-ENVIRONMENT::SYMBOL-MACRO = 1472, 
// Unused COMMON-LISP::SEQUENCE = 728, 
// Unused CLEAVIR-IR::SUCCESSOR-SUCCESSORS-MUTUALLY-EXCLUSIVE = 1874, 
// Unused CLEAVIR-GENERATE-AST::VALUES-&REST-SYNTAX = 1524, 
// Unused CLEAVIR-ENVIRONMENT::ENTRY = 1466, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-KEYWORD-ARGUMENT = 1994, 
// Unused CONCRETE-SYNTAX-TREE::SICL = 1010, 
// Unused ACCLIMATION::ENGLISH = 984, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-TYPE-OPTIONS-NOT-PERMITTED = 2016, 
// Unused CONCRETE-SYNTAX-TREE::ENVIRONMENT-PARAMETER-GROUP = 1060, 
// Unused CLASP-ANALYZER::GCBITUNITARRAY-OFFSET = 2482, 
// Unused CONCRETE-SYNTAX-TREE::SPECIALIZED-REQUIRED-PARAMETER-GROUP = 1048, 
// Unused CORE::STD-CLASS = 724, 
// Unused CLASP-ANALYZER::ANALYSIS = 2396, 
// Unused CONCRETE-SYNTAX-TREE::AUX-PARAMETER = 1080, 
// Unused CLEAVIR-GENERATE-AST::BLOCK-NAME-UNKNOWN = 1550, 
// Unused CLEAVIR-GENERATE-AST::BLOCK-NAME-MUST-BE-A-SYMBOL = 1528, 
// Unused CLOS::STANDARD-READER-METHOD = 766, 
// Unused CLEAVIR-IR::ADD-ACTIVATION-RECORD-INSTRUCTION = 1822, 
// Unused CLEAVIR-AST::FIXNUM-NOT-LESS-AST = 1314, 
// Unused EXT::SOURCE-LOCATION = 774, 
// Unused CONCRETE-SYNTAX-TREE::GENERIC-FUNCTION-KEY-PARAMETER-GROUP = 1042, 
// Unused COMMON-LISP::BIT-VECTOR = 740, 
// Unused CLASP-ANALYZER::COPYABLE-OFFSET = 2464, 
// Unused ECLECTOR.READER::UNKNOWN-CHARACTER-NAME = 1202, 
// Unused CLEAVIR-CST-TO-AST::BLOCK-NAME-UNKNOWN = 1646, 
// Unused CLEAVIR-IR::ASET-INSTRUCTION = 1804, 
// Unused CLASP-ANALYZER::UNINTERESTING-CTYPE = 2424, 
// Unused CLEAVIR-CST-TO-AST::ODD-KEYWORD-PORTION-WARNING = 1678, 
// Unused CLASP-CLEAVIR-AST::PRECALC-VALUE-REFERENCE-AST = 2092, 
// Unused ECLECTOR.READER::DIGIT-EXPECTED = 1204, 
// Unused SICL-ADDITIONAL-CONDITIONS::BLOCK-TAG-MUST-BE-SYMBOL = 1960, 
// Unused SICL-ADDITIONAL-CONDITIONS::ARGUMENT-MISMATCH = 1986, 
// Unused CLEAVIR-IR::MEMSET2-INSTRUCTION = 1894, 
// Unused CLEAVIR-GENERATE-AST::IGNORED-VARIABLE-REFERENCED = 1526, 
// Unused CLASP-ANALYZER::DEBUG-INFO = 2354, 
// Unused SICL-ADDITIONAL-CONDITIONS::SETQ-MUST-HAVE-EVEN-NUMBER-ARGUMENTS = 1980, 
// Unused CLEAVIR-AST::NO-VALUE-AST-MIXIN = 1242, 
// Unused ECLECTOR.READER::CONSING-DOT-MOST-BE-FOLLOWED-BY-OBJECT = 1168, 
// Unused SICL-ADDITIONAL-CONDITIONS::MULTIPLE-DOCUMENTATION-STRINGS-IN-BODY = 1964, 
// Unused CLASP-ANALYZER::GCBITUNITARRAY-MOVEABLE-CTYPE = 2458, 
// Unused CLEAVIR-GENERATE-AST::SETQ-MUST-HAVE-EVEN-NUMBER-OF-ARGUMENTS = 1552, 
// Unused CLEAVIR-AST::MULTIPLE-VALUE-PROG1-AST = 1294, 
// Unused CLEAVIR-CST-TO-AST::MALFORMED-LAMBDA-LIST = 1668, 
// Unused CLOS::EQL-SPECIALIZER = 718, 
// Unused CLEAVIR-IR::NOP-INSTRUCTION = 1710, 
// Unused CLASP-ANALYZER::GCSTRING-MOVEABLE-CTYPE = 2460, 
// Unused CLEAVIR-IR::FIXNUM-NOT-GREATER-INSTRUCTION = 1764, 
// Unused CLEAVIR-GENERATE-AST::TOO-MANY-ARGUMENTS = 1518, 
// Unused ECLECTOR.READER::UNDEFINED-USE-OF-BACKQUOTE = 1164, 
// Unused CLEAVIR-GENERATE-AST::FUNCTION-NAME-NAMES-SPECIAL-OPERATOR = 1566, 
// Unused CORE::ARGUMENT-NUMBER-ERROR = 818, 
// Unused CLASP-ANALYZER::DESTINATION = 2492, 
// Unused CLEAVIR-METER::SIZE-METER = 1236, 
// Unused CONCRETE-SYNTAX-TREE::KEYWORD-WHOLE = 1104, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-UNDEFINED-FUNCTION = 1928, 
// Unused CLASP-ANALYZER::CONTAINER = 2452, 
// Unused CLEAVIR-IR::MEMREF1-INSTRUCTION = 1888, 
// Unused CLEAVIR-ENVIRONMENT::OPTIMIZE = 1494, 
// Unused CLEAVIR-AST::SCOPE-AST = 1360, 
// Unused CLANG-TOOL::CODE-MATCH-CALLBACK = 2190, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-PROGRAM-ERROR = 1146, 
// Unused CONCRETE-SYNTAX-TREE::ATOM-CST = 998, 
// Unused CLEAVIR-IR::CONSTANT-INPUT = 1696, 
// Unused GRAY::FUNDAMENTAL-CHARACTER-STREAM = 888, 
// Unused CONCRETE-SYNTAX-TREE::OPTIONAL-PARAMETER-GROUP = 1034, 
// Unused CONCRETE-SYNTAX-TREE::DESTRUCTURING-REST-PARAMETER-GROUP = 1058, 
// Unused CLEAVIR-IR::UNWIND-INSTRUCTION = 1734, 
// Unused COMMON-LISP::STRING = 736, 
// Unused CLEAVIR-AST::FLOAT-LESS-AST = 1326, 
// Unused CLEAVIR-IR::CONSP-INSTRUCTION = 1738, 
// Unused CONCRETE-SYNTAX-TREE::SBCL = 1008, 
// Unused CLEAVIR-KILDALL::START-ENTER-MIXIN = 1838, 
// Unused CLEAVIR-CODE-UTILITIES::ENVIRONMENT-MUST-BE-FOLLOWED-BY-VARIABLE = 1398, 
// Unused EXT::SEQUENCE-STREAM = 742, 
// Unused CLEAVIR-IR::FLOAT-LESS-INSTRUCTION = 1776, 
// Unused CLEAVIR-ENVIRONMENT::NO-VARIABLE-INFO = 1434, 
// Unused SB-BSD-SOCKETS::NETDB-SUCCESS-ERROR = 964, 
// Unused CORE::SIMPLE-PACKAGE-ERROR = 836, 
// Unused CLASP-ANALYZER::LISPALLOC = 2368, 
// Unused CLASP-CLEAVIR::ARRAYED-LITERAL = 2148, 
// Unused CLANG-TOOL::NODE-MATCHER-AMBIGUOUS-ERROR = 2202, 
// Unused CLEAVIR-AST::FLOAT-MUL-AST = 1322, 
// Unused CLEAVIR-IR::INPUT-INPUTS-MUTUALLY-EXCLUSIVE = 1868, 
// Unused CLEAVIR-CST-TO-AST::TOO-MANY-ARGUMENTS-STYLE-WARNING = 1672, 
// Unused CLEAVIR-CST-TO-AST::TOO-MANY-ARGUMENTS = 1602, 
// Unused CLOS::FUNCALLABLE-STANDARD-OBJECT = 754, 
// Unused COMMON-LISP::ARITHMETIC-ERROR = 846, 
// Unused CLASP-ANALYZER::SPECIES = 2488, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-PROGRAM-WARNING = 1954, 
// Unused ACCLIMATION::DEUTSCH = 980, 
// Unused CLEAVIR-ENVIRONMENT::LOCAL-FUNCTION-INFO = 1450, 
// Unused CLEAVIR-CST-TO-AST::SETQ-VAR-MUST-BE-SYMBOL = 1650, 
// Unused COMMON-LISP::BASE-STRING = 738, 
// Unused CLASP-ANALYZER::POINTER-TO-RECORD-CTYPE = 2450, 
// Unused CLASP-CLEAVIR-HIR::MULTIPLE-VALUE-FOREIGN-CALL-INSTRUCTION = 2098, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DESTRUCTURING-OPTIONAL = 1408, 
// Unused CORE::QUEUED-OP = 904, 
// Unused CLEAVIR-CODE-UTILITIES::TOO-FEW-ARGUMENTS = 1368, 
// Unused CLEAVIR-AST::TOP-LEVEL-FUNCTION-AST = 1264, 
// Unused CLEAVIR-CST-TO-AST::LOCAL-FUNCTION-DEFINITION-MUST-BE-PROPER-LIST = 1626, 
// Unused CLEAVIR-AST::CDR-AST = 1346, 
// Unused ECLECTOR.READER::COMMA-NOT-INSIDE-BACKQUOTE = 1160, 
// Unused ALEXANDRIA.0.DEV::SIMPLE-STYLE-WARNING = 1140, 
// Unused CORE::BLOCK-END = 914, 
// Unused ECLECTOR.READER::SHARPSIGN-SHARPSIGN-UNDEFINED-LABEL = 1222, 
// Unused CONCRETE-SYNTAX-TREE::SPECIALIZED-LAMBDA-LIST = 1112, 
// Unused SICL-ADDITIONAL-CONDITIONS::INVALID-BOUDING-INDEXES = 1944, 
// Unused EXT::INTERACTIVE-INTERRUPT = 880, 
// Unused ECLECTOR.READER::NO-ELEMENTS-FOUND = 1212, 
// Unused CONCRETE-SYNTAX-TREE::LAMBDA-LIST-KEYWORD = 1088, 
// Unused CONCRETE-SYNTAX-TREE::DEFINE-METHOD-COMBINATION-LAMBDA-LIST = 1126, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-WARNING = 1916, 
// Unused CLEAVIR-CST-TO-AST::BINDING-MUST-HAVE-LENGTH-ONE-OR-TWO = 1640, 
// Unused CLEAVIR-AST::CONSTANT-AST = 1250, 
// Unused CLEAVIR-CST-TO-AST::FLET-FUNCTIONS-MUST-BE-PROPER-LIST = 1624, 
// Unused CLEAVIR-AST::FLOAT-SQRT-AST = 1340, 
// Unused EXT::ILLEGAL-INSTRUCTION = 804, 
// Unused CLEAVIR-GENERATE-AST::ODD-KEYWORD-PORTION = 1522, 
// Unused CONCRETE-SYNTAX-TREE::GRAMMAR-SYMBOL = 1018, 
// Unused CLASP-CLEAVIR-AST::FOREIGN-CALL-AST = 2074, 
// Unused CLEAVIR-IR::UNSIGNED-LESS-INSTRUCTION = 1908, 
// Unused CLASP-CLEAVIR::ABI-X86-32 = 2054, 
// Unused COMMON-LISP::GENERIC-FUNCTION = 756, 
// Unused CONCRETE-SYNTAX-TREE::ORDINARY-REST-PARAMETER-GROUP = 1056, 
// Unused CLEAVIR-GENERATE-AST::TOO-MANY-ARGUMENTS-STYLE-WARNING = 1574, 
// Unused CONCRETE-SYNTAX-TREE::REST-PARAMETER-GROUP = 1054, 
// Unused CLEAVIR-IR::NO-SUCCESSORS-MIXIN = 1686, 
// Unused CLEAVIR-AST::TYPEQ-AST = 1284, 
// Unused CLEAVIR-ENVIRONMENT::SPECIAL-VARIABLE = 1470, 
// Unused CLEAVIR-AST::VALUES-AST = 1292, 
// Unused SICL-ADDITIONAL-CONDITIONS::SICL-STYLE-WARNING = 1918, 
// Unused CLEAVIR-IR::CREATE-CELL-INSTRUCTION = 1814, 
// Unused GRAY::FUNDAMENTAL-BINARY-INPUT-STREAM = 896, 
// Unused CLEAVIR-CODE-UTILITIES::MALFORMED-DESTRUCTURING-TREE = 1418, 
// Unused CLEAVIR-CST-TO-AST::FUNCTION-NAME-NAMES-GLOBAL-MACRO = 1658, 
// Unused CLASP-CLEAVIR-HIR::PRECALC-VALUE-INSTRUCTION = 2120, 
// Unused CLASP-ANALYZER::UNCLASSIFIED-CTYPE = 2422, 
// Unused CLEAVIR-IO::MODEL-CONDITION = 1226, 
// Unused CLASP-CLEAVIR-AST::DISPLACED-INDEX-OFFSET-AST = 2082, 
// Unused CLEAVIR-IR::TOP-LEVEL-ENTER-INSTRUCTION = 1708, 
// Unused CLEAVIR-CST-TO-AST::LAMBDA-CALL-FIRST-SYMBOL-NOT-LAMBDA = 1666, 
// Unused ECLECTOR.READER::INVALID-CONTEXT-FOR-CONSING-DOT = 1166, 
  STAMP_max = 430,

#endif // defined(GC_STAMP)
#if defined(GC_DYNAMIC_CAST)
// STAMP_llvmo__NamedMDNode_O
template <typename FP> struct Cast<llvmo::NamedMDNode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::NamedMDNode_O val -> 115
      return (kindVal == 115);
  };
};
// STAMP_core__MDArray_size_t_O
template <typename FP> struct Cast<core::MDArray_size_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_size_t_O val -> 277
      return (kindVal == 277);
  };
};
// STAMP_core__SimpleVector_byte16_t_O
template <typename FP> struct Cast<core::SimpleVector_byte16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_byte16_t_O val -> 235
      return (kindVal == 235);
  };
};
// STAMP_mp__ConcurrentQueue_O
template <typename FP> struct Cast<mp::ConcurrentQueue_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range mp::ConcurrentQueue_O val -> 382
      return (kindVal == 382);
  };
};
// STAMP_gctools__GCVector_moveable_float_
template <typename FP> struct Cast<gctools::GCVector_moveable<float>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<float> val -> 424
      return (kindVal == 424);
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_short_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned short>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned short> val -> 423
      return (kindVal == 423);
  };
};
// STAMP_core__SimpleMDArray_fixnum_O
template <typename FP> struct Cast<core::SimpleMDArray_fixnum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_fixnum_O val -> 293
      return (kindVal == 293);
  };
};
// STAMP_core__SimpleVector_byte64_t_O
template <typename FP> struct Cast<core::SimpleVector_byte64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_byte64_t_O val -> 224
      return (kindVal == 224);
  };
};
// STAMP_llvmo__TargetMachine_O
template <typename FP> struct Cast<llvmo::TargetMachine_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::TargetMachine_O low high --> 113 114 
      return ((113 <= kindVal) && (kindVal <= 114));
  };
};
// STAMP_llvmo__Value_O
template <typename FP> struct Cast<llvmo::Value_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Value_O low high --> 75 112 
      return ((75 <= kindVal) && (kindVal <= 112));
  };
};
// STAMP_core__SimpleBaseString_O
template <typename FP> struct Cast<core::SimpleBaseString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleBaseString_O val -> 231
      return (kindVal == 231);
  };
};
// STAMP_clbind__ClassRegistry_O
template <typename FP> struct Cast<clbind::ClassRegistry_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clbind::ClassRegistry_O val -> 381
      return (kindVal == 381);
  };
};
// STAMP_core__Integer_O
template <typename FP> struct Cast<core::Integer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Integer_O low high --> 339 341 
      return ((339 <= kindVal) && (kindVal <= 341));
  };
};
// STAMP_core__SimpleMDArray_int32_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_int32_t_O val -> 301
      return (kindVal == 301);
  };
};
// STAMP_llvmo__Metadata_O
template <typename FP> struct Cast<llvmo::Metadata_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Metadata_O low high --> 58 74 
      return ((58 <= kindVal) && (kindVal <= 74));
  };
};
// STAMP_asttooling__AstVisitor_O
template <typename FP> struct Cast<asttooling::AstVisitor_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range asttooling::AstVisitor_O val -> 387
      return (kindVal == 387);
  };
};
// STAMP_mp__Process_O
template <typename FP> struct Cast<mp::Process_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range mp::Process_O val -> 213
      return (kindVal == 213);
  };
};
// STAMP_core__Record_O
template <typename FP> struct Cast<core::Record_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Record_O val -> 380
      return (kindVal == 380);
  };
};
// STAMP_core__MDArray_O
template <typename FP> struct Cast<core::MDArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_O low high --> 253 322 
      return ((253 <= kindVal) && (kindVal <= 322));
  };
};
// STAMP_gctools__GCVector_moveable_core__OptionalArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::OptionalArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::OptionalArgument> val -> 422
      return (kindVal == 422);
  };
};
// STAMP_core__LightUserData_O
template <typename FP> struct Cast<core::LightUserData_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LightUserData_O low high --> 378 379 
      return ((378 <= kindVal) && (kindVal <= 379));
  };
};
// STAMP_gctools__GCVector_moveable_core__T_O___
template <typename FP> struct Cast<gctools::GCVector_moveable<core::T_O *>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::T_O *> val -> 421
      return (kindVal == 421);
  };
};
// STAMP_clcenv__FunctionIgnore_O
template <typename FP> struct Cast<clcenv::FunctionIgnore_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::FunctionIgnore_O val -> 212
      return (kindVal == 212);
  };
};
// STAMP_core__MDArrayT_O
template <typename FP> struct Cast<core::MDArrayT_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArrayT_O val -> 275
      return (kindVal == 275);
  };
};
// STAMP_clbind__ClassRep_O
template <typename FP> struct Cast<clbind::ClassRep_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clbind::ClassRep_O val -> 12
      return (kindVal == 12);
  };
};
// STAMP_core__DirectoryEntry_O
template <typename FP> struct Cast<core::DirectoryEntry_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::DirectoryEntry_O val -> 377
      return (kindVal == 377);
  };
};
// STAMP_clcenv__GlobalFunctionInfo_O
template <typename FP> struct Cast<clcenv::GlobalFunctionInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::GlobalFunctionInfo_O val -> 181
      return (kindVal == 181);
  };
};
// STAMP_llvmo__ConstantInt_O
template <typename FP> struct Cast<llvmo::ConstantInt_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantInt_O val -> 110
      return (kindVal == 110);
  };
};
// STAMP_llvmo__Linker_O
template <typename FP> struct Cast<llvmo::Linker_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Linker_O val -> 57
      return (kindVal == 57);
  };
};
// STAMP_core__SourceFileInfo_O
template <typename FP> struct Cast<core::SourceFileInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SourceFileInfo_O val -> 376
      return (kindVal == 376);
  };
};
// STAMP_core__IntArray_O
template <typename FP> struct Cast<core::IntArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::IntArray_O val -> 375
      return (kindVal == 375);
  };
};
// STAMP_gctools__GCArray_moveable_double_
template <typename FP> struct Cast<gctools::GCArray_moveable<double>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<double> val -> 420
      return (kindVal == 420);
  };
};
// STAMP_core__SimpleMDArray_int16_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_int16_t_O val -> 310
      return (kindVal == 310);
  };
};
// STAMP_llvmo__CompositeType_O
template <typename FP> struct Cast<llvmo::CompositeType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::CompositeType_O low high --> 42 47 
      return ((42 <= kindVal) && (kindVal <= 47));
  };
};
// STAMP_core__SimpleMDArrayT_O
template <typename FP> struct Cast<core::SimpleMDArrayT_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArrayT_O val -> 299
      return (kindVal == 299);
  };
};
// STAMP_llvmo__BranchInst_O
template <typename FP> struct Cast<llvmo::BranchInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::BranchInst_O val -> 91
      return (kindVal == 91);
  };
};
// STAMP_core__SourcePosInfo_O
template <typename FP> struct Cast<core::SourcePosInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SourcePosInfo_O val -> 374
      return (kindVal == 374);
  };
};
// STAMP_clcenv__Entry_O
template <typename FP> struct Cast<clcenv::Entry_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Entry_O low high --> 194 212 
      return ((194 <= kindVal) && (kindVal <= 212));
  };
};
// STAMP_core__ActivationFrame_O
template <typename FP> struct Cast<core::ActivationFrame_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ActivationFrame_O low high --> 134 136 
      return ((134 <= kindVal) && (kindVal <= 136));
  };
};
// STAMP_llvmo__AllocaInst_O
template <typename FP> struct Cast<llvmo::AllocaInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::AllocaInst_O val -> 81
      return (kindVal == 81);
  };
};
// STAMP_llvmo__PassManagerBase_O
template <typename FP> struct Cast<llvmo::PassManagerBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::PassManagerBase_O low high --> 54 56 
      return ((54 <= kindVal) && (kindVal <= 56));
  };
};
// STAMP_llvmo__LoadInst_O
template <typename FP> struct Cast<llvmo::LoadInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::LoadInst_O val -> 80
      return (kindVal == 80);
  };
};
// STAMP_core__StandardClassCreator_O
template <typename FP> struct Cast<core::StandardClassCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::StandardClassCreator_O val -> 156
      return (kindVal == 156);
  };
};
// STAMP_core__Exposer_O
template <typename FP> struct Cast<core::Exposer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Exposer_O low high --> 371 373 
      return ((371 <= kindVal) && (kindVal <= 373));
  };
};
// STAMP_llvmo__ConstantStruct_O
template <typename FP> struct Cast<llvmo::ConstantStruct_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantStruct_O val -> 109
      return (kindVal == 109);
  };
};
// STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O
template <typename FP> struct Cast<core::SingleDispatchCxxEffectiveMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SingleDispatchCxxEffectiveMethodFunction_O val -> 147
      return (kindVal == 147);
  };
};
// STAMP_core__DirectoryIterator_O
template <typename FP> struct Cast<core::DirectoryIterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::DirectoryIterator_O val -> 217
      return (kindVal == 217);
  };
};
// STAMP_clcenv__Macro_O
template <typename FP> struct Cast<clcenv::Macro_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Macro_O val -> 211
      return (kindVal == 211);
  };
};
// STAMP_clbind__detail__class_map
template <typename FP> struct Cast<clbind::detail::class_map*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clbind::detail::class_map val -> 430
      return (kindVal == 430);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>> val -> 419
      return (kindVal == 419);
  };
};
// STAMP_llvmo__DISubroutineType_O
template <typename FP> struct Cast<llvmo::DISubroutineType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DISubroutineType_O val -> 74
      return (kindVal == 74);
  };
};
// STAMP_core__LexicalEnvironment_O
template <typename FP> struct Cast<core::LexicalEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LexicalEnvironment_O low high --> 122 133 
      return ((122 <= kindVal) && (kindVal <= 133));
  };
};
// STAMP_core__HashTable_O
template <typename FP> struct Cast<core::HashTable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::HashTable_O low high --> 366 370 
      return ((366 <= kindVal) && (kindVal <= 370));
  };
};
// STAMP_clcenv__LambdaNameInfo_O
template <typename FP> struct Cast<clcenv::LambdaNameInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::LambdaNameInfo_O val -> 180
      return (kindVal == 180);
  };
};
// STAMP_core__PosixTime_O
template <typename FP> struct Cast<core::PosixTime_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::PosixTime_O val -> 365
      return (kindVal == 365);
  };
};
// STAMP_gctools__GCArray_moveable_float_
template <typename FP> struct Cast<gctools::GCArray_moveable<float>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<float> val -> 418
      return (kindVal == 418);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>> val -> 417
      return (kindVal == 417);
  };
};
// STAMP_core__SimpleBitVector_O
template <typename FP> struct Cast<core::SimpleBitVector_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleBitVector_O val -> 246
      return (kindVal == 246);
  };
};
// STAMP_clcenv__SpecialVariable_O
template <typename FP> struct Cast<clcenv::SpecialVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::SpecialVariable_O val -> 210
      return (kindVal == 210);
  };
};
// STAMP_core__FunctionContainerEnvironment_O
template <typename FP> struct Cast<core::FunctionContainerEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::FunctionContainerEnvironment_O val -> 133
      return (kindVal == 133);
  };
};
// STAMP_core__SimpleVector_int8_t_O
template <typename FP> struct Cast<core::SimpleVector_int8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_int8_t_O val -> 239
      return (kindVal == 239);
  };
};
// STAMP_clcenv__VariableInfo_O
template <typename FP> struct Cast<clcenv::VariableInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::VariableInfo_O low high --> 182 186 
      return ((182 <= kindVal) && (kindVal <= 186));
  };
};
// STAMP_llvmo__ResumeInst_O
template <typename FP> struct Cast<llvmo::ResumeInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ResumeInst_O val -> 90
      return (kindVal == 90);
  };
};
// STAMP_llvmo__Function_O
template <typename FP> struct Cast<llvmo::Function_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Function_O val -> 100
      return (kindVal == 100);
  };
};
// STAMP_llvmo__DIType_O
template <typename FP> struct Cast<llvmo::DIType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DIType_O low high --> 70 74 
      return ((70 <= kindVal) && (kindVal <= 74));
  };
};
// STAMP_core__InvocationHistoryFrameIterator_O
template <typename FP> struct Cast<core::InvocationHistoryFrameIterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::InvocationHistoryFrameIterator_O val -> 364
      return (kindVal == 364);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>> val -> 416
      return (kindVal == 416);
  };
};
// STAMP_core__SimpleVector_size_t_O
template <typename FP> struct Cast<core::SimpleVector_size_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_size_t_O val -> 250
      return (kindVal == 250);
  };
};
// STAMP_core__SimpleMDArrayFloat_O
template <typename FP> struct Cast<core::SimpleMDArrayFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArrayFloat_O val -> 318
      return (kindVal == 318);
  };
};
// STAMP_llvmo__DIScope_O
template <typename FP> struct Cast<llvmo::DIScope_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DIScope_O low high --> 63 74 
      return ((63 <= kindVal) && (kindVal <= 74));
  };
};
// STAMP_core__FileStatus_O
template <typename FP> struct Cast<core::FileStatus_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::FileStatus_O val -> 363
      return (kindVal == 363);
  };
};
// STAMP_gctools__GCVector_moveable_core__SymbolClassPair_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::SymbolClassPair>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::SymbolClassPair> val -> 415
      return (kindVal == 415);
  };
};
// STAMP_llvmo__IndirectBrInst_O
template <typename FP> struct Cast<llvmo::IndirectBrInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::IndirectBrInst_O val -> 89
      return (kindVal == 89);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>> val -> 414
      return (kindVal == 414);
  };
};
// STAMP_clcenv__LexicalVariable_O
template <typename FP> struct Cast<clcenv::LexicalVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::LexicalVariable_O val -> 209
      return (kindVal == 209);
  };
};
// STAMP_clcenv__VariableDynamicExtent_O
template <typename FP> struct Cast<clcenv::VariableDynamicExtent_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::VariableDynamicExtent_O val -> 208
      return (kindVal == 208);
  };
};
// STAMP_llvmo__PHINode_O
template <typename FP> struct Cast<llvmo::PHINode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::PHINode_O val -> 96
      return (kindVal == 96);
  };
};
// STAMP_llvmo__ConstantArray_O
template <typename FP> struct Cast<llvmo::ConstantArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantArray_O val -> 108
      return (kindVal == 108);
  };
};
// STAMP_llvmo__IRBuilder_O
template <typename FP> struct Cast<llvmo::IRBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::IRBuilder_O val -> 49
      return (kindVal == 49);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>> val -> 413
      return (kindVal == 413);
  };
};
// STAMP_llvmo__ClaspJIT_O
template <typename FP> struct Cast<llvmo::ClaspJIT_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ClaspJIT_O val -> 362
      return (kindVal == 362);
  };
};
// STAMP_core__SimpleMDArrayBaseChar_O
template <typename FP> struct Cast<core::SimpleMDArrayBaseChar_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArrayBaseChar_O val -> 305
      return (kindVal == 305);
  };
};
// STAMP_core__Package_O
template <typename FP> struct Cast<core::Package_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Package_O val -> 361
      return (kindVal == 361);
  };
};
// STAMP_clcenv__GlobalEnvironment_O
template <typename FP> struct Cast<clcenv::GlobalEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::GlobalEnvironment_O val -> 207
      return (kindVal == 207);
  };
};
// STAMP_core__SimpleVector_byte8_t_O
template <typename FP> struct Cast<core::SimpleVector_byte8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_byte8_t_O val -> 243
      return (kindVal == 243);
  };
};
// STAMP_llvmo__DILexicalBlockBase_O
template <typename FP> struct Cast<llvmo::DILexicalBlockBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DILexicalBlockBase_O low high --> 66 67 
      return ((66 <= kindVal) && (kindVal <= 67));
  };
};
// STAMP_core__SimpleMDArray_O
template <typename FP> struct Cast<core::SimpleMDArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_O low high --> 287 318 
      return ((287 <= kindVal) && (kindVal <= 318));
  };
};
// STAMP_llvmo__MDNode_O
template <typename FP> struct Cast<llvmo::MDNode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::MDNode_O low high --> 61 74 
      return ((61 <= kindVal) && (kindVal <= 74));
  };
};
// STAMP_core__Stream_O
template <typename FP> struct Cast<core::Stream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Stream_O low high --> 348 360 
      return ((348 <= kindVal) && (kindVal <= 360));
  };
};
// STAMP_gctools__GCVector_moveable_int_
template <typename FP> struct Cast<gctools::GCVector_moveable<int>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<int> val -> 412
      return (kindVal == 412);
  };
};
// STAMP_mp__RecursiveMutex_O
template <typename FP> struct Cast<mp::RecursiveMutex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range mp::RecursiveMutex_O val -> 189
      return (kindVal == 189);
  };
};
// STAMP_gctools__GCArray_moveable_long_
template <typename FP> struct Cast<gctools::GCArray_moveable<long>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<long> val -> 411
      return (kindVal == 411);
  };
};
// STAMP_clcenv__FunctionType_O
template <typename FP> struct Cast<clcenv::FunctionType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::FunctionType_O val -> 206
      return (kindVal == 206);
  };
};
// STAMP_clcenv__Block_O
template <typename FP> struct Cast<clcenv::Block_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Block_O val -> 205
      return (kindVal == 205);
  };
};
// STAMP_llvmo__VAArgInst_O
template <typename FP> struct Cast<llvmo::VAArgInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::VAArgInst_O val -> 79
      return (kindVal == 79);
  };
};
// STAMP_llvmo__MDString_O
template <typename FP> struct Cast<llvmo::MDString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::MDString_O val -> 60
      return (kindVal == 60);
  };
};
// STAMP_core__ShortFloat_O
template <typename FP> struct Cast<core::ShortFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ShortFloat_O val -> 346
      return (kindVal == 346);
  };
};
// STAMP_core__Number_O
template <typename FP> struct Cast<core::Number_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Number_O low high --> 335 347 
      return ((335 <= kindVal) && (kindVal <= 347));
  };
};
// STAMP_core__MDArray_fixnum_O
template <typename FP> struct Cast<core::MDArray_fixnum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_fixnum_O val -> 320
      return (kindVal == 320);
  };
};
// STAMP_core__T_O
template <typename FP> struct Cast<core::T_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::T_O low high --> 1 383 
      return ((1 <= kindVal) && (kindVal <= 383));
  };
};
// STAMP_llvmo__DICompileUnit_O
template <typename FP> struct Cast<llvmo::DICompileUnit_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DICompileUnit_O val -> 69
      return (kindVal == 69);
  };
};
// STAMP_core__SharpEqualWrapper_O
template <typename FP> struct Cast<core::SharpEqualWrapper_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SharpEqualWrapper_O val -> 334
      return (kindVal == 334);
  };
};
// STAMP_clcenv__Tag_O
template <typename FP> struct Cast<clcenv::Tag_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Tag_O val -> 204
      return (kindVal == 204);
  };
};
// STAMP_core__SimpleMDArrayDouble_O
template <typename FP> struct Cast<core::SimpleMDArrayDouble_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArrayDouble_O val -> 303
      return (kindVal == 303);
  };
};
// STAMP_clcenv__ConstantVariableInfo_O
template <typename FP> struct Cast<clcenv::ConstantVariableInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::ConstantVariableInfo_O val -> 186
      return (kindVal == 186);
  };
};
// STAMP_core__LoadTimeValues_O
template <typename FP> struct Cast<core::LoadTimeValues_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LoadTimeValues_O val -> 333
      return (kindVal == 333);
  };
};
// STAMP_core__Cache_O
template <typename FP> struct Cast<core::Cache_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Cache_O val -> 332
      return (kindVal == 332);
  };
};
// STAMP_llvmo__DIFile_O
template <typename FP> struct Cast<llvmo::DIFile_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DIFile_O val -> 68
      return (kindVal == 68);
  };
};
// STAMP_core__AbstractSimpleVector_O
template <typename FP> struct Cast<core::AbstractSimpleVector_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::AbstractSimpleVector_O low high --> 220 252 
      return ((220 <= kindVal) && (kindVal <= 252));
  };
};
// STAMP_core__SimpleMDArray_byte16_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_byte16_t_O val -> 297
      return (kindVal == 297);
  };
};
// STAMP_core__Pathname_O
template <typename FP> struct Cast<core::Pathname_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Pathname_O low high --> 330 331 
      return ((330 <= kindVal) && (kindVal <= 331));
  };
};
// STAMP_llvmo__FunctionPass_O
template <typename FP> struct Cast<llvmo::FunctionPass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::FunctionPass_O val -> 31
      return (kindVal == 31);
  };
};
// STAMP_llvmo__DataLayout_O
template <typename FP> struct Cast<llvmo::DataLayout_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DataLayout_O val -> 329
      return (kindVal == 329);
  };
};
// STAMP_core__Str8Ns_O
template <typename FP> struct Cast<core::Str8Ns_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Str8Ns_O val -> 271
      return (kindVal == 271);
  };
};
// STAMP_llvmo__BasicBlock_O
template <typename FP> struct Cast<llvmo::BasicBlock_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::BasicBlock_O val -> 112
      return (kindVal == 112);
  };
};
// STAMP_core__SourceManager_O
template <typename FP> struct Cast<core::SourceManager_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SourceManager_O val -> 328
      return (kindVal == 328);
  };
};
// STAMP_core__SimpleMDArray_int8_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_int8_t_O val -> 289
      return (kindVal == 289);
  };
};
// STAMP_llvmo__UndefValue_O
template <typename FP> struct Cast<llvmo::UndefValue_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::UndefValue_O val -> 107
      return (kindVal == 107);
  };
};
// STAMP_gctools__GCVector_moveable_core__AuxArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::AuxArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::AuxArgument> val -> 410
      return (kindVal == 410);
  };
};
// STAMP_llvmo__EngineBuilder_O
template <typename FP> struct Cast<llvmo::EngineBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::EngineBuilder_O val -> 53
      return (kindVal == 53);
  };
};
// STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__
template <typename FP> struct Cast<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>> val -> 409
      return (kindVal == 409);
  };
};
// STAMP_core__MDArray_byte32_t_O
template <typename FP> struct Cast<core::MDArray_byte32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_byte32_t_O val -> 286
      return (kindVal == 286);
  };
};
// STAMP_core__Character_dummy_O
template <typename FP> struct Cast<core::Character_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Character_dummy_O val -> 327
      return (kindVal == 327);
  };
};
// STAMP_core__TagbodyEnvironment_O
template <typename FP> struct Cast<core::TagbodyEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::TagbodyEnvironment_O val -> 127
      return (kindVal == 127);
  };
};
// STAMP_core__ConsStepper_O
template <typename FP> struct Cast<core::ConsStepper_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ConsStepper_O val -> 160
      return (kindVal == 160);
  };
};
// STAMP_core__CompileTimeEnvironment_O
template <typename FP> struct Cast<core::CompileTimeEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::CompileTimeEnvironment_O low high --> 128 133 
      return ((128 <= kindVal) && (kindVal <= 133));
  };
};
// STAMP_llvmo__Constant_O
template <typename FP> struct Cast<llvmo::Constant_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Constant_O low high --> 97 110 
      return ((97 <= kindVal) && (kindVal <= 110));
  };
};
// STAMP_core__SpecialForm_O
template <typename FP> struct Cast<core::SpecialForm_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SpecialForm_O val -> 157
      return (kindVal == 157);
  };
};
// STAMP_core__Path_O
template <typename FP> struct Cast<core::Path_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Path_O val -> 326
      return (kindVal == 326);
  };
};
// STAMP_mp__BlockingConcurrentQueue_O
template <typename FP> struct Cast<mp::BlockingConcurrentQueue_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range mp::BlockingConcurrentQueue_O val -> 325
      return (kindVal == 325);
  };
};
// STAMP_mp__SharedMutex_O
template <typename FP> struct Cast<mp::SharedMutex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range mp::SharedMutex_O val -> 193
      return (kindVal == 193);
  };
};
// STAMP_clcenv__SpecialOperatorInfo_O
template <typename FP> struct Cast<clcenv::SpecialOperatorInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::SpecialOperatorInfo_O val -> 179
      return (kindVal == 179);
  };
};
// STAMP_core__SexpSaveArchive_O
template <typename FP> struct Cast<core::SexpSaveArchive_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SexpSaveArchive_O val -> 17
      return (kindVal == 17);
  };
};
// STAMP_clcenv__SymbolMacroInfo_O
template <typename FP> struct Cast<clcenv::SymbolMacroInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::SymbolMacroInfo_O val -> 185
      return (kindVal == 185);
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_char_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned char>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned char> val -> 408
      return (kindVal == 408);
  };
};
// STAMP_gctools__GCArray_moveable_int_
template <typename FP> struct Cast<gctools::GCArray_moveable<int>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<int> val -> 407
      return (kindVal == 407);
  };
};
// STAMP_core__NativeVector_int_O
template <typename FP> struct Cast<core::NativeVector_int_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::NativeVector_int_O val -> 192
      return (kindVal == 192);
  };
};
// STAMP_llvmo__DIBasicType_O
template <typename FP> struct Cast<llvmo::DIBasicType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DIBasicType_O val -> 73
      return (kindVal == 73);
  };
};
// STAMP_llvmo__DIBuilder_O
template <typename FP> struct Cast<llvmo::DIBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DIBuilder_O val -> 52
      return (kindVal == 52);
  };
};
// STAMP_core__InstanceCreator_O
template <typename FP> struct Cast<core::InstanceCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::InstanceCreator_O val -> 155
      return (kindVal == 155);
  };
};
// STAMP_llvmo__APInt_O
template <typename FP> struct Cast<llvmo::APInt_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::APInt_O val -> 51
      return (kindVal == 51);
  };
};
// STAMP_core__Symbol_O
template <typename FP> struct Cast<core::Symbol_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Symbol_O low high --> 323 324 
      return ((323 <= kindVal) && (kindVal <= 324));
  };
};
// STAMP_llvmo__APFloat_O
template <typename FP> struct Cast<llvmo::APFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::APFloat_O val -> 50
      return (kindVal == 50);
  };
};
// STAMP_clcenv__FunctionInfo_O
template <typename FP> struct Cast<clcenv::FunctionInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::FunctionInfo_O low high --> 175 181 
      return ((175 <= kindVal) && (kindVal <= 181));
  };
};
// STAMP_core__IOStreamStream_O
template <typename FP> struct Cast<core::IOStreamStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::IOStreamStream_O val -> 359
      return (kindVal == 359);
  };
};
// STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___
template <typename FP> struct Cast<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>> val -> 406
      return (kindVal == 406);
  };
};
// STAMP_core__SimpleMDArrayCharacter_O
template <typename FP> struct Cast<core::SimpleMDArrayCharacter_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArrayCharacter_O val -> 291
      return (kindVal == 291);
  };
};
// STAMP_core__SimpleCharacterString_O
template <typename FP> struct Cast<core::SimpleCharacterString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleCharacterString_O val -> 229
      return (kindVal == 229);
  };
};
// STAMP_clcenv__LambdaName_O
template <typename FP> struct Cast<clcenv::LambdaName_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::LambdaName_O val -> 203
      return (kindVal == 203);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>> val -> 405
      return (kindVal == 405);
  };
};
// STAMP_core__Array_O
template <typename FP> struct Cast<core::Array_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Array_O low high --> 219 322 
      return ((219 <= kindVal) && (kindVal <= 322));
  };
};
// STAMP_clcenv__LocalFunctionInfo_O
template <typename FP> struct Cast<clcenv::LocalFunctionInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::LocalFunctionInfo_O val -> 178
      return (kindVal == 178);
  };
};
// STAMP_llvmo__InsertPoint_O
template <typename FP> struct Cast<llvmo::InsertPoint_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::InsertPoint_O val -> 218
      return (kindVal == 218);
  };
};
// STAMP_llvmo__Argument_O
template <typename FP> struct Cast<llvmo::Argument_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Argument_O val -> 111
      return (kindVal == 111);
  };
};
// STAMP_clcenv__Optimize_O
template <typename FP> struct Cast<clcenv::Optimize_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Optimize_O val -> 202
      return (kindVal == 202);
  };
};
// STAMP_core__StrWNs_O
template <typename FP> struct Cast<core::StrWNs_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::StrWNs_O val -> 269
      return (kindVal == 269);
  };
};
// STAMP_core__Iterator_O
template <typename FP> struct Cast<core::Iterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Iterator_O low high --> 215 217 
      return ((215 <= kindVal) && (kindVal <= 217));
  };
};
// STAMP_llvmo__IRBuilderBase_O
template <typename FP> struct Cast<llvmo::IRBuilderBase_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::IRBuilderBase_O low high --> 48 49 
      return ((48 <= kindVal) && (kindVal <= 49));
  };
};
// STAMP_gctools__GCVector_moveable_core__ExceptionEntry_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::ExceptionEntry>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::ExceptionEntry> val -> 404
      return (kindVal == 404);
  };
};
// STAMP_core__EchoStream_O
template <typename FP> struct Cast<core::EchoStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::EchoStream_O val -> 360
      return (kindVal == 360);
  };
};
// STAMP_core__Null_O
template <typename FP> struct Cast<core::Null_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Null_O val -> 324
      return (kindVal == 324);
  };
};
// STAMP_core__SimpleMDArrayBit_O
template <typename FP> struct Cast<core::SimpleMDArrayBit_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArrayBit_O val -> 308
      return (kindVal == 308);
  };
};
// STAMP_core__MDArrayBit_O
template <typename FP> struct Cast<core::MDArrayBit_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArrayBit_O val -> 280
      return (kindVal == 280);
  };
};
// STAMP_gctools__GCArray_moveable_signed_char_
template <typename FP> struct Cast<gctools::GCArray_moveable<signed char>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<signed char> val -> 403
      return (kindVal == 403);
  };
};
// STAMP_core__SingleDispatchMethod_O
template <typename FP> struct Cast<core::SingleDispatchMethod_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SingleDispatchMethod_O val -> 214
      return (kindVal == 214);
  };
};
// STAMP_clcenv__Closure_O
template <typename FP> struct Cast<clcenv::Closure_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Closure_O val -> 201
      return (kindVal == 201);
  };
};
// STAMP_clcenv__Inline_O
template <typename FP> struct Cast<clcenv::Inline_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Inline_O val -> 200
      return (kindVal == 200);
  };
};
// STAMP_clcenv__LexicalVariableInfo_O
template <typename FP> struct Cast<clcenv::LexicalVariableInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::LexicalVariableInfo_O val -> 184
      return (kindVal == 184);
  };
};
// STAMP_core__NativeVector_double_O
template <typename FP> struct Cast<core::NativeVector_double_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::NativeVector_double_O val -> 191
      return (kindVal == 191);
  };
};
// STAMP_core__GlueEnvironment_O
template <typename FP> struct Cast<core::GlueEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::GlueEnvironment_O val -> 121
      return (kindVal == 121);
  };
};
// STAMP_llvmo__DILocalScope_O
template <typename FP> struct Cast<llvmo::DILocalScope_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DILocalScope_O low high --> 64 67 
      return ((64 <= kindVal) && (kindVal <= 67));
  };
};
// STAMP_core__CxxObject_O
template <typename FP> struct Cast<core::CxxObject_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::CxxObject_O low high --> 169 213 
      return ((169 <= kindVal) && (kindVal <= 213));
  };
};
// STAMP_llvmo__ReturnInst_O
template <typename FP> struct Cast<llvmo::ReturnInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ReturnInst_O val -> 88
      return (kindVal == 88);
  };
};
// STAMP_llvmo__FunctionType_O
template <typename FP> struct Cast<llvmo::FunctionType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::FunctionType_O val -> 41
      return (kindVal == 41);
  };
};
// STAMP_clbind__DummyCreator_O
template <typename FP> struct Cast<clbind::DummyCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clbind::DummyCreator_O val -> 154
      return (kindVal == 154);
  };
};
// STAMP_core__MDArray_byte16_t_O
template <typename FP> struct Cast<core::MDArray_byte16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_byte16_t_O val -> 284
      return (kindVal == 284);
  };
};
// STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___
template <typename FP> struct Cast<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>> val -> 402
      return (kindVal == 402);
  };
};
// STAMP_llvmo__DITypeRefArray_O
template <typename FP> struct Cast<llvmo::DITypeRefArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DITypeRefArray_O val -> 190
      return (kindVal == 190);
  };
};
// STAMP_llvmo__DILexicalBlock_O
template <typename FP> struct Cast<llvmo::DILexicalBlock_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DILexicalBlock_O val -> 67
      return (kindVal == 67);
  };
};
// STAMP_core__Pointer_O
template <typename FP> struct Cast<core::Pointer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Pointer_O low high --> 167 168 
      return ((167 <= kindVal) && (kindVal <= 168));
  };
};
// STAMP_llvmo__Type_O
template <typename FP> struct Cast<llvmo::Type_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Type_O low high --> 39 47 
      return ((39 <= kindVal) && (kindVal <= 47));
  };
};
// STAMP_core__SimpleVectorFloat_O
template <typename FP> struct Cast<core::SimpleVectorFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVectorFloat_O val -> 222
      return (kindVal == 222);
  };
};
// STAMP_mp__Mutex_O
template <typename FP> struct Cast<mp::Mutex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range mp::Mutex_O low high --> 188 189 
      return ((188 <= kindVal) && (kindVal <= 189));
  };
};
// STAMP_llvmo__ModuleHandle_O
template <typename FP> struct Cast<llvmo::ModuleHandle_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ModuleHandle_O val -> 166
      return (kindVal == 166);
  };
};
// STAMP_core__RecursiveDirectoryIterator_O
template <typename FP> struct Cast<core::RecursiveDirectoryIterator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::RecursiveDirectoryIterator_O val -> 216
      return (kindVal == 216);
  };
};
// STAMP_clcenv__BlockInfo_O
template <typename FP> struct Cast<clcenv::BlockInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::BlockInfo_O val -> 174
      return (kindVal == 174);
  };
};
// STAMP_llvmo__UnreachableInst_O
template <typename FP> struct Cast<llvmo::UnreachableInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::UnreachableInst_O val -> 87
      return (kindVal == 87);
  };
};
// STAMP_core__SNode_O
template <typename FP> struct Cast<core::SNode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SNode_O low high --> 163 165 
      return ((163 <= kindVal) && (kindVal <= 165));
  };
};
// STAMP_core__VectorStepper_O
template <typename FP> struct Cast<core::VectorStepper_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::VectorStepper_O val -> 159
      return (kindVal == 159);
  };
};
// STAMP_core__LoadArchive_O
template <typename FP> struct Cast<core::LoadArchive_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LoadArchive_O low high --> 18 19 
      return ((18 <= kindVal) && (kindVal <= 19));
  };
};
// STAMP_core__StringInputStream_O
template <typename FP> struct Cast<core::StringInputStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::StringInputStream_O val -> 356
      return (kindVal == 356);
  };
};
// STAMP_core__Float_O
template <typename FP> struct Cast<core::Float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Float_O low high --> 342 346 
      return ((342 <= kindVal) && (kindVal <= 346));
  };
};
// STAMP_llvmo__ModulePass_O
template <typename FP> struct Cast<llvmo::ModulePass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ModulePass_O low high --> 28 30 
      return ((28 <= kindVal) && (kindVal <= 30));
  };
};
// STAMP_llvmo__DIDerivedType_O
template <typename FP> struct Cast<llvmo::DIDerivedType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DIDerivedType_O val -> 72
      return (kindVal == 72);
  };
};
// STAMP_clbind__ConstructorCreator_O
template <typename FP> struct Cast<clbind::ConstructorCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clbind::ConstructorCreator_O val -> 153
      return (kindVal == 153);
  };
};
// STAMP_core__FunctionFrame_O
template <typename FP> struct Cast<core::FunctionFrame_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::FunctionFrame_O val -> 136
      return (kindVal == 136);
  };
};
// STAMP_core__LongFloat_O
template <typename FP> struct Cast<core::LongFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LongFloat_O val -> 345
      return (kindVal == 345);
  };
};
// STAMP_core__SimpleVector_int64_t_O
template <typename FP> struct Cast<core::SimpleVector_int64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_int64_t_O val -> 226
      return (kindVal == 226);
  };
};
// STAMP_core__TranslationFunctor_O
template <typename FP> struct Cast<core::TranslationFunctor_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::TranslationFunctor_O val -> 144
      return (kindVal == 144);
  };
};
// STAMP_llvmo__ConstantDataSequential_O
template <typename FP> struct Cast<llvmo::ConstantDataSequential_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantDataSequential_O low high --> 105 106 
      return ((105 <= kindVal) && (kindVal <= 106));
  };
};
// STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_
template <typename FP> struct Cast<gctools::GCBitUnitArray_moveable<1,unsigned int,int>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCBitUnitArray_moveable<1,unsigned int,int> val -> 401
      return (kindVal == 401);
  };
};
// STAMP_llvmo__TargetLibraryInfoWrapperPass_O
template <typename FP> struct Cast<llvmo::TargetLibraryInfoWrapperPass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::TargetLibraryInfoWrapperPass_O val -> 30
      return (kindVal == 30);
  };
};
// STAMP_llvmo__StoreInst_O
template <typename FP> struct Cast<llvmo::StoreInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::StoreInst_O val -> 95
      return (kindVal == 95);
  };
};
// STAMP_llvmo__DebugLoc_O
template <typename FP> struct Cast<llvmo::DebugLoc_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DebugLoc_O val -> 162
      return (kindVal == 162);
  };
};
// STAMP_llvmo__User_O
template <typename FP> struct Cast<llvmo::User_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::User_O low high --> 76 110 
      return ((76 <= kindVal) && (kindVal <= 110));
  };
};
// STAMP_core__WeakPointer_O
template <typename FP> struct Cast<core::WeakPointer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::WeakPointer_O val -> 161
      return (kindVal == 161);
  };
};
// STAMP_core__LeafSNode_O
template <typename FP> struct Cast<core::LeafSNode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LeafSNode_O val -> 165
      return (kindVal == 165);
  };
};
// STAMP_core__MDArray_int16_t_O
template <typename FP> struct Cast<core::MDArray_int16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_int16_t_O val -> 258
      return (kindVal == 258);
  };
};
// STAMP_clcenv__OptimizeInfo_O
template <typename FP> struct Cast<clcenv::OptimizeInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::OptimizeInfo_O val -> 173
      return (kindVal == 173);
  };
};
// STAMP_core__IOFileStream_O
template <typename FP> struct Cast<core::IOFileStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::IOFileStream_O val -> 358
      return (kindVal == 358);
  };
};
// STAMP_llvmo__FenceInst_O
template <typename FP> struct Cast<llvmo::FenceInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::FenceInst_O val -> 94
      return (kindVal == 94);
  };
};
// STAMP_core__RuntimeVisibleEnvironment_O
template <typename FP> struct Cast<core::RuntimeVisibleEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::RuntimeVisibleEnvironment_O low high --> 123 127 
      return ((123 <= kindVal) && (kindVal <= 127));
  };
};
// STAMP_core__ValueFrame_O
template <typename FP> struct Cast<core::ValueFrame_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ValueFrame_O val -> 135
      return (kindVal == 135);
  };
};
// STAMP_llvmo__AtomicCmpXchgInst_O
template <typename FP> struct Cast<llvmo::AtomicCmpXchgInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::AtomicCmpXchgInst_O val -> 93
      return (kindVal == 93);
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_long_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned long>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned long> val -> 400
      return (kindVal == 400);
  };
};
// STAMP_core__SimpleMDArray_byte8_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_byte8_t_O val -> 312
      return (kindVal == 312);
  };
};
// STAMP_core__SequenceStepper_O
template <typename FP> struct Cast<core::SequenceStepper_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SequenceStepper_O low high --> 158 160 
      return ((158 <= kindVal) && (kindVal <= 160));
  };
};
// STAMP_core__SimpleVector_int32_t_O
template <typename FP> struct Cast<core::SimpleVector_int32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_int32_t_O val -> 245
      return (kindVal == 245);
  };
};
// STAMP_core__SaveArchive_O
template <typename FP> struct Cast<core::SaveArchive_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SaveArchive_O low high --> 16 17 
      return ((16 <= kindVal) && (kindVal <= 17));
  };
};
// STAMP_core__Complex_O
template <typename FP> struct Cast<core::Complex_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Complex_O val -> 347
      return (kindVal == 347);
  };
};
// STAMP_llvmo__ConstantPointerNull_O
template <typename FP> struct Cast<llvmo::ConstantPointerNull_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantPointerNull_O val -> 104
      return (kindVal == 104);
  };
};
// STAMP_llvmo__Instruction_O
template <typename FP> struct Cast<llvmo::Instruction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Instruction_O low high --> 77 96 
      return ((77 <= kindVal) && (kindVal <= 96));
  };
};
// STAMP_llvmo__VectorType_O
template <typename FP> struct Cast<llvmo::VectorType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::VectorType_O val -> 46
      return (kindVal == 46);
  };
};
// STAMP_core__FileStream_O
template <typename FP> struct Cast<core::FileStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::FileStream_O low high --> 357 359 
      return ((357 <= kindVal) && (kindVal <= 359));
  };
};
// STAMP_llvmo__ValueAsMetadata_O
template <typename FP> struct Cast<llvmo::ValueAsMetadata_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ValueAsMetadata_O val -> 59
      return (kindVal == 59);
  };
};
// STAMP_core__Rational_O
template <typename FP> struct Cast<core::Rational_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Rational_O low high --> 337 341 
      return ((337 <= kindVal) && (kindVal <= 341));
  };
};
// STAMP_llvmo__ConstantExpr_O
template <typename FP> struct Cast<llvmo::ConstantExpr_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantExpr_O val -> 103
      return (kindVal == 103);
  };
};
// STAMP_core__MDArrayCharacter_O
template <typename FP> struct Cast<core::MDArrayCharacter_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArrayCharacter_O val -> 262
      return (kindVal == 262);
  };
};
// STAMP_llvmo__LandingPadInst_O
template <typename FP> struct Cast<llvmo::LandingPadInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::LandingPadInst_O val -> 92
      return (kindVal == 92);
  };
};
// STAMP_core__SingleDispatchEffectiveMethodFunction_O
template <typename FP> struct Cast<core::SingleDispatchEffectiveMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SingleDispatchEffectiveMethodFunction_O val -> 146
      return (kindVal == 146);
  };
};
// STAMP_core__Function_O
template <typename FP> struct Cast<core::Function_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Function_O low high --> 138 157 
      return ((138 <= kindVal) && (kindVal <= 157));
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>> val -> 399
      return (kindVal == 399);
  };
};
// STAMP_llvmo__StructType_O
template <typename FP> struct Cast<llvmo::StructType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::StructType_O val -> 47
      return (kindVal == 47);
  };
};
// STAMP_clcenv__FunctionDynamicExtent_O
template <typename FP> struct Cast<clcenv::FunctionDynamicExtent_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::FunctionDynamicExtent_O val -> 199
      return (kindVal == 199);
  };
};
// STAMP_core__RandomState_O
template <typename FP> struct Cast<core::RandomState_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::RandomState_O val -> 137
      return (kindVal == 137);
  };
};
// STAMP_core__MDArrayFloat_O
template <typename FP> struct Cast<core::MDArrayFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArrayFloat_O val -> 266
      return (kindVal == 266);
  };
};
// STAMP_core__HashTableEql_O
template <typename FP> struct Cast<core::HashTableEql_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::HashTableEql_O val -> 370
      return (kindVal == 370);
  };
};
// STAMP_llvmo__Target_O
template <typename FP> struct Cast<llvmo::Target_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Target_O val -> 38
      return (kindVal == 38);
  };
};
// STAMP_core__MDArray_byte64_t_O
template <typename FP> struct Cast<core::MDArray_byte64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_byte64_t_O val -> 256
      return (kindVal == 256);
  };
};
// STAMP_mp__ConditionVariable_O
template <typename FP> struct Cast<mp::ConditionVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range mp::ConditionVariable_O val -> 187
      return (kindVal == 187);
  };
};
// STAMP_core__Real_O
template <typename FP> struct Cast<core::Real_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Real_O low high --> 336 346 
      return ((336 <= kindVal) && (kindVal <= 346));
  };
};
// STAMP_gctools__GCVector_moveable_core__DynamicBinding_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::DynamicBinding>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::DynamicBinding> val -> 398
      return (kindVal == 398);
  };
};
// STAMP_core__SimpleVector_fixnum_O
template <typename FP> struct Cast<core::SimpleVector_fixnum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_fixnum_O val -> 237
      return (kindVal == 237);
  };
};
// STAMP_core__FuncallableInstanceCreator_O
template <typename FP> struct Cast<core::FuncallableInstanceCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::FuncallableInstanceCreator_O val -> 152
      return (kindVal == 152);
  };
};
// STAMP_core__SimpleVector_byte32_t_O
template <typename FP> struct Cast<core::SimpleVector_byte32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_byte32_t_O val -> 248
      return (kindVal == 248);
  };
};
// STAMP_core__MDArray_byte8_t_O
template <typename FP> struct Cast<core::MDArray_byte8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_byte8_t_O val -> 279
      return (kindVal == 279);
  };
};
// STAMP_core__SexpLoadArchive_O
template <typename FP> struct Cast<core::SexpLoadArchive_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SexpLoadArchive_O val -> 19
      return (kindVal == 19);
  };
};
// STAMP_core__SingleDispatchGenericFunctionClosure_O
template <typename FP> struct Cast<core::SingleDispatchGenericFunctionClosure_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SingleDispatchGenericFunctionClosure_O val -> 145
      return (kindVal == 145);
  };
};
// STAMP_core__StringOutputStream_O
template <typename FP> struct Cast<core::StringOutputStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::StringOutputStream_O val -> 355
      return (kindVal == 355);
  };
};
// STAMP_core__AnsiStream_O
template <typename FP> struct Cast<core::AnsiStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::AnsiStream_O low high --> 349 360 
      return ((349 <= kindVal) && (kindVal <= 360));
  };
};
// STAMP_core__BranchSNode_O
template <typename FP> struct Cast<core::BranchSNode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::BranchSNode_O val -> 164
      return (kindVal == 164);
  };
};
// STAMP_llvmo__TerminatorInst_O
template <typename FP> struct Cast<llvmo::TerminatorInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::TerminatorInst_O low high --> 84 91 
      return ((84 <= kindVal) && (kindVal <= 91));
  };
};
// STAMP_llvmo__Module_O
template <typename FP> struct Cast<llvmo::Module_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Module_O val -> 37
      return (kindVal == 37);
  };
};
// STAMP_core__BuiltinClosure_O
template <typename FP> struct Cast<core::BuiltinClosure_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::BuiltinClosure_O low high --> 143 144 
      return ((143 <= kindVal) && (kindVal <= 144));
  };
};
// STAMP_core__SingleFloat_dummy_O
template <typename FP> struct Cast<core::SingleFloat_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SingleFloat_dummy_O val -> 344
      return (kindVal == 344);
  };
};
// STAMP_core__ValueEnvironment_O
template <typename FP> struct Cast<core::ValueEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ValueEnvironment_O val -> 126
      return (kindVal == 126);
  };
};
// STAMP_core__CxxMethodFunction_O
template <typename FP> struct Cast<core::CxxMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::CxxMethodFunction_O val -> 142
      return (kindVal == 142);
  };
};
// STAMP_llvmo__InvokeInst_O
template <typename FP> struct Cast<llvmo::InvokeInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::InvokeInst_O val -> 86
      return (kindVal == 86);
  };
};
// STAMP_core__Environment_O
template <typename FP> struct Cast<core::Environment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Environment_O low high --> 120 136 
      return ((120 <= kindVal) && (kindVal <= 136));
  };
};
// STAMP_clcenv__SymbolMacro_O
template <typename FP> struct Cast<clcenv::SymbolMacro_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::SymbolMacro_O val -> 198
      return (kindVal == 198);
  };
};
// STAMP_llvmo__AttributeSet_O
template <typename FP> struct Cast<llvmo::AttributeSet_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::AttributeSet_O val -> 119
      return (kindVal == 119);
  };
};
// STAMP_clcenv__LocalMacroInfo_O
template <typename FP> struct Cast<clcenv::LocalMacroInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::LocalMacroInfo_O val -> 177
      return (kindVal == 177);
  };
};
// STAMP_llvmo__AtomicRMWInst_O
template <typename FP> struct Cast<llvmo::AtomicRMWInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::AtomicRMWInst_O val -> 83
      return (kindVal == 83);
  };
};
// STAMP_llvmo__PassManager_O
template <typename FP> struct Cast<llvmo::PassManager_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::PassManager_O val -> 56
      return (kindVal == 56);
  };
};
// STAMP_core__StrNs_O
template <typename FP> struct Cast<core::StrNs_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::StrNs_O low high --> 267 271 
      return ((267 <= kindVal) && (kindVal <= 271));
  };
};
// STAMP_clasp_ffi__ForeignData_O
template <typename FP> struct Cast<clasp_ffi::ForeignData_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clasp_ffi::ForeignData_O val -> 168
      return (kindVal == 168);
  };
};
// STAMP_core__SimpleVector_O
template <typename FP> struct Cast<core::SimpleVector_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_O val -> 241
      return (kindVal == 241);
  };
};
// STAMP_core__UnwindProtectEnvironment_O
template <typename FP> struct Cast<core::UnwindProtectEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::UnwindProtectEnvironment_O val -> 132
      return (kindVal == 132);
  };
};
// STAMP_clcenv__GlobalMacroInfo_O
template <typename FP> struct Cast<clcenv::GlobalMacroInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::GlobalMacroInfo_O val -> 176
      return (kindVal == 176);
  };
};
// STAMP_llvmo__CallInst_O
template <typename FP> struct Cast<llvmo::CallInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::CallInst_O val -> 82
      return (kindVal == 82);
  };
};
// STAMP_llvmo__DISubprogram_O
template <typename FP> struct Cast<llvmo::DISubprogram_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DISubprogram_O val -> 65
      return (kindVal == 65);
  };
};
// STAMP_llvmo__FunctionPassManager_O
template <typename FP> struct Cast<llvmo::FunctionPassManager_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::FunctionPassManager_O val -> 55
      return (kindVal == 55);
  };
};
// STAMP_core__DoubleFloat_O
template <typename FP> struct Cast<core::DoubleFloat_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::DoubleFloat_O val -> 343
      return (kindVal == 343);
  };
};
// STAMP_clcenv__Info_O
template <typename FP> struct Cast<clcenv::Info_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Info_O low high --> 172 186 
      return ((172 <= kindVal) && (kindVal <= 186));
  };
};
// STAMP_core__Creator_O
template <typename FP> struct Cast<core::Creator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Creator_O low high --> 149 156 
      return ((149 <= kindVal) && (kindVal <= 156));
  };
};
// STAMP_llvmo__ArrayType_O
template <typename FP> struct Cast<llvmo::ArrayType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ArrayType_O val -> 45
      return (kindVal == 45);
  };
};
// STAMP_core__SimpleMDArray_int64_t_O
template <typename FP> struct Cast<core::SimpleMDArray_int64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_int64_t_O val -> 316
      return (kindVal == 316);
  };
};
// STAMP_core__SimpleString_O
template <typename FP> struct Cast<core::SimpleString_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleString_O low high --> 227 231 
      return ((227 <= kindVal) && (kindVal <= 231));
  };
};
// STAMP_llvmo__MCSubtargetInfo_O
template <typename FP> struct Cast<llvmo::MCSubtargetInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::MCSubtargetInfo_O low high --> 35 36 
      return ((35 <= kindVal) && (kindVal <= 36));
  };
};
// STAMP_llvmo__BlockAddress_O
template <typename FP> struct Cast<llvmo::BlockAddress_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::BlockAddress_O val -> 102
      return (kindVal == 102);
  };
};
// STAMP_gctools__GCArray_moveable_short_
template <typename FP> struct Cast<gctools::GCArray_moveable<short>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<short> val -> 397
      return (kindVal == 397);
  };
};
// STAMP_llvmo__DICompositeType_O
template <typename FP> struct Cast<llvmo::DICompositeType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DICompositeType_O val -> 71
      return (kindVal == 71);
  };
};
// STAMP_core__FunctionValueEnvironment_O
template <typename FP> struct Cast<core::FunctionValueEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::FunctionValueEnvironment_O val -> 125
      return (kindVal == 125);
  };
};
// STAMP_core__DerivableCxxClassCreator_O
template <typename FP> struct Cast<core::DerivableCxxClassCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::DerivableCxxClassCreator_O val -> 151
      return (kindVal == 151);
  };
};
// STAMP_core__HashTableEq_O
template <typename FP> struct Cast<core::HashTableEq_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::HashTableEq_O val -> 369
      return (kindVal == 369);
  };
};
// STAMP_core__StringStream_O
template <typename FP> struct Cast<core::StringStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::StringStream_O low high --> 354 356 
      return ((354 <= kindVal) && (kindVal <= 356));
  };
};
// STAMP_gctools__GCVector_moveable_core__SymbolStorage_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::SymbolStorage>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::SymbolStorage> val -> 396
      return (kindVal == 396);
  };
};
// STAMP_core__Sigset_O
template <typename FP> struct Cast<core::Sigset_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Sigset_O val -> 118
      return (kindVal == 118);
  };
};
// STAMP_core__MDArray_int32_t_O
template <typename FP> struct Cast<core::MDArray_int32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_int32_t_O val -> 264
      return (kindVal == 264);
  };
};
// STAMP_llvmo__IntegerType_O
template <typename FP> struct Cast<llvmo::IntegerType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::IntegerType_O val -> 40
      return (kindVal == 40);
  };
};
// STAMP_asttooling__AsttoolingExposer_O
template <typename FP> struct Cast<asttooling::AsttoolingExposer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range asttooling::AsttoolingExposer_O val -> 373
      return (kindVal == 373);
  };
};
// STAMP_core__HashTableEqualp_O
template <typename FP> struct Cast<core::HashTableEqualp_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::HashTableEqualp_O val -> 368
      return (kindVal == 368);
  };
};
// STAMP_core__LambdaListHandler_O
template <typename FP> struct Cast<core::LambdaListHandler_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LambdaListHandler_O val -> 117
      return (kindVal == 117);
  };
};
// STAMP_core__MDArray_int64_t_O
template <typename FP> struct Cast<core::MDArray_int64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_int64_t_O val -> 282
      return (kindVal == 282);
  };
};
// STAMP_core__SimpleMDArray_size_t_O
template <typename FP> struct Cast<core::SimpleMDArray_size_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_size_t_O val -> 314
      return (kindVal == 314);
  };
};
// STAMP_gctools__GCVector_moveable_double_
template <typename FP> struct Cast<gctools::GCVector_moveable<double>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<double> val -> 395
      return (kindVal == 395);
  };
};
// STAMP_core__ConcatenatedStream_O
template <typename FP> struct Cast<core::ConcatenatedStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ConcatenatedStream_O val -> 353
      return (kindVal == 353);
  };
};
// STAMP_core__SmallMultimap_O
template <typename FP> struct Cast<core::SmallMultimap_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SmallMultimap_O val -> 116
      return (kindVal == 116);
  };
};
// STAMP_llvmo__PassManagerBuilder_O
template <typename FP> struct Cast<llvmo::PassManagerBuilder_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::PassManagerBuilder_O val -> 34
      return (kindVal == 34);
  };
};
// STAMP_core__SymbolMacroletEnvironment_O
template <typename FP> struct Cast<core::SymbolMacroletEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SymbolMacroletEnvironment_O val -> 131
      return (kindVal == 131);
  };
};
// STAMP_core__Fixnum_dummy_O
template <typename FP> struct Cast<core::Fixnum_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Fixnum_dummy_O val -> 341
      return (kindVal == 341);
  };
};
// STAMP_core__MDArray_int8_t_O
template <typename FP> struct Cast<core::MDArray_int8_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArray_int8_t_O val -> 260
      return (kindVal == 260);
  };
};
// STAMP_llvmo__ConstantFP_O
template <typename FP> struct Cast<llvmo::ConstantFP_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantFP_O val -> 101
      return (kindVal == 101);
  };
};
// STAMP_core__SingleDispatchMethodFunction_O
template <typename FP> struct Cast<core::SingleDispatchMethodFunction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SingleDispatchMethodFunction_O low high --> 141 142 
      return ((141 <= kindVal) && (kindVal <= 142));
  };
};
// STAMP_core__MacroletEnvironment_O
template <typename FP> struct Cast<core::MacroletEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MacroletEnvironment_O val -> 130
      return (kindVal == 130);
  };
};
// STAMP_core__Cons_O
template <typename FP> struct Cast<core::Cons_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Cons_O val -> 383
      return (kindVal == 383);
  };
};
// STAMP_llvmo__ImmutablePass_O
template <typename FP> struct Cast<llvmo::ImmutablePass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ImmutablePass_O low high --> 29 30 
      return ((29 <= kindVal) && (kindVal <= 30));
  };
};
// STAMP_core__FuncallableInstance_O
template <typename FP> struct Cast<core::FuncallableInstance_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::FuncallableInstance_O val -> 148
      return (kindVal == 148);
  };
};
// STAMP_llvmo__LLVMContext_O
template <typename FP> struct Cast<llvmo::LLVMContext_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::LLVMContext_O val -> 33
      return (kindVal == 33);
  };
};
// STAMP_core__MDArrayDouble_O
template <typename FP> struct Cast<core::MDArrayDouble_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArrayDouble_O val -> 273
      return (kindVal == 273);
  };
};
// STAMP_core__SynonymStream_O
template <typename FP> struct Cast<core::SynonymStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SynonymStream_O val -> 352
      return (kindVal == 352);
  };
};
// STAMP_core__WeakKeyHashTable_O
template <typename FP> struct Cast<core::WeakKeyHashTable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::WeakKeyHashTable_O val -> 6
      return (kindVal == 6);
  };
};
// STAMP_core__Ratio_O
template <typename FP> struct Cast<core::Ratio_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Ratio_O val -> 338
      return (kindVal == 338);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>> val -> 394
      return (kindVal == 394);
  };
};
// STAMP_core__MDArrayBaseChar_O
template <typename FP> struct Cast<core::MDArrayBaseChar_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MDArrayBaseChar_O val -> 322
      return (kindVal == 322);
  };
};
// STAMP_core__UserData_O
template <typename FP> struct Cast<core::UserData_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::UserData_O val -> 379
      return (kindVal == 379);
  };
};
// STAMP_llvmo__GlobalVariable_O
template <typename FP> struct Cast<llvmo::GlobalVariable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::GlobalVariable_O val -> 99
      return (kindVal == 99);
  };
};
// STAMP_core__ClosureWithSlots_O
template <typename FP> struct Cast<core::ClosureWithSlots_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ClosureWithSlots_O val -> 140
      return (kindVal == 140);
  };
};
// STAMP_llvmo__DINode_O
template <typename FP> struct Cast<llvmo::DINode_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DINode_O low high --> 62 74 
      return ((62 <= kindVal) && (kindVal <= 74));
  };
};
// STAMP_core__ExternalObject_O
template <typename FP> struct Cast<core::ExternalObject_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ExternalObject_O low high --> 24 115 
      return ((24 <= kindVal) && (kindVal <= 115));
  };
};
// STAMP_core__BroadcastStream_O
template <typename FP> struct Cast<core::BroadcastStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::BroadcastStream_O val -> 351
      return (kindVal == 351);
  };
};
// STAMP_llvmo__ExecutionEngine_O
template <typename FP> struct Cast<llvmo::ExecutionEngine_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ExecutionEngine_O val -> 32
      return (kindVal == 32);
  };
};
// STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__
template <typename FP> struct Cast<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>> val -> 393
      return (kindVal == 393);
  };
};
// STAMP_core__ClassRepCreator_O
template <typename FP> struct Cast<core::ClassRepCreator_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ClassRepCreator_O val -> 150
      return (kindVal == 150);
  };
};
// STAMP_core__SimpleVector_int16_t_O
template <typename FP> struct Cast<core::SimpleVector_int16_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVector_int16_t_O val -> 233
      return (kindVal == 233);
  };
};
// STAMP_core__General_O
template <typename FP> struct Cast<core::General_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::General_O low high --> 3 382 
      return ((3 <= kindVal) && (kindVal <= 382));
  };
};
// STAMP_clcenv__Function_O
template <typename FP> struct Cast<clcenv::Function_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::Function_O val -> 197
      return (kindVal == 197);
  };
};
// STAMP_core__DerivableCxxObject_O
template <typename FP> struct Cast<core::DerivableCxxObject_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::DerivableCxxObject_O val -> 11
      return (kindVal == 11);
  };
};
// STAMP_llvmo__Attribute_O
template <typename FP> struct Cast<llvmo::Attribute_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Attribute_O val -> 23
      return (kindVal == 23);
  };
};
// STAMP_core__WeakKeyMapping_O
template <typename FP> struct Cast<core::WeakKeyMapping_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::WeakKeyMapping_O val -> 22
      return (kindVal == 22);
  };
};
// STAMP_core__Closure_O
template <typename FP> struct Cast<core::Closure_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Closure_O low high --> 139 147 
      return ((139 <= kindVal) && (kindVal <= 147));
  };
};
// STAMP_core__Reader_O
template <typename FP> struct Cast<core::Reader_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Reader_O val -> 21
      return (kindVal == 21);
  };
};
// STAMP_core__SymbolToEnumConverter_O
template <typename FP> struct Cast<core::SymbolToEnumConverter_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SymbolToEnumConverter_O val -> 20
      return (kindVal == 20);
  };
};
// STAMP_llvmo__SwitchInst_O
template <typename FP> struct Cast<llvmo::SwitchInst_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::SwitchInst_O val -> 85
      return (kindVal == 85);
  };
};
// STAMP_clcenv__VariableIgnore_O
template <typename FP> struct Cast<clcenv::VariableIgnore_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::VariableIgnore_O val -> 196
      return (kindVal == 196);
  };
};
// STAMP_clcenv__SpecialVariableInfo_O
template <typename FP> struct Cast<clcenv::SpecialVariableInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::SpecialVariableInfo_O val -> 183
      return (kindVal == 183);
  };
};
// STAMP_core__NativeVector_float_O
template <typename FP> struct Cast<core::NativeVector_float_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::NativeVector_float_O val -> 171
      return (kindVal == 171);
  };
};
// STAMP_core__SimpleVectorDouble_O
template <typename FP> struct Cast<core::SimpleVectorDouble_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleVectorDouble_O val -> 252
      return (kindVal == 252);
  };
};
// STAMP_gctools__GCVector_moveable_core__RequiredArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::RequiredArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::RequiredArgument> val -> 392
      return (kindVal == 392);
  };
};
// STAMP_llvmo__Pass_O
template <typename FP> struct Cast<llvmo::Pass_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Pass_O low high --> 27 31 
      return ((27 <= kindVal) && (kindVal <= 31));
  };
};
// STAMP_core__Lisp_O
template <typename FP> struct Cast<core::Lisp_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Lisp_O val -> 385
      return (kindVal == 385);
  };
};
// STAMP_core__VaList_dummy_O
template <typename FP> struct Cast<core::VaList_dummy_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::VaList_dummy_O val -> 2
      return (kindVal == 2);
  };
};
// STAMP_core__BlockEnvironment_O
template <typename FP> struct Cast<core::BlockEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::BlockEnvironment_O val -> 124
      return (kindVal == 124);
  };
};
// STAMP_gctools__GCVector_moveable_core__CacheRecord_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::CacheRecord>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::CacheRecord> val -> 391
      return (kindVal == 391);
  };
};
// STAMP_core__CatchEnvironment_O
template <typename FP> struct Cast<core::CatchEnvironment_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::CatchEnvironment_O val -> 129
      return (kindVal == 129);
  };
};
// STAMP_llvmo__DINodeArray_O
template <typename FP> struct Cast<llvmo::DINodeArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::DINodeArray_O val -> 170
      return (kindVal == 170);
  };
};
// STAMP_core__LogicalPathname_O
template <typename FP> struct Cast<core::LogicalPathname_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::LogicalPathname_O val -> 331
      return (kindVal == 331);
  };
};
// STAMP_core__Archive_O
template <typename FP> struct Cast<core::Archive_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Archive_O low high --> 15 19 
      return ((15 <= kindVal) && (kindVal <= 19));
  };
};
// STAMP_llvmo__TargetSubtargetInfo_O
template <typename FP> struct Cast<llvmo::TargetSubtargetInfo_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::TargetSubtargetInfo_O val -> 36
      return (kindVal == 36);
  };
};
// STAMP_llvmo__ConstantDataArray_O
template <typename FP> struct Cast<llvmo::ConstantDataArray_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::ConstantDataArray_O val -> 106
      return (kindVal == 106);
  };
};
// STAMP_llvmo__TargetOptions_O
template <typename FP> struct Cast<llvmo::TargetOptions_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::TargetOptions_O val -> 26
      return (kindVal == 26);
  };
};
// STAMP_core__WrappedPointer_O
template <typename FP> struct Cast<core::WrappedPointer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::WrappedPointer_O val -> 14
      return (kindVal == 14);
  };
};
// STAMP_core__SmallMap_O
template <typename FP> struct Cast<core::SmallMap_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SmallMap_O val -> 13
      return (kindVal == 13);
  };
};
// STAMP_core__Instance_O
template <typename FP> struct Cast<core::Instance_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Instance_O low high --> 10 12 
      if ((10 <= kindVal) && (kindVal <= 12)) return true;
      return (dynamic_cast<core::Instance_O*>(client)!=NULL);
  };
};
// STAMP_clasp_ffi__ForeignTypeSpec_O
template <typename FP> struct Cast<clasp_ffi::ForeignTypeSpec_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clasp_ffi::ForeignTypeSpec_O val -> 9
      return (kindVal == 9);
  };
};
// STAMP_core__SimpleMDArray_byte32_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte32_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_byte32_t_O val -> 295
      return (kindVal == 295);
  };
};
// STAMP_core__Bignum_O
template <typename FP> struct Cast<core::Bignum_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::Bignum_O val -> 340
      return (kindVal == 340);
  };
};
// STAMP_llvmo__LLVMTargetMachine_O
template <typename FP> struct Cast<llvmo::LLVMTargetMachine_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::LLVMTargetMachine_O val -> 114
      return (kindVal == 114);
  };
};
// STAMP_core__PosixTimeDuration_O
template <typename FP> struct Cast<core::PosixTimeDuration_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::PosixTimeDuration_O val -> 8
      return (kindVal == 8);
  };
};
// STAMP_core__ReadTable_O
template <typename FP> struct Cast<core::ReadTable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::ReadTable_O val -> 7
      return (kindVal == 7);
  };
};
// STAMP_core__HashTableEqual_O
template <typename FP> struct Cast<core::HashTableEqual_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::HashTableEqual_O val -> 367
      return (kindVal == 367);
  };
};
// STAMP_llvmo__SequentialType_O
template <typename FP> struct Cast<llvmo::SequentialType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::SequentialType_O low high --> 43 46 
      return ((43 <= kindVal) && (kindVal <= 46));
  };
};
// STAMP_clcenv__VariableType_O
template <typename FP> struct Cast<clcenv::VariableType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range clcenv::VariableType_O val -> 195
      return (kindVal == 195);
  };
};
// STAMP_llvmo__Triple_O
template <typename FP> struct Cast<llvmo::Triple_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::Triple_O val -> 25
      return (kindVal == 25);
  };
};
// STAMP_core__BitVectorNs_O
template <typename FP> struct Cast<core::BitVectorNs_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::BitVectorNs_O val -> 254
      return (kindVal == 254);
  };
};
// STAMP_core__SimpleMDArray_byte64_t_O
template <typename FP> struct Cast<core::SimpleMDArray_byte64_t_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::SimpleMDArray_byte64_t_O val -> 307
      return (kindVal == 307);
  };
};
// STAMP_llvmo__UnaryInstruction_O
template <typename FP> struct Cast<llvmo::UnaryInstruction_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::UnaryInstruction_O low high --> 78 81 
      return ((78 <= kindVal) && (kindVal <= 81));
  };
};
// STAMP_core__CoreExposer_O
template <typename FP> struct Cast<core::CoreExposer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::CoreExposer_O val -> 372
      return (kindVal == 372);
  };
};
// STAMP_llvmo__GlobalValue_O
template <typename FP> struct Cast<llvmo::GlobalValue_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::GlobalValue_O low high --> 98 100 
      return ((98 <= kindVal) && (kindVal <= 100));
  };
};
// STAMP_llvmo__PointerType_O
template <typename FP> struct Cast<llvmo::PointerType_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range llvmo::PointerType_O val -> 44
      return (kindVal == 44);
  };
};
// STAMP_gctools__GCArray_moveable_unsigned_int_
template <typename FP> struct Cast<gctools::GCArray_moveable<unsigned int>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCArray_moveable<unsigned int> val -> 390
      return (kindVal == 390);
  };
};
// STAMP_core__WeakHashTable_O
template <typename FP> struct Cast<core::WeakHashTable_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::WeakHashTable_O low high --> 5 6 
      return ((5 <= kindVal) && (kindVal <= 6));
  };
};
// STAMP_gctools__GCVector_moveable_core__KeywordArgument_
template <typename FP> struct Cast<gctools::GCVector_moveable<core::KeywordArgument>*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range gctools::GCVector_moveable<core::KeywordArgument> val -> 389
      return (kindVal == 389);
  };
};
// STAMP_core__TwoWayStream_O
template <typename FP> struct Cast<core::TwoWayStream_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::TwoWayStream_O val -> 350
      return (kindVal == 350);
  };
};
// STAMP_core__MultiStringBuffer_O
template <typename FP> struct Cast<core::MultiStringBuffer_O*,FP> {
  inline static bool isA(FP client) {
      gctools::Header_s* header = reinterpret_cast<gctools::Header_s*>(ClientPtrToBasePtr(client));
      int kindVal = header->stamp();
    // IsA-stamp-range core::MultiStringBuffer_O val -> 4
      return (kindVal == 4);
  };
};
#endif // defined(GC_DYNAMIC_CAST)
#if defined(GC_TYPEQ)
      ADD_SINGLE_TYPEQ_TEST(llvmo::NamedMDNode_O,115);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_size_t_O,277);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte16_t_O,235);
      ADD_SINGLE_TYPEQ_TEST(mp::ConcurrentQueue_O,382);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_fixnum_O,293);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte64_t_O,224);
      ADD_RANGE_TYPEQ_TEST(llvmo::TargetMachine_O,llvmo::LLVMTargetMachine_O,113,114);
      ADD_RANGE_TYPEQ_TEST(llvmo::Value_O,llvmo::BasicBlock_O,75,112);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleBaseString_O,231);
      ADD_SINGLE_TYPEQ_TEST(clbind::ClassRegistry_O,381);
      ADD_RANGE_TYPEQ_TEST(core::Integer_O,core::Fixnum_dummy_O,339,341);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int32_t_O,301);
      ADD_RANGE_TYPEQ_TEST(llvmo::Metadata_O,llvmo::DISubroutineType_O,58,74);
      ADD_SINGLE_TYPEQ_TEST(asttooling::AstVisitor_O,387);
      ADD_SINGLE_TYPEQ_TEST(mp::Process_O,213);
      ADD_SINGLE_TYPEQ_TEST(core::Record_O,380);
      ADD_RANGE_TYPEQ_TEST(core::MDArray_O,core::MDArrayBaseChar_O,253,322);
      ADD_RANGE_TYPEQ_TEST(core::LightUserData_O,core::UserData_O,378,379);
      ADD_SINGLE_TYPEQ_TEST(clcenv::FunctionIgnore_O,212);
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayT_O,275);
      ADD_SINGLE_TYPEQ_TEST(clbind::ClassRep_O,12);
      ADD_SINGLE_TYPEQ_TEST(core::DirectoryEntry_O,377);
      ADD_SINGLE_TYPEQ_TEST(clcenv::GlobalFunctionInfo_O,181);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantInt_O,110);
      ADD_SINGLE_TYPEQ_TEST(llvmo::Linker_O,57);
      ADD_SINGLE_TYPEQ_TEST(core::SourceFileInfo_O,376);
      ADD_SINGLE_TYPEQ_TEST(core::IntArray_O,375);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int16_t_O,310);
      ADD_RANGE_TYPEQ_TEST(llvmo::CompositeType_O,llvmo::StructType_O,42,47);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayT_O,299);
      ADD_SINGLE_TYPEQ_TEST(llvmo::BranchInst_O,91);
      ADD_SINGLE_TYPEQ_TEST(core::SourcePosInfo_O,374);
      ADD_RANGE_TYPEQ_TEST(clcenv::Entry_O,clcenv::FunctionIgnore_O,194,212);
      ADD_RANGE_TYPEQ_TEST(core::ActivationFrame_O,core::FunctionFrame_O,134,136);
      ADD_SINGLE_TYPEQ_TEST(llvmo::AllocaInst_O,81);
      ADD_RANGE_TYPEQ_TEST(llvmo::PassManagerBase_O,llvmo::PassManager_O,54,56);
      ADD_SINGLE_TYPEQ_TEST(llvmo::LoadInst_O,80);
      ADD_SINGLE_TYPEQ_TEST(core::StandardClassCreator_O,156);
      ADD_RANGE_TYPEQ_TEST(core::Exposer_O,asttooling::AsttoolingExposer_O,371,373);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantStruct_O,109);
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchCxxEffectiveMethodFunction_O,147);
      ADD_SINGLE_TYPEQ_TEST(core::DirectoryIterator_O,217);
      ADD_SINGLE_TYPEQ_TEST(clcenv::Macro_O,211);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DISubroutineType_O,74);
      ADD_RANGE_TYPEQ_TEST(core::LexicalEnvironment_O,core::FunctionContainerEnvironment_O,122,133);
      ADD_RANGE_TYPEQ_TEST(core::HashTable_O,core::HashTableEql_O,366,370);
      ADD_SINGLE_TYPEQ_TEST(clcenv::LambdaNameInfo_O,180);
      ADD_SINGLE_TYPEQ_TEST(core::PosixTime_O,365);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleBitVector_O,246);
      ADD_SINGLE_TYPEQ_TEST(clcenv::SpecialVariable_O,210);
      ADD_SINGLE_TYPEQ_TEST(core::FunctionContainerEnvironment_O,133);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int8_t_O,239);
      ADD_RANGE_TYPEQ_TEST(clcenv::VariableInfo_O,clcenv::ConstantVariableInfo_O,182,186);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ResumeInst_O,90);
      ADD_SINGLE_TYPEQ_TEST(llvmo::Function_O,100);
      ADD_RANGE_TYPEQ_TEST(llvmo::DIType_O,llvmo::DISubroutineType_O,70,74);
      ADD_SINGLE_TYPEQ_TEST(core::InvocationHistoryFrameIterator_O,364);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_size_t_O,250);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayFloat_O,318);
      ADD_RANGE_TYPEQ_TEST(llvmo::DIScope_O,llvmo::DISubroutineType_O,63,74);
      ADD_SINGLE_TYPEQ_TEST(core::FileStatus_O,363);
      ADD_SINGLE_TYPEQ_TEST(llvmo::IndirectBrInst_O,89);
      ADD_SINGLE_TYPEQ_TEST(clcenv::LexicalVariable_O,209);
      ADD_SINGLE_TYPEQ_TEST(clcenv::VariableDynamicExtent_O,208);
      ADD_SINGLE_TYPEQ_TEST(llvmo::PHINode_O,96);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantArray_O,108);
      ADD_SINGLE_TYPEQ_TEST(llvmo::IRBuilder_O,49);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ClaspJIT_O,362);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayBaseChar_O,305);
      ADD_SINGLE_TYPEQ_TEST(core::Package_O,361);
      ADD_SINGLE_TYPEQ_TEST(clcenv::GlobalEnvironment_O,207);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte8_t_O,243);
      ADD_RANGE_TYPEQ_TEST(llvmo::DILexicalBlockBase_O,llvmo::DILexicalBlock_O,66,67);
      ADD_RANGE_TYPEQ_TEST(core::SimpleMDArray_O,core::SimpleMDArrayFloat_O,287,318);
      ADD_RANGE_TYPEQ_TEST(llvmo::MDNode_O,llvmo::DISubroutineType_O,61,74);
      ADD_RANGE_TYPEQ_TEST(core::Stream_O,core::EchoStream_O,348,360);
      ADD_SINGLE_TYPEQ_TEST(mp::RecursiveMutex_O,189);
      ADD_SINGLE_TYPEQ_TEST(clcenv::FunctionType_O,206);
      ADD_SINGLE_TYPEQ_TEST(clcenv::Block_O,205);
      ADD_SINGLE_TYPEQ_TEST(llvmo::VAArgInst_O,79);
      ADD_SINGLE_TYPEQ_TEST(llvmo::MDString_O,60);
      ADD_SINGLE_TYPEQ_TEST(core::ShortFloat_O,346);
      ADD_RANGE_TYPEQ_TEST(core::Number_O,core::Complex_O,335,347);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_fixnum_O,320);
      ADD_RANGE_TYPEQ_TEST(core::T_O,core::Cons_O,1,383);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DICompileUnit_O,69);
      ADD_SINGLE_TYPEQ_TEST(core::SharpEqualWrapper_O,334);
      ADD_SINGLE_TYPEQ_TEST(clcenv::Tag_O,204);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayDouble_O,303);
      ADD_SINGLE_TYPEQ_TEST(clcenv::ConstantVariableInfo_O,186);
      ADD_SINGLE_TYPEQ_TEST(core::LoadTimeValues_O,333);
      ADD_SINGLE_TYPEQ_TEST(core::Cache_O,332);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIFile_O,68);
      ADD_RANGE_TYPEQ_TEST(core::AbstractSimpleVector_O,core::SimpleVectorDouble_O,220,252);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte16_t_O,297);
      ADD_RANGE_TYPEQ_TEST(core::Pathname_O,core::LogicalPathname_O,330,331);
      ADD_SINGLE_TYPEQ_TEST(llvmo::FunctionPass_O,31);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DataLayout_O,329);
      ADD_SINGLE_TYPEQ_TEST(core::Str8Ns_O,271);
      ADD_SINGLE_TYPEQ_TEST(llvmo::BasicBlock_O,112);
      ADD_SINGLE_TYPEQ_TEST(core::SourceManager_O,328);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int8_t_O,289);
      ADD_SINGLE_TYPEQ_TEST(llvmo::UndefValue_O,107);
      ADD_SINGLE_TYPEQ_TEST(llvmo::EngineBuilder_O,53);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte32_t_O,286);
      ADD_SINGLE_TYPEQ_TEST(core::Character_dummy_O,327);
      ADD_SINGLE_TYPEQ_TEST(core::TagbodyEnvironment_O,127);
      ADD_SINGLE_TYPEQ_TEST(core::ConsStepper_O,160);
      ADD_RANGE_TYPEQ_TEST(core::CompileTimeEnvironment_O,core::FunctionContainerEnvironment_O,128,133);
      ADD_RANGE_TYPEQ_TEST(llvmo::Constant_O,llvmo::ConstantInt_O,97,110);
      ADD_SINGLE_TYPEQ_TEST(core::SpecialForm_O,157);
      ADD_SINGLE_TYPEQ_TEST(core::Path_O,326);
      ADD_SINGLE_TYPEQ_TEST(mp::BlockingConcurrentQueue_O,325);
      ADD_SINGLE_TYPEQ_TEST(mp::SharedMutex_O,193);
      ADD_SINGLE_TYPEQ_TEST(clcenv::SpecialOperatorInfo_O,179);
      ADD_SINGLE_TYPEQ_TEST(core::SexpSaveArchive_O,17);
      ADD_SINGLE_TYPEQ_TEST(clcenv::SymbolMacroInfo_O,185);
      ADD_SINGLE_TYPEQ_TEST(core::NativeVector_int_O,192);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIBasicType_O,73);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIBuilder_O,52);
      ADD_SINGLE_TYPEQ_TEST(core::InstanceCreator_O,155);
      ADD_SINGLE_TYPEQ_TEST(llvmo::APInt_O,51);
      ADD_RANGE_TYPEQ_TEST(core::Symbol_O,core::Null_O,323,324);
      ADD_SINGLE_TYPEQ_TEST(llvmo::APFloat_O,50);
      ADD_RANGE_TYPEQ_TEST(clcenv::FunctionInfo_O,clcenv::GlobalFunctionInfo_O,175,181);
      ADD_SINGLE_TYPEQ_TEST(core::IOStreamStream_O,359);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayCharacter_O,291);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleCharacterString_O,229);
      ADD_SINGLE_TYPEQ_TEST(clcenv::LambdaName_O,203);
      ADD_RANGE_TYPEQ_TEST(core::Array_O,core::MDArrayBaseChar_O,219,322);
      ADD_SINGLE_TYPEQ_TEST(clcenv::LocalFunctionInfo_O,178);
      ADD_SINGLE_TYPEQ_TEST(llvmo::InsertPoint_O,218);
      ADD_SINGLE_TYPEQ_TEST(llvmo::Argument_O,111);
      ADD_SINGLE_TYPEQ_TEST(clcenv::Optimize_O,202);
      ADD_SINGLE_TYPEQ_TEST(core::StrWNs_O,269);
      ADD_RANGE_TYPEQ_TEST(core::Iterator_O,core::DirectoryIterator_O,215,217);
      ADD_RANGE_TYPEQ_TEST(llvmo::IRBuilderBase_O,llvmo::IRBuilder_O,48,49);
      ADD_SINGLE_TYPEQ_TEST(core::EchoStream_O,360);
      ADD_SINGLE_TYPEQ_TEST(core::Null_O,324);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArrayBit_O,308);
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayBit_O,280);
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchMethod_O,214);
      ADD_SINGLE_TYPEQ_TEST(clcenv::Closure_O,201);
      ADD_SINGLE_TYPEQ_TEST(clcenv::Inline_O,200);
      ADD_SINGLE_TYPEQ_TEST(clcenv::LexicalVariableInfo_O,184);
      ADD_SINGLE_TYPEQ_TEST(core::NativeVector_double_O,191);
      ADD_SINGLE_TYPEQ_TEST(core::GlueEnvironment_O,121);
      ADD_RANGE_TYPEQ_TEST(llvmo::DILocalScope_O,llvmo::DILexicalBlock_O,64,67);
      ADD_RANGE_TYPEQ_TEST(core::CxxObject_O,mp::Process_O,169,213);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ReturnInst_O,88);
      ADD_SINGLE_TYPEQ_TEST(llvmo::FunctionType_O,41);
      ADD_SINGLE_TYPEQ_TEST(clbind::DummyCreator_O,154);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte16_t_O,284);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DITypeRefArray_O,190);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DILexicalBlock_O,67);
      ADD_RANGE_TYPEQ_TEST(core::Pointer_O,clasp_ffi::ForeignData_O,167,168);
      ADD_RANGE_TYPEQ_TEST(llvmo::Type_O,llvmo::StructType_O,39,47);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVectorFloat_O,222);
      ADD_RANGE_TYPEQ_TEST(mp::Mutex_O,mp::RecursiveMutex_O,188,189);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ModuleHandle_O,166);
      ADD_SINGLE_TYPEQ_TEST(core::RecursiveDirectoryIterator_O,216);
      ADD_SINGLE_TYPEQ_TEST(clcenv::BlockInfo_O,174);
      ADD_SINGLE_TYPEQ_TEST(llvmo::UnreachableInst_O,87);
      ADD_RANGE_TYPEQ_TEST(core::SNode_O,core::LeafSNode_O,163,165);
      ADD_SINGLE_TYPEQ_TEST(core::VectorStepper_O,159);
      ADD_RANGE_TYPEQ_TEST(core::LoadArchive_O,core::SexpLoadArchive_O,18,19);
      ADD_SINGLE_TYPEQ_TEST(core::StringInputStream_O,356);
      ADD_RANGE_TYPEQ_TEST(core::Float_O,core::ShortFloat_O,342,346);
      ADD_RANGE_TYPEQ_TEST(llvmo::ModulePass_O,llvmo::TargetLibraryInfoWrapperPass_O,28,30);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DIDerivedType_O,72);
      ADD_SINGLE_TYPEQ_TEST(clbind::ConstructorCreator_O,153);
      ADD_SINGLE_TYPEQ_TEST(core::FunctionFrame_O,136);
      ADD_SINGLE_TYPEQ_TEST(core::LongFloat_O,345);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int64_t_O,226);
      ADD_SINGLE_TYPEQ_TEST(core::TranslationFunctor_O,144);
      ADD_RANGE_TYPEQ_TEST(llvmo::ConstantDataSequential_O,llvmo::ConstantDataArray_O,105,106);
      ADD_SINGLE_TYPEQ_TEST(llvmo::TargetLibraryInfoWrapperPass_O,30);
      ADD_SINGLE_TYPEQ_TEST(llvmo::StoreInst_O,95);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DebugLoc_O,162);
      ADD_RANGE_TYPEQ_TEST(llvmo::User_O,llvmo::ConstantInt_O,76,110);
      ADD_SINGLE_TYPEQ_TEST(core::WeakPointer_O,161);
      ADD_SINGLE_TYPEQ_TEST(core::LeafSNode_O,165);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int16_t_O,258);
      ADD_SINGLE_TYPEQ_TEST(clcenv::OptimizeInfo_O,173);
      ADD_SINGLE_TYPEQ_TEST(core::IOFileStream_O,358);
      ADD_SINGLE_TYPEQ_TEST(llvmo::FenceInst_O,94);
      ADD_RANGE_TYPEQ_TEST(core::RuntimeVisibleEnvironment_O,core::TagbodyEnvironment_O,123,127);
      ADD_SINGLE_TYPEQ_TEST(core::ValueFrame_O,135);
      ADD_SINGLE_TYPEQ_TEST(llvmo::AtomicCmpXchgInst_O,93);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte8_t_O,312);
      ADD_RANGE_TYPEQ_TEST(core::SequenceStepper_O,core::ConsStepper_O,158,160);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int32_t_O,245);
      ADD_RANGE_TYPEQ_TEST(core::SaveArchive_O,core::SexpSaveArchive_O,16,17);
      ADD_SINGLE_TYPEQ_TEST(core::Complex_O,347);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantPointerNull_O,104);
      ADD_RANGE_TYPEQ_TEST(llvmo::Instruction_O,llvmo::PHINode_O,77,96);
      ADD_SINGLE_TYPEQ_TEST(llvmo::VectorType_O,46);
      ADD_RANGE_TYPEQ_TEST(core::FileStream_O,core::IOStreamStream_O,357,359);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ValueAsMetadata_O,59);
      ADD_RANGE_TYPEQ_TEST(core::Rational_O,core::Fixnum_dummy_O,337,341);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantExpr_O,103);
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayCharacter_O,262);
      ADD_SINGLE_TYPEQ_TEST(llvmo::LandingPadInst_O,92);
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchEffectiveMethodFunction_O,146);
      ADD_RANGE_TYPEQ_TEST(core::Function_O,core::SpecialForm_O,138,157);
      ADD_SINGLE_TYPEQ_TEST(llvmo::StructType_O,47);
      ADD_SINGLE_TYPEQ_TEST(clcenv::FunctionDynamicExtent_O,199);
      ADD_SINGLE_TYPEQ_TEST(core::RandomState_O,137);
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayFloat_O,266);
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEql_O,370);
      ADD_SINGLE_TYPEQ_TEST(llvmo::Target_O,38);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte64_t_O,256);
      ADD_SINGLE_TYPEQ_TEST(mp::ConditionVariable_O,187);
      ADD_RANGE_TYPEQ_TEST(core::Real_O,core::ShortFloat_O,336,346);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_fixnum_O,237);
      ADD_SINGLE_TYPEQ_TEST(core::FuncallableInstanceCreator_O,152);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_byte32_t_O,248);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_byte8_t_O,279);
      ADD_SINGLE_TYPEQ_TEST(core::SexpLoadArchive_O,19);
      ADD_SINGLE_TYPEQ_TEST(core::SingleDispatchGenericFunctionClosure_O,145);
      ADD_SINGLE_TYPEQ_TEST(core::StringOutputStream_O,355);
      ADD_RANGE_TYPEQ_TEST(core::AnsiStream_O,core::EchoStream_O,349,360);
      ADD_SINGLE_TYPEQ_TEST(core::BranchSNode_O,164);
      ADD_RANGE_TYPEQ_TEST(llvmo::TerminatorInst_O,llvmo::BranchInst_O,84,91);
      ADD_SINGLE_TYPEQ_TEST(llvmo::Module_O,37);
      ADD_RANGE_TYPEQ_TEST(core::BuiltinClosure_O,core::TranslationFunctor_O,143,144);
      ADD_SINGLE_TYPEQ_TEST(core::SingleFloat_dummy_O,344);
      ADD_SINGLE_TYPEQ_TEST(core::ValueEnvironment_O,126);
      ADD_SINGLE_TYPEQ_TEST(core::CxxMethodFunction_O,142);
      ADD_SINGLE_TYPEQ_TEST(llvmo::InvokeInst_O,86);
      ADD_RANGE_TYPEQ_TEST(core::Environment_O,core::FunctionFrame_O,120,136);
      ADD_SINGLE_TYPEQ_TEST(clcenv::SymbolMacro_O,198);
      ADD_SINGLE_TYPEQ_TEST(llvmo::AttributeSet_O,119);
      ADD_SINGLE_TYPEQ_TEST(clcenv::LocalMacroInfo_O,177);
      ADD_SINGLE_TYPEQ_TEST(llvmo::AtomicRMWInst_O,83);
      ADD_SINGLE_TYPEQ_TEST(llvmo::PassManager_O,56);
      ADD_RANGE_TYPEQ_TEST(core::StrNs_O,core::Str8Ns_O,267,271);
      ADD_SINGLE_TYPEQ_TEST(clasp_ffi::ForeignData_O,168);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_O,241);
      ADD_SINGLE_TYPEQ_TEST(core::UnwindProtectEnvironment_O,132);
      ADD_SINGLE_TYPEQ_TEST(clcenv::GlobalMacroInfo_O,176);
      ADD_SINGLE_TYPEQ_TEST(llvmo::CallInst_O,82);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DISubprogram_O,65);
      ADD_SINGLE_TYPEQ_TEST(llvmo::FunctionPassManager_O,55);
      ADD_SINGLE_TYPEQ_TEST(core::DoubleFloat_O,343);
      ADD_RANGE_TYPEQ_TEST(clcenv::Info_O,clcenv::ConstantVariableInfo_O,172,186);
      ADD_RANGE_TYPEQ_TEST(core::Creator_O,core::StandardClassCreator_O,149,156);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ArrayType_O,45);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_int64_t_O,316);
      ADD_RANGE_TYPEQ_TEST(core::SimpleString_O,core::SimpleBaseString_O,227,231);
      ADD_RANGE_TYPEQ_TEST(llvmo::MCSubtargetInfo_O,llvmo::TargetSubtargetInfo_O,35,36);
      ADD_SINGLE_TYPEQ_TEST(llvmo::BlockAddress_O,102);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DICompositeType_O,71);
      ADD_SINGLE_TYPEQ_TEST(core::FunctionValueEnvironment_O,125);
      ADD_SINGLE_TYPEQ_TEST(core::DerivableCxxClassCreator_O,151);
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEq_O,369);
      ADD_RANGE_TYPEQ_TEST(core::StringStream_O,core::StringInputStream_O,354,356);
      ADD_SINGLE_TYPEQ_TEST(core::Sigset_O,118);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int32_t_O,264);
      ADD_SINGLE_TYPEQ_TEST(llvmo::IntegerType_O,40);
      ADD_SINGLE_TYPEQ_TEST(asttooling::AsttoolingExposer_O,373);
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEqualp_O,368);
      ADD_SINGLE_TYPEQ_TEST(core::LambdaListHandler_O,117);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int64_t_O,282);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_size_t_O,314);
      ADD_SINGLE_TYPEQ_TEST(core::ConcatenatedStream_O,353);
      ADD_SINGLE_TYPEQ_TEST(core::SmallMultimap_O,116);
      ADD_SINGLE_TYPEQ_TEST(llvmo::PassManagerBuilder_O,34);
      ADD_SINGLE_TYPEQ_TEST(core::SymbolMacroletEnvironment_O,131);
      ADD_SINGLE_TYPEQ_TEST(core::Fixnum_dummy_O,341);
      ADD_SINGLE_TYPEQ_TEST(core::MDArray_int8_t_O,260);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantFP_O,101);
      ADD_RANGE_TYPEQ_TEST(core::SingleDispatchMethodFunction_O,core::CxxMethodFunction_O,141,142);
      ADD_SINGLE_TYPEQ_TEST(core::MacroletEnvironment_O,130);
      ADD_SINGLE_TYPEQ_TEST(core::Cons_O,383);
      ADD_RANGE_TYPEQ_TEST(llvmo::ImmutablePass_O,llvmo::TargetLibraryInfoWrapperPass_O,29,30);
      ADD_SINGLE_TYPEQ_TEST(core::FuncallableInstance_O,148);
      ADD_SINGLE_TYPEQ_TEST(llvmo::LLVMContext_O,33);
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayDouble_O,273);
      ADD_SINGLE_TYPEQ_TEST(core::SynonymStream_O,352);
      ADD_SINGLE_TYPEQ_TEST(core::WeakKeyHashTable_O,6);
      ADD_SINGLE_TYPEQ_TEST(core::Ratio_O,338);
      ADD_SINGLE_TYPEQ_TEST(core::MDArrayBaseChar_O,322);
      ADD_SINGLE_TYPEQ_TEST(core::UserData_O,379);
      ADD_SINGLE_TYPEQ_TEST(llvmo::GlobalVariable_O,99);
      ADD_SINGLE_TYPEQ_TEST(core::ClosureWithSlots_O,140);
      ADD_RANGE_TYPEQ_TEST(llvmo::DINode_O,llvmo::DISubroutineType_O,62,74);
      ADD_RANGE_TYPEQ_TEST(core::ExternalObject_O,llvmo::NamedMDNode_O,24,115);
      ADD_SINGLE_TYPEQ_TEST(core::BroadcastStream_O,351);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ExecutionEngine_O,32);
      ADD_SINGLE_TYPEQ_TEST(core::ClassRepCreator_O,150);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVector_int16_t_O,233);
      ADD_RANGE_TYPEQ_TEST(core::General_O,mp::ConcurrentQueue_O,3,382);
      ADD_SINGLE_TYPEQ_TEST(clcenv::Function_O,197);
      ADD_SINGLE_TYPEQ_TEST(core::DerivableCxxObject_O,11);
      ADD_SINGLE_TYPEQ_TEST(llvmo::Attribute_O,23);
      ADD_SINGLE_TYPEQ_TEST(core::WeakKeyMapping_O,22);
      ADD_RANGE_TYPEQ_TEST(core::Closure_O,core::SingleDispatchCxxEffectiveMethodFunction_O,139,147);
      ADD_SINGLE_TYPEQ_TEST(core::Reader_O,21);
      ADD_SINGLE_TYPEQ_TEST(core::SymbolToEnumConverter_O,20);
      ADD_SINGLE_TYPEQ_TEST(llvmo::SwitchInst_O,85);
      ADD_SINGLE_TYPEQ_TEST(clcenv::VariableIgnore_O,196);
      ADD_SINGLE_TYPEQ_TEST(clcenv::SpecialVariableInfo_O,183);
      ADD_SINGLE_TYPEQ_TEST(core::NativeVector_float_O,171);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleVectorDouble_O,252);
      ADD_RANGE_TYPEQ_TEST(llvmo::Pass_O,llvmo::FunctionPass_O,27,31);
      ADD_SINGLE_TYPEQ_TEST(core::VaList_dummy_O,2);
      ADD_SINGLE_TYPEQ_TEST(core::BlockEnvironment_O,124);
      ADD_SINGLE_TYPEQ_TEST(core::CatchEnvironment_O,129);
      ADD_SINGLE_TYPEQ_TEST(llvmo::DINodeArray_O,170);
      ADD_SINGLE_TYPEQ_TEST(core::LogicalPathname_O,331);
      ADD_RANGE_TYPEQ_TEST(core::Archive_O,core::SexpLoadArchive_O,15,19);
      ADD_SINGLE_TYPEQ_TEST(llvmo::TargetSubtargetInfo_O,36);
      ADD_SINGLE_TYPEQ_TEST(llvmo::ConstantDataArray_O,106);
      ADD_SINGLE_TYPEQ_TEST(llvmo::TargetOptions_O,26);
      ADD_SINGLE_TYPEQ_TEST(core::WrappedPointer_O,14);
      ADD_SINGLE_TYPEQ_TEST(core::SmallMap_O,13);
      ADD_RANGE_TYPEQ_TEST_INSTANCE(core::Instance_O,clbind::ClassRep_O,10,12);
      ADD_SINGLE_TYPEQ_TEST(clasp_ffi::ForeignTypeSpec_O,9);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte32_t_O,295);
      ADD_SINGLE_TYPEQ_TEST(core::Bignum_O,340);
      ADD_SINGLE_TYPEQ_TEST(llvmo::LLVMTargetMachine_O,114);
      ADD_SINGLE_TYPEQ_TEST(core::PosixTimeDuration_O,8);
      ADD_SINGLE_TYPEQ_TEST(core::ReadTable_O,7);
      ADD_SINGLE_TYPEQ_TEST(core::HashTableEqual_O,367);
      ADD_RANGE_TYPEQ_TEST(llvmo::SequentialType_O,llvmo::VectorType_O,43,46);
      ADD_SINGLE_TYPEQ_TEST(clcenv::VariableType_O,195);
      ADD_SINGLE_TYPEQ_TEST(llvmo::Triple_O,25);
      ADD_SINGLE_TYPEQ_TEST(core::BitVectorNs_O,254);
      ADD_SINGLE_TYPEQ_TEST(core::SimpleMDArray_byte64_t_O,307);
      ADD_RANGE_TYPEQ_TEST(llvmo::UnaryInstruction_O,llvmo::AllocaInst_O,78,81);
      ADD_SINGLE_TYPEQ_TEST(core::CoreExposer_O,372);
      ADD_RANGE_TYPEQ_TEST(llvmo::GlobalValue_O,llvmo::Function_O,98,100);
      ADD_SINGLE_TYPEQ_TEST(llvmo::PointerType_O,44);
      ADD_RANGE_TYPEQ_TEST(core::WeakHashTable_O,core::WeakKeyHashTable_O,5,6);
      ADD_SINGLE_TYPEQ_TEST(core::TwoWayStream_O,350);
      ADD_SINGLE_TYPEQ_TEST(core::MultiStringBuffer_O,4);
#endif // defined(GC_TYPEQ)
#if defined(GC_STAMP_SELECTORS)
template <> class gctools::GCStamp<llvmo::NamedMDNode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__NamedMDNode_O ;
};
template <> class gctools::GCStamp<core::MDArray_size_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_size_t_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte16_t_O ;
};
template <> class gctools::GCStamp<mp::ConcurrentQueue_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__ConcurrentQueue_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<float>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_float_ ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned short>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_short_ ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_fixnum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_fixnum_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte64_t_O ;
};
template <> class gctools::GCStamp<llvmo::TargetMachine_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetMachine_O ;
};
template <> class gctools::GCStamp<llvmo::Value_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Value_O ;
};
template <> class gctools::GCStamp<core::SimpleBaseString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleBaseString_O ;
};
template <> class gctools::GCStamp<clbind::ClassRegistry_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__ClassRegistry_O ;
};
template <> class gctools::GCStamp<core::Integer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Integer_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int32_t_O ;
};
template <> class gctools::GCStamp<llvmo::Metadata_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Metadata_O ;
};
template <> class gctools::GCStamp<asttooling::AstVisitor_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_asttooling__AstVisitor_O ;
};
template <> class gctools::GCStamp<mp::Process_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__Process_O ;
};
template <> class gctools::GCStamp<core::Record_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Record_O ;
};
template <> class gctools::GCStamp<core::MDArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::OptionalArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__OptionalArgument_ ;
};
template <> class gctools::GCStamp<core::LightUserData_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LightUserData_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::T_O *>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__T_O___ ;
};
template <> class gctools::GCStamp<clcenv::FunctionIgnore_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__FunctionIgnore_O ;
};
template <> class gctools::GCStamp<core::MDArrayT_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayT_O ;
};
template <> class gctools::GCStamp<clbind::ClassRep_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__ClassRep_O ;
};
template <> class gctools::GCStamp<core::DirectoryEntry_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DirectoryEntry_O ;
};
template <> class gctools::GCStamp<clcenv::GlobalFunctionInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__GlobalFunctionInfo_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantInt_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantInt_O ;
};
template <> class gctools::GCStamp<llvmo::Linker_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Linker_O ;
};
template <> class gctools::GCStamp<core::SourceFileInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SourceFileInfo_O ;
};
template <> class gctools::GCStamp<core::IntArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__IntArray_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<double>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_double_ ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int16_t_O ;
};
template <> class gctools::GCStamp<llvmo::CompositeType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__CompositeType_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayT_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayT_O ;
};
template <> class gctools::GCStamp<llvmo::BranchInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__BranchInst_O ;
};
template <> class gctools::GCStamp<core::SourcePosInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SourcePosInfo_O ;
};
template <> class gctools::GCStamp<clcenv::Entry_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Entry_O ;
};
template <> class gctools::GCStamp<core::ActivationFrame_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ActivationFrame_O ;
};
template <> class gctools::GCStamp<llvmo::AllocaInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AllocaInst_O ;
};
template <> class gctools::GCStamp<llvmo::PassManagerBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PassManagerBase_O ;
};
template <> class gctools::GCStamp<llvmo::LoadInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LoadInst_O ;
};
template <> class gctools::GCStamp<core::StandardClassCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StandardClassCreator_O ;
};
template <> class gctools::GCStamp<core::Exposer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Exposer_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantStruct_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantStruct_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchCxxEffectiveMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O ;
};
template <> class gctools::GCStamp<core::DirectoryIterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DirectoryIterator_O ;
};
template <> class gctools::GCStamp<clcenv::Macro_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Macro_O ;
};
template <> class gctools::GCStamp<clbind::detail::class_map> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__detail__class_map ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__ ;
};
template <> class gctools::GCStamp<llvmo::DISubroutineType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DISubroutineType_O ;
};
template <> class gctools::GCStamp<core::LexicalEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LexicalEnvironment_O ;
};
template <> class gctools::GCStamp<core::HashTable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTable_O ;
};
template <> class gctools::GCStamp<clcenv::LambdaNameInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__LambdaNameInfo_O ;
};
template <> class gctools::GCStamp<core::PosixTime_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__PosixTime_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<float>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_float_ ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__ ;
};
template <> class gctools::GCStamp<core::SimpleBitVector_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleBitVector_O ;
};
template <> class gctools::GCStamp<clcenv::SpecialVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__SpecialVariable_O ;
};
template <> class gctools::GCStamp<core::FunctionContainerEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FunctionContainerEnvironment_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int8_t_O ;
};
template <> class gctools::GCStamp<clcenv::VariableInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__VariableInfo_O ;
};
template <> class gctools::GCStamp<llvmo::ResumeInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ResumeInst_O ;
};
template <> class gctools::GCStamp<llvmo::Function_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Function_O ;
};
template <> class gctools::GCStamp<llvmo::DIType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIType_O ;
};
template <> class gctools::GCStamp<core::InvocationHistoryFrameIterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__InvocationHistoryFrameIterator_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__ ;
};
template <> class gctools::GCStamp<core::SimpleVector_size_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_size_t_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayFloat_O ;
};
template <> class gctools::GCStamp<llvmo::DIScope_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIScope_O ;
};
template <> class gctools::GCStamp<core::FileStatus_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FileStatus_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::SymbolClassPair>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__SymbolClassPair_ ;
};
template <> class gctools::GCStamp<llvmo::IndirectBrInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IndirectBrInst_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__ ;
};
template <> class gctools::GCStamp<clcenv::LexicalVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__LexicalVariable_O ;
};
template <> class gctools::GCStamp<clcenv::VariableDynamicExtent_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__VariableDynamicExtent_O ;
};
template <> class gctools::GCStamp<llvmo::PHINode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PHINode_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantArray_O ;
};
template <> class gctools::GCStamp<llvmo::IRBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IRBuilder_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__ ;
};
template <> class gctools::GCStamp<llvmo::ClaspJIT_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ClaspJIT_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayBaseChar_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayBaseChar_O ;
};
template <> class gctools::GCStamp<core::Package_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Package_O ;
};
template <> class gctools::GCStamp<clcenv::GlobalEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__GlobalEnvironment_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte8_t_O ;
};
template <> class gctools::GCStamp<llvmo::DILexicalBlockBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILexicalBlockBase_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_O ;
};
template <> class gctools::GCStamp<llvmo::MDNode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MDNode_O ;
};
template <> class gctools::GCStamp<core::Stream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Stream_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<int>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_int_ ;
};
template <> class gctools::GCStamp<mp::RecursiveMutex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__RecursiveMutex_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<long>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_long_ ;
};
template <> class gctools::GCStamp<clcenv::FunctionType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__FunctionType_O ;
};
template <> class gctools::GCStamp<clcenv::Block_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Block_O ;
};
template <> class gctools::GCStamp<llvmo::VAArgInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__VAArgInst_O ;
};
template <> class gctools::GCStamp<llvmo::MDString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MDString_O ;
};
template <> class gctools::GCStamp<core::ShortFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ShortFloat_O ;
};
template <> class gctools::GCStamp<core::Number_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Number_O ;
};
template <> class gctools::GCStamp<core::MDArray_fixnum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_fixnum_O ;
};
template <> class gctools::GCStamp<core::T_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__T_O ;
};
template <> class gctools::GCStamp<llvmo::DICompileUnit_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DICompileUnit_O ;
};
template <> class gctools::GCStamp<core::SharpEqualWrapper_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SharpEqualWrapper_O ;
};
template <> class gctools::GCStamp<clcenv::Tag_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Tag_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayDouble_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayDouble_O ;
};
template <> class gctools::GCStamp<clcenv::ConstantVariableInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__ConstantVariableInfo_O ;
};
template <> class gctools::GCStamp<core::LoadTimeValues_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LoadTimeValues_O ;
};
template <> class gctools::GCStamp<core::Cache_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Cache_O ;
};
template <> class gctools::GCStamp<llvmo::DIFile_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIFile_O ;
};
template <> class gctools::GCStamp<core::AbstractSimpleVector_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__AbstractSimpleVector_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte16_t_O ;
};
template <> class gctools::GCStamp<core::Pathname_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Pathname_O ;
};
template <> class gctools::GCStamp<llvmo::FunctionPass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FunctionPass_O ;
};
template <> class gctools::GCStamp<llvmo::DataLayout_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DataLayout_O ;
};
template <> class gctools::GCStamp<core::Str8Ns_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Str8Ns_O ;
};
template <> class gctools::GCStamp<llvmo::BasicBlock_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__BasicBlock_O ;
};
template <> class gctools::GCStamp<core::SourceManager_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SourceManager_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int8_t_O ;
};
template <> class gctools::GCStamp<llvmo::UndefValue_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__UndefValue_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::AuxArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__AuxArgument_ ;
};
template <> class gctools::GCStamp<llvmo::EngineBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__EngineBuilder_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__ ;
};
template <> class gctools::GCStamp<core::MDArray_byte32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte32_t_O ;
};
template <> class gctools::GCStamp<core::Character_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Character_dummy_O ;
};
template <> class gctools::GCStamp<core::TagbodyEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__TagbodyEnvironment_O ;
};
template <> class gctools::GCStamp<core::ConsStepper_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ConsStepper_O ;
};
template <> class gctools::GCStamp<core::CompileTimeEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CompileTimeEnvironment_O ;
};
template <> class gctools::GCStamp<llvmo::Constant_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Constant_O ;
};
template <> class gctools::GCStamp<core::SpecialForm_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SpecialForm_O ;
};
template <> class gctools::GCStamp<core::Path_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Path_O ;
};
template <> class gctools::GCStamp<mp::BlockingConcurrentQueue_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__BlockingConcurrentQueue_O ;
};
template <> class gctools::GCStamp<mp::SharedMutex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__SharedMutex_O ;
};
template <> class gctools::GCStamp<clcenv::SpecialOperatorInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__SpecialOperatorInfo_O ;
};
template <> class gctools::GCStamp<core::SexpSaveArchive_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SexpSaveArchive_O ;
};
template <> class gctools::GCStamp<clcenv::SymbolMacroInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__SymbolMacroInfo_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned char>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_char_ ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<int>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_int_ ;
};
template <> class gctools::GCStamp<core::NativeVector_int_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__NativeVector_int_O ;
};
template <> class gctools::GCStamp<llvmo::DIBasicType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIBasicType_O ;
};
template <> class gctools::GCStamp<llvmo::DIBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIBuilder_O ;
};
template <> class gctools::GCStamp<core::InstanceCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__InstanceCreator_O ;
};
template <> class gctools::GCStamp<llvmo::APInt_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__APInt_O ;
};
template <> class gctools::GCStamp<core::Symbol_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Symbol_O ;
};
template <> class gctools::GCStamp<llvmo::APFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__APFloat_O ;
};
template <> class gctools::GCStamp<clcenv::FunctionInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__FunctionInfo_O ;
};
template <> class gctools::GCStamp<core::IOStreamStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__IOStreamStream_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___ ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayCharacter_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayCharacter_O ;
};
template <> class gctools::GCStamp<core::SimpleCharacterString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleCharacterString_O ;
};
template <> class gctools::GCStamp<clcenv::LambdaName_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__LambdaName_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__ ;
};
template <> class gctools::GCStamp<core::Array_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Array_O ;
};
template <> class gctools::GCStamp<clcenv::LocalFunctionInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__LocalFunctionInfo_O ;
};
template <> class gctools::GCStamp<llvmo::InsertPoint_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__InsertPoint_O ;
};
template <> class gctools::GCStamp<llvmo::Argument_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Argument_O ;
};
template <> class gctools::GCStamp<clcenv::Optimize_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Optimize_O ;
};
template <> class gctools::GCStamp<core::StrWNs_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StrWNs_O ;
};
template <> class gctools::GCStamp<core::Iterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Iterator_O ;
};
template <> class gctools::GCStamp<llvmo::IRBuilderBase_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IRBuilderBase_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::ExceptionEntry>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__ExceptionEntry_ ;
};
template <> class gctools::GCStamp<core::EchoStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__EchoStream_O ;
};
template <> class gctools::GCStamp<core::Null_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Null_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArrayBit_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArrayBit_O ;
};
template <> class gctools::GCStamp<core::MDArrayBit_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayBit_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<signed char>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_signed_char_ ;
};
template <> class gctools::GCStamp<core::SingleDispatchMethod_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchMethod_O ;
};
template <> class gctools::GCStamp<clcenv::Closure_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Closure_O ;
};
template <> class gctools::GCStamp<clcenv::Inline_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Inline_O ;
};
template <> class gctools::GCStamp<clcenv::LexicalVariableInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__LexicalVariableInfo_O ;
};
template <> class gctools::GCStamp<core::NativeVector_double_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__NativeVector_double_O ;
};
template <> class gctools::GCStamp<core::GlueEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__GlueEnvironment_O ;
};
template <> class gctools::GCStamp<llvmo::DILocalScope_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILocalScope_O ;
};
template <> class gctools::GCStamp<core::CxxObject_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CxxObject_O ;
};
template <> class gctools::GCStamp<llvmo::ReturnInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ReturnInst_O ;
};
template <> class gctools::GCStamp<llvmo::FunctionType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FunctionType_O ;
};
template <> class gctools::GCStamp<clbind::DummyCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__DummyCreator_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte16_t_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___ ;
};
template <> class gctools::GCStamp<llvmo::DITypeRefArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DITypeRefArray_O ;
};
template <> class gctools::GCStamp<llvmo::DILexicalBlock_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DILexicalBlock_O ;
};
template <> class gctools::GCStamp<core::Pointer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Pointer_O ;
};
template <> class gctools::GCStamp<llvmo::Type_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Type_O ;
};
template <> class gctools::GCStamp<core::SimpleVectorFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVectorFloat_O ;
};
template <> class gctools::GCStamp<mp::Mutex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__Mutex_O ;
};
template <> class gctools::GCStamp<llvmo::ModuleHandle_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ModuleHandle_O ;
};
template <> class gctools::GCStamp<core::RecursiveDirectoryIterator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__RecursiveDirectoryIterator_O ;
};
template <> class gctools::GCStamp<clcenv::BlockInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__BlockInfo_O ;
};
template <> class gctools::GCStamp<llvmo::UnreachableInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__UnreachableInst_O ;
};
template <> class gctools::GCStamp<core::SNode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SNode_O ;
};
template <> class gctools::GCStamp<core::VectorStepper_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__VectorStepper_O ;
};
template <> class gctools::GCStamp<core::LoadArchive_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LoadArchive_O ;
};
template <> class gctools::GCStamp<core::StringInputStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StringInputStream_O ;
};
template <> class gctools::GCStamp<core::Float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Float_O ;
};
template <> class gctools::GCStamp<llvmo::ModulePass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ModulePass_O ;
};
template <> class gctools::GCStamp<llvmo::DIDerivedType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DIDerivedType_O ;
};
template <> class gctools::GCStamp<clbind::ConstructorCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clbind__ConstructorCreator_O ;
};
template <> class gctools::GCStamp<core::FunctionFrame_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FunctionFrame_O ;
};
template <> class gctools::GCStamp<core::LongFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LongFloat_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int64_t_O ;
};
template <> class gctools::GCStamp<core::TranslationFunctor_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__TranslationFunctor_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantDataSequential_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantDataSequential_O ;
};
template <> class gctools::GCStamp<gctools::GCBitUnitArray_moveable<1,unsigned int,int>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_ ;
};
template <> class gctools::GCStamp<llvmo::TargetLibraryInfoWrapperPass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetLibraryInfoWrapperPass_O ;
};
template <> class gctools::GCStamp<llvmo::StoreInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__StoreInst_O ;
};
template <> class gctools::GCStamp<llvmo::DebugLoc_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DebugLoc_O ;
};
template <> class gctools::GCStamp<llvmo::User_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__User_O ;
};
template <> class gctools::GCStamp<core::WeakPointer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WeakPointer_O ;
};
template <> class gctools::GCStamp<core::LeafSNode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LeafSNode_O ;
};
template <> class gctools::GCStamp<core::MDArray_int16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int16_t_O ;
};
template <> class gctools::GCStamp<clcenv::OptimizeInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__OptimizeInfo_O ;
};
template <> class gctools::GCStamp<core::IOFileStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__IOFileStream_O ;
};
template <> class gctools::GCStamp<llvmo::FenceInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FenceInst_O ;
};
template <> class gctools::GCStamp<core::RuntimeVisibleEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__RuntimeVisibleEnvironment_O ;
};
template <> class gctools::GCStamp<core::ValueFrame_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ValueFrame_O ;
};
template <> class gctools::GCStamp<llvmo::AtomicCmpXchgInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AtomicCmpXchgInst_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned long>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_long_ ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte8_t_O ;
};
template <> class gctools::GCStamp<core::SequenceStepper_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SequenceStepper_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int32_t_O ;
};
template <> class gctools::GCStamp<core::SaveArchive_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SaveArchive_O ;
};
template <> class gctools::GCStamp<core::Complex_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Complex_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantPointerNull_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantPointerNull_O ;
};
template <> class gctools::GCStamp<llvmo::Instruction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Instruction_O ;
};
template <> class gctools::GCStamp<llvmo::VectorType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__VectorType_O ;
};
template <> class gctools::GCStamp<core::FileStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FileStream_O ;
};
template <> class gctools::GCStamp<llvmo::ValueAsMetadata_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ValueAsMetadata_O ;
};
template <> class gctools::GCStamp<core::Rational_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Rational_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantExpr_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantExpr_O ;
};
template <> class gctools::GCStamp<core::MDArrayCharacter_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayCharacter_O ;
};
template <> class gctools::GCStamp<llvmo::LandingPadInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LandingPadInst_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchEffectiveMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchEffectiveMethodFunction_O ;
};
template <> class gctools::GCStamp<core::Function_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Function_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__ ;
};
template <> class gctools::GCStamp<llvmo::StructType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__StructType_O ;
};
template <> class gctools::GCStamp<clcenv::FunctionDynamicExtent_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__FunctionDynamicExtent_O ;
};
template <> class gctools::GCStamp<core::RandomState_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__RandomState_O ;
};
template <> class gctools::GCStamp<core::MDArrayFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayFloat_O ;
};
template <> class gctools::GCStamp<core::HashTableEql_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEql_O ;
};
template <> class gctools::GCStamp<llvmo::Target_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Target_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte64_t_O ;
};
template <> class gctools::GCStamp<mp::ConditionVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_mp__ConditionVariable_O ;
};
template <> class gctools::GCStamp<core::Real_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Real_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::DynamicBinding>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__DynamicBinding_ ;
};
template <> class gctools::GCStamp<core::SimpleVector_fixnum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_fixnum_O ;
};
template <> class gctools::GCStamp<core::FuncallableInstanceCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FuncallableInstanceCreator_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_byte32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_byte32_t_O ;
};
template <> class gctools::GCStamp<core::MDArray_byte8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_byte8_t_O ;
};
template <> class gctools::GCStamp<core::SexpLoadArchive_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SexpLoadArchive_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchGenericFunctionClosure_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchGenericFunctionClosure_O ;
};
template <> class gctools::GCStamp<core::StringOutputStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StringOutputStream_O ;
};
template <> class gctools::GCStamp<core::AnsiStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__AnsiStream_O ;
};
template <> class gctools::GCStamp<core::BranchSNode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BranchSNode_O ;
};
template <> class gctools::GCStamp<llvmo::TerminatorInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TerminatorInst_O ;
};
template <> class gctools::GCStamp<llvmo::Module_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Module_O ;
};
template <> class gctools::GCStamp<core::BuiltinClosure_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BuiltinClosure_O ;
};
template <> class gctools::GCStamp<core::SingleFloat_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleFloat_dummy_O ;
};
template <> class gctools::GCStamp<core::ValueEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ValueEnvironment_O ;
};
template <> class gctools::GCStamp<core::CxxMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CxxMethodFunction_O ;
};
template <> class gctools::GCStamp<llvmo::InvokeInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__InvokeInst_O ;
};
template <> class gctools::GCStamp<core::Environment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Environment_O ;
};
template <> class gctools::GCStamp<clcenv::SymbolMacro_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__SymbolMacro_O ;
};
template <> class gctools::GCStamp<llvmo::AttributeSet_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AttributeSet_O ;
};
template <> class gctools::GCStamp<clcenv::LocalMacroInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__LocalMacroInfo_O ;
};
template <> class gctools::GCStamp<llvmo::AtomicRMWInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__AtomicRMWInst_O ;
};
template <> class gctools::GCStamp<llvmo::PassManager_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PassManager_O ;
};
template <> class gctools::GCStamp<core::StrNs_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StrNs_O ;
};
template <> class gctools::GCStamp<clasp_ffi::ForeignData_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clasp_ffi__ForeignData_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_O ;
};
template <> class gctools::GCStamp<core::UnwindProtectEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__UnwindProtectEnvironment_O ;
};
template <> class gctools::GCStamp<clcenv::GlobalMacroInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__GlobalMacroInfo_O ;
};
template <> class gctools::GCStamp<llvmo::CallInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__CallInst_O ;
};
template <> class gctools::GCStamp<llvmo::DISubprogram_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DISubprogram_O ;
};
template <> class gctools::GCStamp<llvmo::FunctionPassManager_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__FunctionPassManager_O ;
};
template <> class gctools::GCStamp<core::DoubleFloat_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DoubleFloat_O ;
};
template <> class gctools::GCStamp<clcenv::Info_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Info_O ;
};
template <> class gctools::GCStamp<core::Creator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Creator_O ;
};
template <> class gctools::GCStamp<llvmo::ArrayType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ArrayType_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_int64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_int64_t_O ;
};
template <> class gctools::GCStamp<core::SimpleString_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleString_O ;
};
template <> class gctools::GCStamp<llvmo::MCSubtargetInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__MCSubtargetInfo_O ;
};
template <> class gctools::GCStamp<llvmo::BlockAddress_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__BlockAddress_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<short>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_short_ ;
};
template <> class gctools::GCStamp<llvmo::DICompositeType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DICompositeType_O ;
};
template <> class gctools::GCStamp<core::FunctionValueEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FunctionValueEnvironment_O ;
};
template <> class gctools::GCStamp<core::DerivableCxxClassCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DerivableCxxClassCreator_O ;
};
template <> class gctools::GCStamp<core::HashTableEq_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEq_O ;
};
template <> class gctools::GCStamp<core::StringStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__StringStream_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::SymbolStorage>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__SymbolStorage_ ;
};
template <> class gctools::GCStamp<core::Sigset_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Sigset_O ;
};
template <> class gctools::GCStamp<core::MDArray_int32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int32_t_O ;
};
template <> class gctools::GCStamp<llvmo::IntegerType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__IntegerType_O ;
};
template <> class gctools::GCStamp<asttooling::AsttoolingExposer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_asttooling__AsttoolingExposer_O ;
};
template <> class gctools::GCStamp<core::HashTableEqualp_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEqualp_O ;
};
template <> class gctools::GCStamp<core::LambdaListHandler_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LambdaListHandler_O ;
};
template <> class gctools::GCStamp<core::MDArray_int64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int64_t_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_size_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_size_t_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<double>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_double_ ;
};
template <> class gctools::GCStamp<core::ConcatenatedStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ConcatenatedStream_O ;
};
template <> class gctools::GCStamp<core::SmallMultimap_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SmallMultimap_O ;
};
template <> class gctools::GCStamp<llvmo::PassManagerBuilder_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PassManagerBuilder_O ;
};
template <> class gctools::GCStamp<core::SymbolMacroletEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SymbolMacroletEnvironment_O ;
};
template <> class gctools::GCStamp<core::Fixnum_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Fixnum_dummy_O ;
};
template <> class gctools::GCStamp<core::MDArray_int8_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArray_int8_t_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantFP_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantFP_O ;
};
template <> class gctools::GCStamp<core::SingleDispatchMethodFunction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SingleDispatchMethodFunction_O ;
};
template <> class gctools::GCStamp<core::MacroletEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MacroletEnvironment_O ;
};
template <> class gctools::GCStamp<core::Cons_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Cons_O ;
};
template <> class gctools::GCStamp<llvmo::ImmutablePass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ImmutablePass_O ;
};
template <> class gctools::GCStamp<core::FuncallableInstance_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__FuncallableInstance_O ;
};
template <> class gctools::GCStamp<llvmo::LLVMContext_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LLVMContext_O ;
};
template <> class gctools::GCStamp<core::MDArrayDouble_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayDouble_O ;
};
template <> class gctools::GCStamp<core::SynonymStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SynonymStream_O ;
};
template <> class gctools::GCStamp<core::WeakKeyHashTable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WeakKeyHashTable_O ;
};
template <> class gctools::GCStamp<core::Ratio_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Ratio_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__ ;
};
template <> class gctools::GCStamp<core::MDArrayBaseChar_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MDArrayBaseChar_O ;
};
template <> class gctools::GCStamp<core::UserData_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__UserData_O ;
};
template <> class gctools::GCStamp<llvmo::GlobalVariable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__GlobalVariable_O ;
};
template <> class gctools::GCStamp<core::ClosureWithSlots_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ClosureWithSlots_O ;
};
template <> class gctools::GCStamp<llvmo::DINode_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DINode_O ;
};
template <> class gctools::GCStamp<core::ExternalObject_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ExternalObject_O ;
};
template <> class gctools::GCStamp<core::BroadcastStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BroadcastStream_O ;
};
template <> class gctools::GCStamp<llvmo::ExecutionEngine_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ExecutionEngine_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__ ;
};
template <> class gctools::GCStamp<core::ClassRepCreator_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ClassRepCreator_O ;
};
template <> class gctools::GCStamp<core::SimpleVector_int16_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVector_int16_t_O ;
};
template <> class gctools::GCStamp<core::General_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__General_O ;
};
template <> class gctools::GCStamp<clcenv::Function_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__Function_O ;
};
template <> class gctools::GCStamp<core::DerivableCxxObject_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__DerivableCxxObject_O ;
};
template <> class gctools::GCStamp<llvmo::Attribute_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Attribute_O ;
};
template <> class gctools::GCStamp<core::WeakKeyMapping_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WeakKeyMapping_O ;
};
template <> class gctools::GCStamp<core::Closure_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Closure_O ;
};
template <> class gctools::GCStamp<core::Reader_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Reader_O ;
};
template <> class gctools::GCStamp<core::SymbolToEnumConverter_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SymbolToEnumConverter_O ;
};
template <> class gctools::GCStamp<llvmo::SwitchInst_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__SwitchInst_O ;
};
template <> class gctools::GCStamp<clcenv::VariableIgnore_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__VariableIgnore_O ;
};
template <> class gctools::GCStamp<clcenv::SpecialVariableInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__SpecialVariableInfo_O ;
};
template <> class gctools::GCStamp<core::NativeVector_float_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__NativeVector_float_O ;
};
template <> class gctools::GCStamp<core::SimpleVectorDouble_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleVectorDouble_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::RequiredArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__RequiredArgument_ ;
};
template <> class gctools::GCStamp<llvmo::Pass_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Pass_O ;
};
template <> class gctools::GCStamp<core::Lisp_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Lisp_O ;
};
template <> class gctools::GCStamp<core::VaList_dummy_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__VaList_dummy_O ;
};
template <> class gctools::GCStamp<core::BlockEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BlockEnvironment_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::CacheRecord>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__CacheRecord_ ;
};
template <> class gctools::GCStamp<core::CatchEnvironment_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CatchEnvironment_O ;
};
template <> class gctools::GCStamp<llvmo::DINodeArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__DINodeArray_O ;
};
template <> class gctools::GCStamp<core::LogicalPathname_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__LogicalPathname_O ;
};
template <> class gctools::GCStamp<core::Archive_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Archive_O ;
};
template <> class gctools::GCStamp<llvmo::TargetSubtargetInfo_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetSubtargetInfo_O ;
};
template <> class gctools::GCStamp<llvmo::ConstantDataArray_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__ConstantDataArray_O ;
};
template <> class gctools::GCStamp<llvmo::TargetOptions_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__TargetOptions_O ;
};
template <> class gctools::GCStamp<core::WrappedPointer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WrappedPointer_O ;
};
template <> class gctools::GCStamp<core::SmallMap_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SmallMap_O ;
};
template <> class gctools::GCStamp<core::Instance_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Instance_O ;
};
template <> class gctools::GCStamp<clasp_ffi::ForeignTypeSpec_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clasp_ffi__ForeignTypeSpec_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte32_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte32_t_O ;
};
template <> class gctools::GCStamp<core::Bignum_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__Bignum_O ;
};
template <> class gctools::GCStamp<llvmo::LLVMTargetMachine_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__LLVMTargetMachine_O ;
};
template <> class gctools::GCStamp<core::PosixTimeDuration_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__PosixTimeDuration_O ;
};
template <> class gctools::GCStamp<core::ReadTable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__ReadTable_O ;
};
template <> class gctools::GCStamp<core::HashTableEqual_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__HashTableEqual_O ;
};
template <> class gctools::GCStamp<llvmo::SequentialType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__SequentialType_O ;
};
template <> class gctools::GCStamp<clcenv::VariableType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_clcenv__VariableType_O ;
};
template <> class gctools::GCStamp<llvmo::Triple_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__Triple_O ;
};
template <> class gctools::GCStamp<core::BitVectorNs_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__BitVectorNs_O ;
};
template <> class gctools::GCStamp<core::SimpleMDArray_byte64_t_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__SimpleMDArray_byte64_t_O ;
};
template <> class gctools::GCStamp<llvmo::UnaryInstruction_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__UnaryInstruction_O ;
};
template <> class gctools::GCStamp<core::CoreExposer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__CoreExposer_O ;
};
template <> class gctools::GCStamp<llvmo::GlobalValue_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__GlobalValue_O ;
};
template <> class gctools::GCStamp<llvmo::PointerType_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_llvmo__PointerType_O ;
};
template <> class gctools::GCStamp<gctools::GCArray_moveable<unsigned int>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCArray_moveable_unsigned_int_ ;
};
template <> class gctools::GCStamp<core::WeakHashTable_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__WeakHashTable_O ;
};
template <> class gctools::GCStamp<gctools::GCVector_moveable<core::KeywordArgument>> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_gctools__GCVector_moveable_core__KeywordArgument_ ;
};
template <> class gctools::GCStamp<core::TwoWayStream_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__TwoWayStream_O ;
};
template <> class gctools::GCStamp<core::MultiStringBuffer_O> {
public:
  static gctools::GCStampEnum const Stamp = gctools::STAMP_core__MultiStringBuffer_O ;
};
#endif // defined(GC_STAMP_SELECTORS)
#if defined(GC_OBJ_SCAN)
#endif // defined(GC_OBJ_SCAN)
#if defined(GC_OBJ_SCAN_HELPERS)
{ class_kind, STAMP_core__T_O, sizeof(core::T_O), 0, "core::T_O" },
{ class_kind, STAMP_core__VaList_dummy_O, sizeof(core::VaList_dummy_O), 0, "core::VaList_dummy_O" },
{ class_kind, STAMP_core__General_O, sizeof(core::General_O), 0, "core::General_O" },
{ class_kind, STAMP_core__MultiStringBuffer_O, sizeof(core::MultiStringBuffer_O), 0, "core::MultiStringBuffer_O" },
{ class_kind, STAMP_core__WeakHashTable_O, sizeof(core::WeakHashTable_O), 0, "core::WeakHashTable_O" },
{ class_kind, STAMP_core__WeakKeyHashTable_O, sizeof(core::WeakKeyHashTable_O), 0, "core::WeakKeyHashTable_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._Length), "_HashTable._Length" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::Buckets<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::WeakLinks>>), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._Keys), "_HashTable._Keys" }, // public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::Buckets<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::StrongLinks>>), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._Values), "_HashTable._Values" }, // public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._LocationDependency._epoch), "_HashTable._LocationDependency._epoch" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::WeakKeyHashTable_O),_HashTable._LocationDependency._rs), "_HashTable._LocationDependency._rs" }, // public: (T T T) fixable: NIL good-name: T
{ class_kind, STAMP_core__ReadTable_O, sizeof(core::ReadTable_O), 0, "core::ReadTable_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::ReadTable_O),_Case), "_Case" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::ReadTable_O),_SyntaxTypes), "_SyntaxTypes" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::ReadTable_O),_MacroCharacters), "_MacroCharacters" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::ReadTable_O),_DispatchMacroCharacters), "_DispatchMacroCharacters" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__PosixTimeDuration_O, sizeof(core::PosixTimeDuration_O), 0, "core::PosixTimeDuration_O" },
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::PosixTimeDuration_O),_Duration.ticks_.value_), "_Duration.ticks_.value_" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
{ class_kind, STAMP_clasp_ffi__ForeignTypeSpec_O, sizeof(clasp_ffi::ForeignTypeSpec_O), 0, "clasp_ffi::ForeignTypeSpec_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_lisp_symbol), "m_lisp_symbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_lisp_name), "m_lisp_name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_size), "m_size" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Fixnum_I>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_alignment), "m_alignment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_cxx_name), "m_cxx_name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_llvm_type_symbol_fn), "m_llvm_type_symbol_fn" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_to_object_fn_name), "m_to_object_fn_name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_from_object_fn_name), "m_from_object_fn_name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<clasp_ffi::ForeignData_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_to_object_fn_ptr), "m_to_object_fn_ptr" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<clasp_ffi::ForeignData_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignTypeSpec_O),m_from_object_fn_ptr), "m_from_object_fn_ptr" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Instance_O, sizeof(core::Instance_O), 0, "core::Instance_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Instance_O),_Sig), "_Sig" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Instance_O),_Class), "_Class" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleVector_O>), offsetof(SAFE_TYPE_MACRO(core::Instance_O),_Rack), "_Rack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__DerivableCxxObject_O, sizeof(core::DerivableCxxObject_O), 0, "core::DerivableCxxObject_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::DerivableCxxObject_O),_Sig), "_Sig" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::DerivableCxxObject_O),_Class), "_Class" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleVector_O>), offsetof(SAFE_TYPE_MACRO(core::DerivableCxxObject_O),_Rack), "_Rack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clbind__ClassRep_O, sizeof(clbind::ClassRep_O), 0, "clbind::ClassRep_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),_Sig), "_Sig" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),_Class), "_Class" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleVector_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),_Rack), "_Rack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_bases._Vector._Contents), "m_bases._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_name._M_string_length), "m_name._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_name.NO-NAME._M_allocated_capacity), "m_name.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(clbind::ClassRep_O),m_derivable), "m_derivable" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__SmallMap_O, sizeof(core::SmallMap_O), 0, "core::SmallMap_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>>), offsetof(SAFE_TYPE_MACRO(core::SmallMap_O),map._Contents), "map._Contents" }, // public: (NIL T) fixable: TAGGED-POINTER-FIX good-name: T
{ templated_kind, STAMP_core__WrappedPointer_O, sizeof(core::WrappedPointer_O), 0, "core::WrappedPointer_O" },
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::WrappedPointer_O),Stamp_), "Stamp_" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::WrappedPointer_O),Class_), "Class_" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Archive_O, sizeof(core::Archive_O), 0, "core::Archive_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Archive_O),_Version), "_Version" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::Archive_O),_TopNode.theObject), "_TopNode.theObject" }, // public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Archive_O),_NextUniqueId), "_NextUniqueId" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__SaveArchive_O, sizeof(core::SaveArchive_O), 0, "core::SaveArchive_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SaveArchive_O),_Version), "_Version" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SaveArchive_O),_TopNode.theObject), "_TopNode.theObject" }, // public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SaveArchive_O),_NextUniqueId), "_NextUniqueId" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::SaveArchive_O),_SNodeForObject), "_SNodeForObject" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SexpSaveArchive_O, sizeof(core::SexpSaveArchive_O), 0, "core::SexpSaveArchive_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SexpSaveArchive_O),_Version), "_Version" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SexpSaveArchive_O),_TopNode.theObject), "_TopNode.theObject" }, // public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SexpSaveArchive_O),_NextUniqueId), "_NextUniqueId" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::SexpSaveArchive_O),_SNodeForObject), "_SNodeForObject" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__LoadArchive_O, sizeof(core::LoadArchive_O), 0, "core::LoadArchive_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::LoadArchive_O),_Version), "_Version" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::LoadArchive_O),_TopNode.theObject), "_TopNode.theObject" }, // public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::LoadArchive_O),_NextUniqueId), "_NextUniqueId" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::LoadArchive_O),_ObjectForSNode), "_ObjectForSNode" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::LoadArchive_O),_NodesToFinalize), "_NodesToFinalize" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SexpLoadArchive_O, sizeof(core::SexpLoadArchive_O), 0, "core::SexpLoadArchive_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SexpLoadArchive_O),_Version), "_Version" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SexpLoadArchive_O),_TopNode.theObject), "_TopNode.theObject" }, // public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SexpLoadArchive_O),_NextUniqueId), "_NextUniqueId" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::SexpLoadArchive_O),_ObjectForSNode), "_ObjectForSNode" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::SexpLoadArchive_O),_NodesToFinalize), "_NodesToFinalize" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SymbolToEnumConverter_O, sizeof(core::SymbolToEnumConverter_O), 0, "core::SymbolToEnumConverter_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_WhatTheEnumsRepresent), "_WhatTheEnumsRepresent" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEql_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_EnumToSymbol), "_EnumToSymbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_ArchiveSymbolToEnum), "_ArchiveSymbolToEnum" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEql_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_EnumToArchiveSymbol), "_EnumToArchiveSymbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolToEnumConverter_O),_SymbolToEnum), "_SymbolToEnum" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Reader_O, sizeof(core::Reader_O), 0, "core::Reader_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Reader_O),_Input), "_Input" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__WeakKeyMapping_O, sizeof(core::WeakKeyMapping_O), 0, "core::WeakKeyMapping_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::Mapping<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::WeakLinks>>), offsetof(SAFE_TYPE_MACRO(core::WeakKeyMapping_O),_WeakObject.Key), "_WeakObject.Key" }, // public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::Mapping<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>,gctools::StrongLinks>>), offsetof(SAFE_TYPE_MACRO(core::WeakKeyMapping_O),_WeakObject.Value), "_WeakObject.Value" }, // public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_llvmo__Attribute_O, sizeof(llvmo::Attribute_O), 0, "llvmo::Attribute_O" },
{ class_kind, STAMP_core__ExternalObject_O, sizeof(core::ExternalObject_O), 0, "core::ExternalObject_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::ExternalObject_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Triple_O, sizeof(llvmo::Triple_O), 0, "llvmo::Triple_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Triple_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__TargetOptions_O, sizeof(llvmo::TargetOptions_O), 0, "llvmo::TargetOptions_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetOptions_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Pass_O, sizeof(llvmo::Pass_O), 0, "llvmo::Pass_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Pass_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ModulePass_O, sizeof(llvmo::ModulePass_O), 0, "llvmo::ModulePass_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ModulePass_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ImmutablePass_O, sizeof(llvmo::ImmutablePass_O), 0, "llvmo::ImmutablePass_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ImmutablePass_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__TargetLibraryInfoWrapperPass_O, sizeof(llvmo::TargetLibraryInfoWrapperPass_O), 0, "llvmo::TargetLibraryInfoWrapperPass_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetLibraryInfoWrapperPass_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__FunctionPass_O, sizeof(llvmo::FunctionPass_O), 0, "llvmo::FunctionPass_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FunctionPass_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ExecutionEngine_O, sizeof(llvmo::ExecutionEngine_O), 0, "llvmo::ExecutionEngine_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ExecutionEngine_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ExecutionEngine_O),_DependentModules), "_DependentModules" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__LLVMContext_O, sizeof(llvmo::LLVMContext_O), 0, "llvmo::LLVMContext_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LLVMContext_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__PassManagerBuilder_O, sizeof(llvmo::PassManagerBuilder_O), 0, "llvmo::PassManagerBuilder_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBuilder_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBuilder_O),_ErrorStr._M_string_length), "_ErrorStr._M_string_length" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBuilder_O),_ErrorStr.NO-NAME._M_allocated_capacity), "_ErrorStr.NO-NAME._M_allocated_capacity" }, // public: (NIL NIL T) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__MCSubtargetInfo_O, sizeof(llvmo::MCSubtargetInfo_O), 0, "llvmo::MCSubtargetInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::MCSubtargetInfo_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__TargetSubtargetInfo_O, sizeof(llvmo::TargetSubtargetInfo_O), 0, "llvmo::TargetSubtargetInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetSubtargetInfo_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Module_O, sizeof(llvmo::Module_O), 0, "llvmo::Module_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Module_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::Module_O),_Id), "_Id" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Module_O),_UniqueGlobalVariableStrings), "_UniqueGlobalVariableStrings" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Target_O, sizeof(llvmo::Target_O), 0, "llvmo::Target_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Target_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Type_O, sizeof(llvmo::Type_O), 0, "llvmo::Type_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Type_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__IntegerType_O, sizeof(llvmo::IntegerType_O), 0, "llvmo::IntegerType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IntegerType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__FunctionType_O, sizeof(llvmo::FunctionType_O), 0, "llvmo::FunctionType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FunctionType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__CompositeType_O, sizeof(llvmo::CompositeType_O), 0, "llvmo::CompositeType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::CompositeType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__SequentialType_O, sizeof(llvmo::SequentialType_O), 0, "llvmo::SequentialType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::SequentialType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__PointerType_O, sizeof(llvmo::PointerType_O), 0, "llvmo::PointerType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PointerType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ArrayType_O, sizeof(llvmo::ArrayType_O), 0, "llvmo::ArrayType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ArrayType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__VectorType_O, sizeof(llvmo::VectorType_O), 0, "llvmo::VectorType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::VectorType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__StructType_O, sizeof(llvmo::StructType_O), 0, "llvmo::StructType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::StructType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__IRBuilderBase_O, sizeof(llvmo::IRBuilderBase_O), 0, "llvmo::IRBuilderBase_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilderBase_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilderBase_O),_CurrentDebugLocationSet), "_CurrentDebugLocationSet" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__IRBuilder_O, sizeof(llvmo::IRBuilder_O), 0, "llvmo::IRBuilder_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilder_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::IRBuilder_O),_CurrentDebugLocationSet), "_CurrentDebugLocationSet" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__APFloat_O, sizeof(llvmo::APFloat_O), 0, "llvmo::APFloat_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_value.U.IEEE.significand.part), "_value.U.IEEE.significand.part" }, // public: (T NIL T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_short, sizeof(short), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_value.U.IEEE.exponent), "_value.U.IEEE.exponent" }, // public: (T NIL T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(llvmo::APFloat_O),_value.U.IEEE.sign), "_value.U.IEEE.sign" }, // public: (T NIL T NIL) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__APInt_O, sizeof(llvmo::APInt_O), 0, "llvmo::APInt_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::APInt_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::APInt_O),_value.U.VAL), "_value.U.VAL" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(llvmo::APInt_O),_value.BitWidth), "_value.BitWidth" }, // public: (T NIL) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__DIBuilder_O, sizeof(llvmo::DIBuilder_O), 0, "llvmo::DIBuilder_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIBuilder_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__EngineBuilder_O, sizeof(llvmo::EngineBuilder_O), 0, "llvmo::EngineBuilder_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::EngineBuilder_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::EngineBuilder_O),_ErrorStr._M_string_length), "_ErrorStr._M_string_length" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::EngineBuilder_O),_ErrorStr.NO-NAME._M_allocated_capacity), "_ErrorStr.NO-NAME._M_allocated_capacity" }, // public: (NIL NIL T) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__PassManagerBase_O, sizeof(llvmo::PassManagerBase_O), 0, "llvmo::PassManagerBase_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PassManagerBase_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__FunctionPassManager_O, sizeof(llvmo::FunctionPassManager_O), 0, "llvmo::FunctionPassManager_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FunctionPassManager_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__PassManager_O, sizeof(llvmo::PassManager_O), 0, "llvmo::PassManager_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PassManager_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Linker_O, sizeof(llvmo::Linker_O), 0, "llvmo::Linker_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Linker_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Metadata_O, sizeof(llvmo::Metadata_O), 0, "llvmo::Metadata_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Metadata_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ValueAsMetadata_O, sizeof(llvmo::ValueAsMetadata_O), 0, "llvmo::ValueAsMetadata_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ValueAsMetadata_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__MDString_O, sizeof(llvmo::MDString_O), 0, "llvmo::MDString_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::MDString_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__MDNode_O, sizeof(llvmo::MDNode_O), 0, "llvmo::MDNode_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::MDNode_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DINode_O, sizeof(llvmo::DINode_O), 0, "llvmo::DINode_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DINode_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DIScope_O, sizeof(llvmo::DIScope_O), 0, "llvmo::DIScope_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIScope_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DILocalScope_O, sizeof(llvmo::DILocalScope_O), 0, "llvmo::DILocalScope_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILocalScope_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DISubprogram_O, sizeof(llvmo::DISubprogram_O), 0, "llvmo::DISubprogram_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DISubprogram_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DILexicalBlockBase_O, sizeof(llvmo::DILexicalBlockBase_O), 0, "llvmo::DILexicalBlockBase_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILexicalBlockBase_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DILexicalBlock_O, sizeof(llvmo::DILexicalBlock_O), 0, "llvmo::DILexicalBlock_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DILexicalBlock_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DIFile_O, sizeof(llvmo::DIFile_O), 0, "llvmo::DIFile_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIFile_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DICompileUnit_O, sizeof(llvmo::DICompileUnit_O), 0, "llvmo::DICompileUnit_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DICompileUnit_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DIType_O, sizeof(llvmo::DIType_O), 0, "llvmo::DIType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DICompositeType_O, sizeof(llvmo::DICompositeType_O), 0, "llvmo::DICompositeType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DICompositeType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DIDerivedType_O, sizeof(llvmo::DIDerivedType_O), 0, "llvmo::DIDerivedType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIDerivedType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DIBasicType_O, sizeof(llvmo::DIBasicType_O), 0, "llvmo::DIBasicType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DIBasicType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DISubroutineType_O, sizeof(llvmo::DISubroutineType_O), 0, "llvmo::DISubroutineType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::DISubroutineType_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Value_O, sizeof(llvmo::Value_O), 0, "llvmo::Value_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Value_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__User_O, sizeof(llvmo::User_O), 0, "llvmo::User_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::User_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Instruction_O, sizeof(llvmo::Instruction_O), 0, "llvmo::Instruction_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Instruction_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__UnaryInstruction_O, sizeof(llvmo::UnaryInstruction_O), 0, "llvmo::UnaryInstruction_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::UnaryInstruction_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__VAArgInst_O, sizeof(llvmo::VAArgInst_O), 0, "llvmo::VAArgInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::VAArgInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__LoadInst_O, sizeof(llvmo::LoadInst_O), 0, "llvmo::LoadInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LoadInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__AllocaInst_O, sizeof(llvmo::AllocaInst_O), 0, "llvmo::AllocaInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::AllocaInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__CallInst_O, sizeof(llvmo::CallInst_O), 0, "llvmo::CallInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::CallInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__AtomicRMWInst_O, sizeof(llvmo::AtomicRMWInst_O), 0, "llvmo::AtomicRMWInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::AtomicRMWInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__TerminatorInst_O, sizeof(llvmo::TerminatorInst_O), 0, "llvmo::TerminatorInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TerminatorInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__SwitchInst_O, sizeof(llvmo::SwitchInst_O), 0, "llvmo::SwitchInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::SwitchInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__InvokeInst_O, sizeof(llvmo::InvokeInst_O), 0, "llvmo::InvokeInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::InvokeInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__UnreachableInst_O, sizeof(llvmo::UnreachableInst_O), 0, "llvmo::UnreachableInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::UnreachableInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ReturnInst_O, sizeof(llvmo::ReturnInst_O), 0, "llvmo::ReturnInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ReturnInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__IndirectBrInst_O, sizeof(llvmo::IndirectBrInst_O), 0, "llvmo::IndirectBrInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::IndirectBrInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ResumeInst_O, sizeof(llvmo::ResumeInst_O), 0, "llvmo::ResumeInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ResumeInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__BranchInst_O, sizeof(llvmo::BranchInst_O), 0, "llvmo::BranchInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::BranchInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__LandingPadInst_O, sizeof(llvmo::LandingPadInst_O), 0, "llvmo::LandingPadInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LandingPadInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__AtomicCmpXchgInst_O, sizeof(llvmo::AtomicCmpXchgInst_O), 0, "llvmo::AtomicCmpXchgInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::AtomicCmpXchgInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__FenceInst_O, sizeof(llvmo::FenceInst_O), 0, "llvmo::FenceInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::FenceInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__StoreInst_O, sizeof(llvmo::StoreInst_O), 0, "llvmo::StoreInst_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::StoreInst_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__PHINode_O, sizeof(llvmo::PHINode_O), 0, "llvmo::PHINode_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::PHINode_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Constant_O, sizeof(llvmo::Constant_O), 0, "llvmo::Constant_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Constant_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__GlobalValue_O, sizeof(llvmo::GlobalValue_O), 0, "llvmo::GlobalValue_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalValue_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalValue_O),_PtrIsOwned), "_PtrIsOwned" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__GlobalVariable_O, sizeof(llvmo::GlobalVariable_O), 0, "llvmo::GlobalVariable_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalVariable_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::GlobalVariable_O),_PtrIsOwned), "_PtrIsOwned" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__Function_O, sizeof(llvmo::Function_O), 0, "llvmo::Function_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Function_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::Function_O),_PtrIsOwned), "_PtrIsOwned" }, // public: (NIL) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LoadTimeValues_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Function_O),_RunTimeValues), "_RunTimeValues" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantFP_O, sizeof(llvmo::ConstantFP_O), 0, "llvmo::ConstantFP_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantFP_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__BlockAddress_O, sizeof(llvmo::BlockAddress_O), 0, "llvmo::BlockAddress_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::BlockAddress_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantExpr_O, sizeof(llvmo::ConstantExpr_O), 0, "llvmo::ConstantExpr_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantExpr_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantPointerNull_O, sizeof(llvmo::ConstantPointerNull_O), 0, "llvmo::ConstantPointerNull_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantPointerNull_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantDataSequential_O, sizeof(llvmo::ConstantDataSequential_O), 0, "llvmo::ConstantDataSequential_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantDataSequential_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantDataArray_O, sizeof(llvmo::ConstantDataArray_O), 0, "llvmo::ConstantDataArray_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantDataArray_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__UndefValue_O, sizeof(llvmo::UndefValue_O), 0, "llvmo::UndefValue_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::UndefValue_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantArray_O, sizeof(llvmo::ConstantArray_O), 0, "llvmo::ConstantArray_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantArray_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantStruct_O, sizeof(llvmo::ConstantStruct_O), 0, "llvmo::ConstantStruct_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantStruct_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ConstantInt_O, sizeof(llvmo::ConstantInt_O), 0, "llvmo::ConstantInt_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::ConstantInt_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__Argument_O, sizeof(llvmo::Argument_O), 0, "llvmo::Argument_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::Argument_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__BasicBlock_O, sizeof(llvmo::BasicBlock_O), 0, "llvmo::BasicBlock_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::BasicBlock_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__TargetMachine_O, sizeof(llvmo::TargetMachine_O), 0, "llvmo::TargetMachine_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::TargetMachine_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__LLVMTargetMachine_O, sizeof(llvmo::LLVMTargetMachine_O), 0, "llvmo::LLVMTargetMachine_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::LLVMTargetMachine_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__NamedMDNode_O, sizeof(llvmo::NamedMDNode_O), 0, "llvmo::NamedMDNode_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(llvmo::NamedMDNode_O),_Class), "_Class" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SmallMultimap_O, sizeof(core::SmallMultimap_O), 0, "core::SmallMultimap_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>>), offsetof(SAFE_TYPE_MACRO(core::SmallMultimap_O),map._Contents), "map._Contents" }, // public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_core__LambdaListHandler_O, sizeof(core::LambdaListHandler_O), 0, "core::LambdaListHandler_O" },
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_CreatesBindings), "_CreatesBindings" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_ClassifiedSymbolList), "_ClassifiedSymbolList" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_SpecialSymbolSet.theObject), "_SpecialSymbolSet.theObject" }, // public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_DeclareSpecifierList), "_DeclareSpecifierList" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::RequiredArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RequiredArguments._Vector._Contents), "_RequiredArguments._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::OptionalArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_OptionalArguments._Vector._Contents), "_OptionalArguments._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RestArgument._ArgTarget), "_RestArgument._ArgTarget" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RestArgument._ArgTargetFrameIndex), "_RestArgument._ArgTargetFrameIndex" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RestArgument.VaRest), "_RestArgument.VaRest" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_KeyFlag), "_KeyFlag" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::KeywordArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_KeywordArguments._Vector._Contents), "_KeywordArguments._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_AllowOtherKeys), "_AllowOtherKeys" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::AuxArgument>>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_AuxArguments._Vector._Contents), "_AuxArguments._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_Comment), "_Comment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_NumberOfLexicalVariables), "_NumberOfLexicalVariables" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_RequiredLexicalArgumentsOnly), "_RequiredLexicalArgumentsOnly" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LambdaListHandler_O),_LexicalVariableNamesForDebugging), "_LexicalVariableNamesForDebugging" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Sigset_O, sizeof(core::Sigset_O), 0, "core::Sigset_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Sigset_O),_sigset.__count), "_sigset.__count" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Sigset_O),_sigset.__value.__wch), "_sigset.__value.__wch" }, // public: (T T T) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__AttributeSet_O, sizeof(llvmo::AttributeSet_O), 0, "llvmo::AttributeSet_O" },
{ class_kind, STAMP_core__Environment_O, sizeof(core::Environment_O), 0, "core::Environment_O" },
{ class_kind, STAMP_core__GlueEnvironment_O, sizeof(core::GlueEnvironment_O), 0, "core::GlueEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::GlueEnvironment_O),_Map), "_Map" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::GlueEnvironment_O),_Args), "_Args" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__LexicalEnvironment_O, sizeof(core::LexicalEnvironment_O), 0, "core::LexicalEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LexicalEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::LexicalEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__RuntimeVisibleEnvironment_O, sizeof(core::RuntimeVisibleEnvironment_O), 0, "core::RuntimeVisibleEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::RuntimeVisibleEnvironment_O),_Invisible), "_Invisible" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__BlockEnvironment_O, sizeof(core::BlockEnvironment_O), 0, "core::BlockEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_Invisible), "_Invisible" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_BlockSymbol), "_BlockSymbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::ValueFrame_O>), offsetof(SAFE_TYPE_MACRO(core::BlockEnvironment_O),_ActivationFrame), "_ActivationFrame" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__FunctionValueEnvironment_O, sizeof(core::FunctionValueEnvironment_O), 0, "core::FunctionValueEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_Invisible), "_Invisible" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_FunctionIndices), "_FunctionIndices" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::FunctionFrame_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionValueEnvironment_O),_FunctionFrame), "_FunctionFrame" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__ValueEnvironment_O, sizeof(core::ValueEnvironment_O), 0, "core::ValueEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_Invisible), "_Invisible" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_SymbolIndex_alist), "_SymbolIndex_alist" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::ValueFrame_O>), offsetof(SAFE_TYPE_MACRO(core::ValueEnvironment_O),_ActivationFrame), "_ActivationFrame" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__TagbodyEnvironment_O, sizeof(core::TagbodyEnvironment_O), 0, "core::TagbodyEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_RuntimeEnvironment), "_RuntimeEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_Invisible), "_Invisible" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_Tags), "_Tags" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_TagCode._Vector._Contents), "_TagCode._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::ActivationFrame_O>), offsetof(SAFE_TYPE_MACRO(core::TagbodyEnvironment_O),_ActivationFrame), "_ActivationFrame" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__CompileTimeEnvironment_O, sizeof(core::CompileTimeEnvironment_O), 0, "core::CompileTimeEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CompileTimeEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::CompileTimeEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__CatchEnvironment_O, sizeof(core::CatchEnvironment_O), 0, "core::CatchEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CatchEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::CatchEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__MacroletEnvironment_O, sizeof(core::MacroletEnvironment_O), 0, "core::MacroletEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::MacroletEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::MacroletEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::MacroletEnvironment_O),_Macros), "_Macros" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SymbolMacroletEnvironment_O, sizeof(core::SymbolMacroletEnvironment_O), 0, "core::SymbolMacroletEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolMacroletEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolMacroletEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolMacroletEnvironment_O),_Macros), "_Macros" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__UnwindProtectEnvironment_O, sizeof(core::UnwindProtectEnvironment_O), 0, "core::UnwindProtectEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::UnwindProtectEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::UnwindProtectEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::UnwindProtectEnvironment_O),_CleanupForm), "_CleanupForm" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__FunctionContainerEnvironment_O, sizeof(core::FunctionContainerEnvironment_O), 0, "core::FunctionContainerEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_ParentEnvironment), "_ParentEnvironment" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_Metadata), "_Metadata" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_Closure), "_Closure" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionContainerEnvironment_O),_Function), "_Function" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__ActivationFrame_O, sizeof(core::ActivationFrame_O), 0, "core::ActivationFrame_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ActivationFrame_O),_Parent), "_Parent" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__ValueFrame_O, sizeof(core::ValueFrame_O), 0, "core::ValueFrame_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Parent), "_Parent" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_DebuggingInfo), "_DebuggingInfo" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Objects._Data), "_Objects._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Objects._Length), offsetof(SAFE_TYPE_MACRO(core::ValueFrame_O),_Objects._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
{ class_kind, STAMP_core__FunctionFrame_O, sizeof(core::FunctionFrame_O), 0, "core::FunctionFrame_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Parent), "_Parent" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Objects._Data), "_Objects._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Objects._Length), offsetof(SAFE_TYPE_MACRO(core::FunctionFrame_O),_Objects._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
{ class_kind, STAMP_core__RandomState_O, sizeof(core::RandomState_O), 0, "core::RandomState_O" },
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::RandomState_O),_Producer.i), "_Producer.i" }, // public: (T NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__Function_O, sizeof(core::Function_O), 0, "core::Function_O" },
{ templated_kind, STAMP_core__Closure_O, sizeof(core::Closure_O), 0, "core::Closure_O" },
{ class_kind, STAMP_core__ClosureWithSlots_O, sizeof(core::ClosureWithSlots_O), 0, "core::ClosureWithSlots_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ClosureWithSlots_O),_lambdaList), "_lambdaList" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::ClosureWithSlots_O),_Slots._Data), "_Slots._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ClosureWithSlots_O),_Slots._Length), offsetof(SAFE_TYPE_MACRO(core::ClosureWithSlots_O),_Slots._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
{ class_kind, STAMP_core__SingleDispatchMethodFunction_O, sizeof(core::SingleDispatchMethodFunction_O), 0, "core::SingleDispatchMethodFunction_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethodFunction_O),_body), "_body" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__CxxMethodFunction_O, sizeof(core::CxxMethodFunction_O), 0, "core::CxxMethodFunction_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::CxxMethodFunction_O),_body), "_body" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ templated_kind, STAMP_core__BuiltinClosure_O, sizeof(core::BuiltinClosure_O), 0, "core::BuiltinClosure_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::BuiltinClosure_O),_lambdaListHandler), "_lambdaListHandler" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__TranslationFunctor_O, sizeof(core::TranslationFunctor_O), 0, "core::TranslationFunctor_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::TranslationFunctor_O),_lambdaListHandler), "_lambdaListHandler" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SingleDispatchGenericFunctionClosure_O, sizeof(core::SingleDispatchGenericFunctionClosure_O), 0, "core::SingleDispatchGenericFunctionClosure_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchGenericFunctionClosure_O),_Methods), "_Methods" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchGenericFunctionClosure_O),_lambdaListHandler), "_lambdaListHandler" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchGenericFunctionClosure_O),_SingleDispatchArgumentIndex), "_SingleDispatchArgumentIndex" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__SingleDispatchEffectiveMethodFunction_O, sizeof(core::SingleDispatchEffectiveMethodFunction_O), 0, "core::SingleDispatchEffectiveMethodFunction_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchEffectiveMethodFunction_O),_Befores), "_Befores" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchEffectiveMethodFunction_O),_Primaries), "_Primaries" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchEffectiveMethodFunction_O),_Afters), "_Afters" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O, sizeof(core::SingleDispatchCxxEffectiveMethodFunction_O), 0, "core::SingleDispatchCxxEffectiveMethodFunction_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::CxxMethodFunction_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchCxxEffectiveMethodFunction_O),_onlyCxxMethodFunction), "_onlyCxxMethodFunction" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__FuncallableInstance_O, sizeof(core::FuncallableInstance_O), 0, "core::FuncallableInstance_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_Class), "_Class" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleVector_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_Rack), "_Rack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_Sig), "_Sig" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_CallHistory._Contents), "_CallHistory._Contents" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_SpecializerProfile._Contents), "_SpecializerProfile._Contents" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_CompiledDispatchFunction._Contents), "_CompiledDispatchFunction._Contents" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_isgf), "_isgf" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstance_O),_DebugOn), "_DebugOn" }, // public: (T) fixable: NIL good-name: T
{ templated_kind, STAMP_core__Creator_O, sizeof(core::Creator_O), 0, "core::Creator_O" },
{ class_kind, STAMP_core__ClassRepCreator_O, sizeof(core::ClassRepCreator_O), 0, "core::ClassRepCreator_O" },
{ class_kind, STAMP_core__DerivableCxxClassCreator_O, sizeof(core::DerivableCxxClassCreator_O), 0, "core::DerivableCxxClassCreator_O" },
{ class_kind, STAMP_core__FuncallableInstanceCreator_O, sizeof(core::FuncallableInstanceCreator_O), 0, "core::FuncallableInstanceCreator_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::FuncallableInstanceCreator_O),_class), "_class" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ templated_kind, STAMP_clbind__ConstructorCreator_O, sizeof(clbind::ConstructorCreator_O), 0, "clbind::ConstructorCreator_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(clbind::ConstructorCreator_O),_mostDerivedClassSymbol), "_mostDerivedClassSymbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clbind__DummyCreator_O, sizeof(clbind::DummyCreator_O), 0, "clbind::DummyCreator_O" },
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::DummyCreator_O),_name._M_string_length), "_name._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clbind::DummyCreator_O),_name.NO-NAME._M_allocated_capacity), "_name.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
{ class_kind, STAMP_core__InstanceCreator_O, sizeof(core::InstanceCreator_O), 0, "core::InstanceCreator_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::InstanceCreator_O),_class), "_class" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__StandardClassCreator_O, sizeof(core::StandardClassCreator_O), 0, "core::StandardClassCreator_O" },
{ class_kind, STAMP_core__SpecialForm_O, sizeof(core::SpecialForm_O), 0, "core::SpecialForm_O" },
{ class_kind, STAMP_core__SequenceStepper_O, sizeof(core::SequenceStepper_O), 0, "core::SequenceStepper_O" },
{ class_kind, STAMP_core__VectorStepper_O, sizeof(core::VectorStepper_O), 0, "core::VectorStepper_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::VectorStepper_O),_Domain), "_Domain" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::VectorStepper_O),_Index), "_Index" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__ConsStepper_O, sizeof(core::ConsStepper_O), 0, "core::ConsStepper_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::ConsStepper_O),_Cur), "_Cur" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__WeakPointer_O, sizeof(core::WeakPointer_O), 0, "core::WeakPointer_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::WeakPointer>), offsetof(SAFE_TYPE_MACRO(core::WeakPointer_O),_WeakObject.pointer), "_WeakObject.pointer" }, // public: (T T) fixable: TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_llvmo__DebugLoc_O, sizeof(llvmo::DebugLoc_O), 0, "llvmo::DebugLoc_O" },
{ class_kind, STAMP_core__SNode_O, sizeof(core::SNode_O), 0, "core::SNode_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SNode_O),_RefCount), "_RefCount" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__BranchSNode_O, sizeof(core::BranchSNode_O), 0, "core::BranchSNode_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BranchSNode_O),_RefCount), "_RefCount" }, // public: (NIL) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::BranchSNode_O),_Kind), "_Kind" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::BranchSNode_O),_SNodePList), "_SNodePList" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, POINTER_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::BranchSNode_O),_VectorSNodes.theObject), "_VectorSNodes.theObject" }, // public: (T T) fixable: RAW-TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_core__LeafSNode_O, sizeof(core::LeafSNode_O), 0, "core::LeafSNode_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::LeafSNode_O),_RefCount), "_RefCount" }, // public: (NIL) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LeafSNode_O),_Object), "_Object" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__ModuleHandle_O, sizeof(llvmo::ModuleHandle_O), 0, "llvmo::ModuleHandle_O" },
{ class_kind, STAMP_core__Pointer_O, sizeof(core::Pointer_O), 0, "core::Pointer_O" },
{ class_kind, STAMP_clasp_ffi__ForeignData_O, sizeof(clasp_ffi::ForeignData_O), 0, "clasp_ffi::ForeignData_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignData_O),m_kind), "m_kind" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(clasp_ffi::ForeignData_O),m_size), "m_size" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__CxxObject_O, sizeof(core::CxxObject_O), 0, "core::CxxObject_O" },
{ class_kind, STAMP_llvmo__DINodeArray_O, sizeof(llvmo::DINodeArray_O), 0, "llvmo::DINodeArray_O" },
{ class_kind, STAMP_core__NativeVector_float_O, sizeof(core::NativeVector_float_O), 0, "core::NativeVector_float_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<float>>), offsetof(SAFE_TYPE_MACRO(core::NativeVector_float_O),_Vector._Vector._Contents), "_Vector._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_clcenv__Info_O, sizeof(clcenv::Info_O), 0, "clcenv::Info_O" },
{ class_kind, STAMP_clcenv__OptimizeInfo_O, sizeof(clcenv::OptimizeInfo_O), 0, "clcenv::OptimizeInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::OptimizeInfo_O),_Speed), "_Speed" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::OptimizeInfo_O),_Debug), "_Debug" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::OptimizeInfo_O),_Space), "_Space" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::OptimizeInfo_O),_Safety), "_Safety" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::OptimizeInfo_O),_CompilationSpeed), "_CompilationSpeed" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__BlockInfo_O, sizeof(clcenv::BlockInfo_O), 0, "clcenv::BlockInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::BlockInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::BlockInfo_O),_Identity), "_Identity" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__FunctionInfo_O, sizeof(clcenv::FunctionInfo_O), 0, "clcenv::FunctionInfo_O" },
{ class_kind, STAMP_clcenv__GlobalMacroInfo_O, sizeof(clcenv::GlobalMacroInfo_O), 0, "clcenv::GlobalMacroInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalMacroInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalMacroInfo_O),_Expander), "_Expander" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalMacroInfo_O),_CompilerMacro), "_CompilerMacro" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__LocalMacroInfo_O, sizeof(clcenv::LocalMacroInfo_O), 0, "clcenv::LocalMacroInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalMacroInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalMacroInfo_O),_Expander), "_Expander" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__LocalFunctionInfo_O, sizeof(clcenv::LocalFunctionInfo_O), 0, "clcenv::LocalFunctionInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalFunctionInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalFunctionInfo_O),_Identity), "_Identity" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalFunctionInfo_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalFunctionInfo_O),_Inline), "_Inline" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalFunctionInfo_O),_Ignore), "_Ignore" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalFunctionInfo_O),_Ast), "_Ast" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LocalFunctionInfo_O),_DynamicExtent), "_DynamicExtent" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__SpecialOperatorInfo_O, sizeof(clcenv::SpecialOperatorInfo_O), 0, "clcenv::SpecialOperatorInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SpecialOperatorInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__LambdaNameInfo_O, sizeof(clcenv::LambdaNameInfo_O), 0, "clcenv::LambdaNameInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LambdaNameInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__GlobalFunctionInfo_O, sizeof(clcenv::GlobalFunctionInfo_O), 0, "clcenv::GlobalFunctionInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalFunctionInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalFunctionInfo_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalFunctionInfo_O),_Inline), "_Inline" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalFunctionInfo_O),_CompilerMacro), "_CompilerMacro" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalFunctionInfo_O),_Ignore), "_Ignore" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalFunctionInfo_O),_Ast), "_Ast" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalFunctionInfo_O),_DynamicExtent), "_DynamicExtent" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__VariableInfo_O, sizeof(clcenv::VariableInfo_O), 0, "clcenv::VariableInfo_O" },
{ class_kind, STAMP_clcenv__SpecialVariableInfo_O, sizeof(clcenv::SpecialVariableInfo_O), 0, "clcenv::SpecialVariableInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SpecialVariableInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SpecialVariableInfo_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SpecialVariableInfo_O),_Ignore), "_Ignore" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SpecialVariableInfo_O),_GlobalP), "_GlobalP" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__LexicalVariableInfo_O, sizeof(clcenv::LexicalVariableInfo_O), 0, "clcenv::LexicalVariableInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariableInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariableInfo_O),_Identity), "_Identity" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariableInfo_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariableInfo_O),_Ignore), "_Ignore" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariableInfo_O),_DynamicExtent), "_DynamicExtent" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__SymbolMacroInfo_O, sizeof(clcenv::SymbolMacroInfo_O), 0, "clcenv::SymbolMacroInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SymbolMacroInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SymbolMacroInfo_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SymbolMacroInfo_O),_Expansion), "_Expansion" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__ConstantVariableInfo_O, sizeof(clcenv::ConstantVariableInfo_O), 0, "clcenv::ConstantVariableInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::ConstantVariableInfo_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::ConstantVariableInfo_O),_Value), "_Value" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_mp__ConditionVariable_O, sizeof(mp::ConditionVariable_O), 0, "mp::ConditionVariable_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::ConditionVariable_O),_ConditionVariable._ConditionVariable.__count), "_ConditionVariable._ConditionVariable.__count" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::ConditionVariable_O),_ConditionVariable._ConditionVariable.__value.__wch), "_ConditionVariable._ConditionVariable.__value.__wch" }, // public: (T T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::ConditionVariable_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_mp__Mutex_O, sizeof(mp::Mutex_O), 0, "mp::Mutex_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Owner), "_Owner" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Mutex.__count), "_Mutex._Mutex.__count" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Mutex.__value.__wch), "_Mutex._Mutex.__value.__wch" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Counter), "_Mutex._Counter" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::Mutex_O),_Mutex._Recursive), "_Mutex._Recursive" }, // public: (T T) fixable: NIL good-name: T
{ class_kind, STAMP_mp__RecursiveMutex_O, sizeof(mp::RecursiveMutex_O), 0, "mp::RecursiveMutex_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Owner), "_Owner" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Mutex.__count), "_Mutex._Mutex.__count" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Mutex.__value.__wch), "_Mutex._Mutex.__value.__wch" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Counter), "_Mutex._Counter" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::RecursiveMutex_O),_Mutex._Recursive), "_Mutex._Recursive" }, // public: (T T) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__DITypeRefArray_O, sizeof(llvmo::DITypeRefArray_O), 0, "llvmo::DITypeRefArray_O" },
{ class_kind, STAMP_core__NativeVector_double_O, sizeof(core::NativeVector_double_O), 0, "core::NativeVector_double_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<double>>), offsetof(SAFE_TYPE_MACRO(core::NativeVector_double_O),_Vector._Vector._Contents), "_Vector._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_core__NativeVector_int_O, sizeof(core::NativeVector_int_O), 0, "core::NativeVector_int_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<int>>), offsetof(SAFE_TYPE_MACRO(core::NativeVector_int_O),_Vector._Vector._Contents), "_Vector._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_mp__SharedMutex_O, sizeof(mp::SharedMutex_O), 0, "mp::SharedMutex_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_Owner), "_Owner" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadsBlocked), "_SharedMutex.mReadsBlocked" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mMaxReaders), "_SharedMutex.mMaxReaders" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReaders), "_SharedMutex.mReaders" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Mutex.__count), "_SharedMutex.mReadMutex._Mutex.__count" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Mutex.__value.__wch), "_SharedMutex.mReadMutex._Mutex.__value.__wch" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Counter), "_SharedMutex.mReadMutex._Counter" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mReadMutex._Recursive), "_SharedMutex.mReadMutex._Recursive" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Mutex.__count), "_SharedMutex.mWriteMutex._Mutex.__count" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Mutex.__value.__wch), "_SharedMutex.mWriteMutex._Mutex.__value.__wch" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Counter), "_SharedMutex.mWriteMutex._Counter" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::SharedMutex_O),_SharedMutex.mWriteMutex._Recursive), "_SharedMutex.mWriteMutex._Recursive" }, // public: (T T T) fixable: NIL good-name: T
{ class_kind, STAMP_clcenv__Entry_O, sizeof(clcenv::Entry_O), 0, "clcenv::Entry_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Entry_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__VariableType_O, sizeof(clcenv::VariableType_O), 0, "clcenv::VariableType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableType_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableType_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableType_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__VariableIgnore_O, sizeof(clcenv::VariableIgnore_O), 0, "clcenv::VariableIgnore_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableIgnore_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableIgnore_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableIgnore_O),_Ignore), "_Ignore" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__Function_O, sizeof(clcenv::Function_O), 0, "clcenv::Function_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Function_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Function_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Function_O),_Identity), "_Identity" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__SymbolMacro_O, sizeof(clcenv::SymbolMacro_O), 0, "clcenv::SymbolMacro_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SymbolMacro_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SymbolMacro_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SymbolMacro_O),_Expansion), "_Expansion" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__FunctionDynamicExtent_O, sizeof(clcenv::FunctionDynamicExtent_O), 0, "clcenv::FunctionDynamicExtent_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionDynamicExtent_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionDynamicExtent_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__Inline_O, sizeof(clcenv::Inline_O), 0, "clcenv::Inline_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Inline_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Inline_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Inline_O),_Inline), "_Inline" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__Closure_O, sizeof(clcenv::Closure_O), 0, "clcenv::Closure_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Closure_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__Optimize_O, sizeof(clcenv::Optimize_O), 0, "clcenv::Optimize_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Optimize_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Optimize_O),_Quality), "_Quality" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Optimize_O),_Value), "_Value" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__LambdaName_O, sizeof(clcenv::LambdaName_O), 0, "clcenv::LambdaName_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LambdaName_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LambdaName_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__Tag_O, sizeof(clcenv::Tag_O), 0, "clcenv::Tag_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Tag_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Tag_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Tag_O),_Identity), "_Identity" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__Block_O, sizeof(clcenv::Block_O), 0, "clcenv::Block_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Block_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Block_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Block_O),_Identity), "_Identity" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__FunctionType_O, sizeof(clcenv::FunctionType_O), 0, "clcenv::FunctionType_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionType_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionType_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionType_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__GlobalEnvironment_O, sizeof(clcenv::GlobalEnvironment_O), 0, "clcenv::GlobalEnvironment_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::GlobalEnvironment_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__VariableDynamicExtent_O, sizeof(clcenv::VariableDynamicExtent_O), 0, "clcenv::VariableDynamicExtent_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableDynamicExtent_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::VariableDynamicExtent_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__LexicalVariable_O, sizeof(clcenv::LexicalVariable_O), 0, "clcenv::LexicalVariable_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariable_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariable_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::LexicalVariable_O),_Identity), "_Identity" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__SpecialVariable_O, sizeof(clcenv::SpecialVariable_O), 0, "clcenv::SpecialVariable_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SpecialVariable_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::SpecialVariable_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__Macro_O, sizeof(clcenv::Macro_O), 0, "clcenv::Macro_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Macro_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Macro_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::Macro_O),_Expander), "_Expander" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clcenv__FunctionIgnore_O, sizeof(clcenv::FunctionIgnore_O), 0, "clcenv::FunctionIgnore_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionIgnore_O),_Next), "_Next" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionIgnore_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(clcenv::FunctionIgnore_O),_Ignore), "_Ignore" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_mp__Process_O, sizeof(mp::Process_O), 0, "mp::Process_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Function), "_Function" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Arguments), "_Arguments" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_InitialSpecialBindings), "_InitialSpecialBindings" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_ReturnValuesList), "_ReturnValuesList" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_StackSize), "_StackSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Thread), "_Thread" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Active._ConditionVariable.__count), "_Active._ConditionVariable.__count" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_Active._ConditionVariable.__value.__wch), "_Active._ConditionVariable.__value.__wch" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_ExitBarrier._Mutex.__count), "_ExitBarrier._Mutex.__count" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_ExitBarrier._Mutex.__value.__wch), "_ExitBarrier._Mutex.__value.__wch" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_ExitBarrier._Counter), "_ExitBarrier._Counter" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::Process_O),_ExitBarrier._Recursive), "_ExitBarrier._Recursive" }, // public: (T T) fixable: NIL good-name: T
{ class_kind, STAMP_core__SingleDispatchMethod_O, sizeof(core::SingleDispatchMethod_O), 0, "core::SingleDispatchMethod_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_name), "_name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_receiver_class), "_receiver_class" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::LambdaListHandler_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_argument_handler), "_argument_handler" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_declares), "_declares" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_docstring), "_docstring" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleDispatchMethodFunction_O>), offsetof(SAFE_TYPE_MACRO(core::SingleDispatchMethod_O),_body), "_body" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Iterator_O, sizeof(core::Iterator_O), 0, "core::Iterator_O" },
{ class_kind, STAMP_core__RecursiveDirectoryIterator_O, sizeof(core::RecursiveDirectoryIterator_O), 0, "core::RecursiveDirectoryIterator_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Path_O>), offsetof(SAFE_TYPE_MACRO(core::RecursiveDirectoryIterator_O),_Path), "_Path" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::RecursiveDirectoryIterator_O),_EnterHidden), "_EnterHidden" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__DirectoryIterator_O, sizeof(core::DirectoryIterator_O), 0, "core::DirectoryIterator_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Path_O>), offsetof(SAFE_TYPE_MACRO(core::DirectoryIterator_O),_Path), "_Path" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__InsertPoint_O, sizeof(llvmo::InsertPoint_O), 0, "llvmo::InsertPoint_O" },
{ class_kind, STAMP_core__Array_O, sizeof(core::Array_O), 0, "core::Array_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::Array_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__AbstractSimpleVector_O, sizeof(core::AbstractSimpleVector_O), 0, "core::AbstractSimpleVector_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::AbstractSimpleVector_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__SimpleVectorFloat_O, sizeof(core::SimpleVectorFloat_O), 0, "core::SimpleVectorFloat_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVectorFloat_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVectorFloat_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(float), offsetof(SAFE_TYPE_MACRO(core::SimpleVectorFloat_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVectorFloat_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float")>
{    variable_field, ctype_float, sizeof(float), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_byte64_t_O, sizeof(core::SimpleVector_byte64_t_O), 0, "core::SimpleVector_byte64_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte64_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_int64_t_O, sizeof(core::SimpleVector_int64_t_O), 0, "core::SimpleVector_int64_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int64_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")>
{    variable_field, ctype_long, sizeof(long), 0, "only" },
{ class_kind, STAMP_core__SimpleString_O, sizeof(core::SimpleString_O), 0, "core::SimpleString_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleString_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__SimpleCharacterString_O, sizeof(core::SimpleCharacterString_O), 0, "core::SimpleCharacterString_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleCharacterString_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
{ class_kind, STAMP_core__SimpleBaseString_O, sizeof(core::SimpleBaseString_O), 0, "core::SimpleBaseString_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned char), offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleBaseString_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char")>
{    variable_field, ctype_unsigned_char, sizeof(unsigned char), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_int16_t_O, sizeof(core::SimpleVector_int16_t_O), 0, "core::SimpleVector_int16_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(short), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int16_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short")>
{    variable_field, ctype_short, sizeof(short), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_byte16_t_O, sizeof(core::SimpleVector_byte16_t_O), 0, "core::SimpleVector_byte16_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned short), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte16_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short")>
{    variable_field, ctype_unsigned_short, sizeof(unsigned short), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_fixnum_O, sizeof(core::SimpleVector_fixnum_O), 0, "core::SimpleVector_fixnum_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_fixnum_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")>
{    variable_field, ctype_long, sizeof(long), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_int8_t_O, sizeof(core::SimpleVector_int8_t_O), 0, "core::SimpleVector_int8_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(signed char), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int8_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char")>
{    variable_field, ctype_signed_char, sizeof(signed char), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_O, sizeof(core::SimpleVector_O), 0, "core::SimpleVector_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_O),_Data._Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_byte8_t_O, sizeof(core::SimpleVector_byte8_t_O), 0, "core::SimpleVector_byte8_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned char), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte8_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char")>
{    variable_field, ctype_unsigned_char, sizeof(unsigned char), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_int32_t_O, sizeof(core::SimpleVector_int32_t_O), 0, "core::SimpleVector_int32_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_int32_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
{ class_kind, STAMP_core__SimpleBitVector_O, sizeof(core::SimpleBitVector_O), 0, "core::SimpleBitVector_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_bit_array0, 1, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleBitVector_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")>
{    variable_field, ctype_unsigned_int, sizeof(unsigned int), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_byte32_t_O, sizeof(core::SimpleVector_byte32_t_O), 0, "core::SimpleVector_byte32_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_byte32_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")>
{    variable_field, ctype_unsigned_int, sizeof(unsigned int), 0, "only" },
{ class_kind, STAMP_core__SimpleVector_size_t_O, sizeof(core::SimpleVector_size_t_O), 0, "core::SimpleVector_size_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVector_size_t_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleVectorDouble_O, sizeof(core::SimpleVectorDouble_O), 0, "core::SimpleVectorDouble_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleVectorDouble_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleVectorDouble_O),_Data._Data), "_Data._Data" },
 {  variable_capacity, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::SimpleVectorDouble_O),_Data._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleVectorDouble_O),_Data._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")>
{    variable_field, ctype_double, sizeof(double), 0, "only" },
{ class_kind, STAMP_core__MDArray_O, sizeof(core::MDArray_O), 0, "core::MDArray_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__BitVectorNs_O, sizeof(core::BitVectorNs_O), 0, "core::BitVectorNs_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::BitVectorNs_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_byte64_t_O, sizeof(core::MDArray_byte64_t_O), 0, "core::MDArray_byte64_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_int16_t_O, sizeof(core::MDArray_int16_t_O), 0, "core::MDArray_int16_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_int8_t_O, sizeof(core::MDArray_int8_t_O), 0, "core::MDArray_int8_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArrayCharacter_O, sizeof(core::MDArrayCharacter_O), 0, "core::MDArrayCharacter_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayCharacter_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_int32_t_O, sizeof(core::MDArray_int32_t_O), 0, "core::MDArray_int32_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArrayFloat_O, sizeof(core::MDArrayFloat_O), 0, "core::MDArrayFloat_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayFloat_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__StrNs_O, sizeof(core::StrNs_O), 0, "core::StrNs_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::StrNs_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__StrWNs_O, sizeof(core::StrWNs_O), 0, "core::StrWNs_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::StrWNs_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__Str8Ns_O, sizeof(core::Str8Ns_O), 0, "core::Str8Ns_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::Str8Ns_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArrayDouble_O, sizeof(core::MDArrayDouble_O), 0, "core::MDArrayDouble_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayDouble_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArrayT_O, sizeof(core::MDArrayT_O), 0, "core::MDArrayT_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayT_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_size_t_O, sizeof(core::MDArray_size_t_O), 0, "core::MDArray_size_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_size_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_byte8_t_O, sizeof(core::MDArray_byte8_t_O), 0, "core::MDArray_byte8_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArrayBit_O, sizeof(core::MDArrayBit_O), 0, "core::MDArrayBit_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayBit_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_int64_t_O, sizeof(core::MDArray_int64_t_O), 0, "core::MDArray_int64_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_int64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_byte16_t_O, sizeof(core::MDArray_byte16_t_O), 0, "core::MDArray_byte16_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_byte32_t_O, sizeof(core::MDArray_byte32_t_O), 0, "core::MDArray_byte32_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_byte32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_O, sizeof(core::SimpleMDArray_O), 0, "core::SimpleMDArray_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_int8_t_O, sizeof(core::SimpleMDArray_int8_t_O), 0, "core::SimpleMDArray_int8_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArrayCharacter_O, sizeof(core::SimpleMDArrayCharacter_O), 0, "core::SimpleMDArrayCharacter_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayCharacter_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_fixnum_O, sizeof(core::SimpleMDArray_fixnum_O), 0, "core::SimpleMDArray_fixnum_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_fixnum_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_byte32_t_O, sizeof(core::SimpleMDArray_byte32_t_O), 0, "core::SimpleMDArray_byte32_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_byte16_t_O, sizeof(core::SimpleMDArray_byte16_t_O), 0, "core::SimpleMDArray_byte16_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArrayT_O, sizeof(core::SimpleMDArrayT_O), 0, "core::SimpleMDArrayT_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayT_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_int32_t_O, sizeof(core::SimpleMDArray_int32_t_O), 0, "core::SimpleMDArray_int32_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int32_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArrayDouble_O, sizeof(core::SimpleMDArrayDouble_O), 0, "core::SimpleMDArrayDouble_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayDouble_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArrayBaseChar_O, sizeof(core::SimpleMDArrayBaseChar_O), 0, "core::SimpleMDArrayBaseChar_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBaseChar_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_byte64_t_O, sizeof(core::SimpleMDArray_byte64_t_O), 0, "core::SimpleMDArray_byte64_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArrayBit_O, sizeof(core::SimpleMDArrayBit_O), 0, "core::SimpleMDArrayBit_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayBit_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_int16_t_O, sizeof(core::SimpleMDArray_int16_t_O), 0, "core::SimpleMDArray_int16_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int16_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_byte8_t_O, sizeof(core::SimpleMDArray_byte8_t_O), 0, "core::SimpleMDArray_byte8_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_byte8_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_size_t_O, sizeof(core::SimpleMDArray_size_t_O), 0, "core::SimpleMDArray_size_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_size_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArray_int64_t_O, sizeof(core::SimpleMDArray_int64_t_O), 0, "core::SimpleMDArray_int64_t_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArray_int64_t_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__SimpleMDArrayFloat_O, sizeof(core::SimpleMDArrayFloat_O), 0, "core::SimpleMDArrayFloat_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::SimpleMDArrayFloat_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArray_fixnum_O, sizeof(core::MDArray_fixnum_O), 0, "core::MDArray_fixnum_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArray_fixnum_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__MDArrayBaseChar_O, sizeof(core::MDArrayBaseChar_O), 0, "core::MDArrayBaseChar_O" },
 {  fixed_field, CONSTANT_ARRAY_OFFSET, sizeof(UnknownType), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Length), "_Length" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_FillPointerOrLengthOrDummy), "_FillPointerOrLengthOrDummy" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_ArrayTotalSize), "_ArrayTotalSize" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Data), "_Data" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_DisplacedIndexOffset), "_DisplacedIndexOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Flags._Flags), "_Flags._Flags" }, // public: (T T) fixable: NIL good-name: T
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Dimensions._Data), "_Dimensions._Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Dimensions._Length), offsetof(SAFE_TYPE_MACRO(core::MDArrayBaseChar_O),_Dimensions._Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ class_kind, STAMP_core__Symbol_O, sizeof(core::Symbol_O), 0, "core::Symbol_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_HomePackage_spinlock.lck._M_i), "_HomePackage_spinlock.lck._M_i" }, // public: (T NIL T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_HomePackage), "_HomePackage" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_GlobalValue), "_GlobalValue" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_Function), "_Function" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_SetfFunction), "_SetfFunction" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_Binding), "_Binding" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_IsSpecial), "_IsSpecial" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_IsConstant), "_IsConstant" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_IsMacro), "_IsMacro" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Symbol_O),_PropertyList), "_PropertyList" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Null_O, sizeof(core::Null_O), 0, "core::Null_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Null_O),_HomePackage_spinlock.lck._M_i), "_HomePackage_spinlock.lck._M_i" }, // public: (T NIL T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_HomePackage), "_HomePackage" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_GlobalValue), "_GlobalValue" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_Function), "_Function" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Function_O>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_SetfFunction), "_SetfFunction" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Null_O),_Binding), "_Binding" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Null_O),_IsSpecial), "_IsSpecial" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Null_O),_IsConstant), "_IsConstant" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Null_O),_IsMacro), "_IsMacro" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Null_O),_PropertyList), "_PropertyList" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_mp__BlockingConcurrentQueue_O, sizeof(mp::BlockingConcurrentQueue_O), 0, "mp::BlockingConcurrentQueue_O" },
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.producerCount._M_i), "_Queue.inner.producerCount._M_i" }, // public: (NIL NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.initialBlockPoolIndex._M_i), "_Queue.inner.initialBlockPoolIndex._M_i" }, // public: (NIL NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.initialBlockPoolSize), "_Queue.inner.initialBlockPoolSize" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.implicitProducerHashCount._M_i), "_Queue.inner.implicitProducerHashCount._M_i" }, // public: (NIL NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.initialImplicitProducerHash.capacity), "_Queue.inner.initialImplicitProducerHash.capacity" }, // public: (NIL NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.implicitProducerHashResizeInProgress._M_i), "_Queue.inner.implicitProducerHashResizeInProgress._M_i" }, // public: (NIL NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.nextExplicitConsumerId._M_i), "_Queue.inner.nextExplicitConsumerId._M_i" }, // public: (NIL NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::BlockingConcurrentQueue_O),_Queue.inner.globalExplicitConsumerOffset._M_i), "_Queue.inner.globalExplicitConsumerOffset._M_i" }, // public: (NIL NIL NIL NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__Path_O, sizeof(core::Path_O), 0, "core::Path_O" },
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Path_O),_Path.m_pathname._M_string_length), "_Path.m_pathname._M_string_length" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Path_O),_Path.m_pathname.NO-NAME._M_allocated_capacity), "_Path.m_pathname.NO-NAME._M_allocated_capacity" }, // public: (NIL NIL NIL T) fixable: NIL good-name: T
{ class_kind, STAMP_core__Character_dummy_O, sizeof(core::Character_dummy_O), 0, "core::Character_dummy_O" },
{ class_kind, STAMP_core__SourceManager_O, sizeof(core::SourceManager_O), 0, "core::SourceManager_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::WeakKeyHashTable_O>), offsetof(SAFE_TYPE_MACRO(core::SourceManager_O),_SourcePosInfo), "_SourcePosInfo" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_llvmo__DataLayout_O, sizeof(llvmo::DataLayout_O), 0, "llvmo::DataLayout_O" },
{ class_kind, STAMP_core__Pathname_O, sizeof(core::Pathname_O), 0, "core::Pathname_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Host), "_Host" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Device), "_Device" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Directory), "_Directory" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Pathname_O),_Version), "_Version" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__LogicalPathname_O, sizeof(core::LogicalPathname_O), 0, "core::LogicalPathname_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Host), "_Host" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Device), "_Device" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Directory), "_Directory" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Type), "_Type" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::LogicalPathname_O),_Version), "_Version" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Cache_O, sizeof(core::Cache_O), 0, "core::Cache_O" },
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_searches), "_searches" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_misses), "_misses" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_total_depth), "_total_depth" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_keys._Vector._Contents), "_keys._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::CacheRecord>>), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_table._Vector._Contents), "_table._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_generation), "_generation" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_clear_list_spinlock.lck._M_i), "_clear_list_spinlock.lck._M_i" }, // public: (T NIL T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cache_O),_clear_list_safe), "_clear_list_safe" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__LoadTimeValues_O, sizeof(core::LoadTimeValues_O), 0, "core::LoadTimeValues_O" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::LoadTimeValues_O),_Objects._Vector._Contents), "_Objects._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
{ class_kind, STAMP_core__SharpEqualWrapper_O, sizeof(core::SharpEqualWrapper_O), 0, "core::SharpEqualWrapper_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SharpEqualWrapper_O),_Value), "_Value" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Number_O, sizeof(core::Number_O), 0, "core::Number_O" },
{ class_kind, STAMP_core__Real_O, sizeof(core::Real_O), 0, "core::Real_O" },
{ class_kind, STAMP_core__Rational_O, sizeof(core::Rational_O), 0, "core::Rational_O" },
{ class_kind, STAMP_core__Ratio_O, sizeof(core::Ratio_O), 0, "core::Ratio_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(core::Ratio_O),_numerator), "_numerator" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(core::Ratio_O),_denominator), "_denominator" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Integer_O, sizeof(core::Integer_O), 0, "core::Integer_O" },
{ class_kind, STAMP_core__Bignum_O, sizeof(core::Bignum_O), 0, "core::Bignum_O" },
{ class_kind, STAMP_core__Fixnum_dummy_O, sizeof(core::Fixnum_dummy_O), 0, "core::Fixnum_dummy_O" },
{ class_kind, STAMP_core__Float_O, sizeof(core::Float_O), 0, "core::Float_O" },
{ class_kind, STAMP_core__DoubleFloat_O, sizeof(core::DoubleFloat_O), 0, "core::DoubleFloat_O" },
// not-exposing {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::DoubleFloat_O),_Value), "_Value" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__SingleFloat_dummy_O, sizeof(core::SingleFloat_dummy_O), 0, "core::SingleFloat_dummy_O" },
{ class_kind, STAMP_core__LongFloat_O, sizeof(core::LongFloat_O), 0, "core::LongFloat_O" },
{ class_kind, STAMP_core__ShortFloat_O, sizeof(core::ShortFloat_O), 0, "core::ShortFloat_O" },
// not-exposing {  fixed_field, ctype_float, sizeof(float), offsetof(SAFE_TYPE_MACRO(core::ShortFloat_O),_Value), "_Value" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__Complex_O, sizeof(core::Complex_O), 0, "core::Complex_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Real_O>), offsetof(SAFE_TYPE_MACRO(core::Complex_O),_real), "_real" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Real_O>), offsetof(SAFE_TYPE_MACRO(core::Complex_O),_imaginary), "_imaginary" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Stream_O, sizeof(core::Stream_O), 0, "core::Stream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Stream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
{ class_kind, STAMP_core__AnsiStream_O, sizeof(core::AnsiStream_O), 0, "core::AnsiStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::AnsiStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
{ class_kind, STAMP_core__TwoWayStream_O, sizeof(core::TwoWayStream_O), 0, "core::TwoWayStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_In), "_In" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::TwoWayStream_O),_Out), "_Out" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__BroadcastStream_O, sizeof(core::BroadcastStream_O), 0, "core::BroadcastStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::BroadcastStream_O),_Streams), "_Streams" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__SynonymStream_O, sizeof(core::SynonymStream_O), 0, "core::SynonymStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::SynonymStream_O),_SynonymSymbol), "_SynonymSymbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__ConcatenatedStream_O, sizeof(core::ConcatenatedStream_O), 0, "core::ConcatenatedStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ConcatenatedStream_O),_List), "_List" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__StringStream_O, sizeof(core::StringStream_O), 0, "core::StringStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
{ class_kind, STAMP_core__StringOutputStream_O, sizeof(core::StringOutputStream_O), 0, "core::StringOutputStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StringOutputStream_O),_Contents), "_Contents" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__StringInputStream_O, sizeof(core::StringInputStream_O), 0, "core::StringInputStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Array_O>), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_Contents), "_Contents" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputPosition), "_InputPosition" }, // public: (NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::StringInputStream_O),_InputLimit), "_InputLimit" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__FileStream_O, sizeof(core::FileStream_O), 0, "core::FileStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_Filename), "_Filename" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::FileStream_O),_ElementType), "_ElementType" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__IOFileStream_O, sizeof(core::IOFileStream_O), 0, "core::IOFileStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_Filename), "_Filename" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_ElementType), "_ElementType" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOFileStream_O),_FileDescriptor), "_FileDescriptor" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__IOStreamStream_O, sizeof(core::IOStreamStream_O), 0, "core::IOStreamStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_Filename), "_Filename" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::IOStreamStream_O),_ElementType), "_ElementType" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__EchoStream_O, sizeof(core::EchoStream_O), 0, "core::EchoStream_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Closed), "_Closed" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Format), "_Format" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_ByteSize), "_ByteSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Flags), "_Flags" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_ByteStack), "_ByteStack" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_FormatTable), "_FormatTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_EofChar), "_EofChar" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_LastOp), "_LastOp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_LastChar), "_LastChar" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_ExternalFormat), "_ExternalFormat" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_OutputColumn), "_OutputColumn" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._CursorIsValid), "_InputCursor._CursorIsValid" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._LineNumber), "_InputCursor._LineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._Column), "_InputCursor._Column" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, ctype_long_long, sizeof(long long), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._PrevLineNumber), "_InputCursor._PrevLineNumber" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_InputCursor._PrevColumn), "_InputCursor._PrevColumn" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_In), "_In" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::EchoStream_O),_Out), "_Out" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Package_O, sizeof(core::Package_O), 0, "core::Package_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_InternalSymbols), "_InternalSymbols" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_ExternalSymbols), "_ExternalSymbols" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Shadowing), "_Shadowing" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SimpleString_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Name), "_Name" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_UsingPackages._Vector._Contents), "_UsingPackages._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_PackagesUsedBy._Vector._Contents), "_PackagesUsedBy._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_KeywordPackage._M_base._M_i), "_KeywordPackage._M_base._M_i" }, // public: (T NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_AmpPackage._M_base._M_i), "_AmpPackage._M_base._M_i" }, // public: (T NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_ActsLikeKeywordPackage._M_base._M_i), "_ActsLikeKeywordPackage._M_base._M_i" }, // public: (T NIL NIL) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Nicknames), "_Nicknames" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Documentation), "_Documentation" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Mutex.__count), "_Lock._r._Mutex.__count" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Mutex.__value.__wch), "_Lock._r._Mutex.__value.__wch" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Counter), "_Lock._r._Counter" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._r._Recursive), "_Lock._r._Recursive" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Mutex.__count), "_Lock._g._Mutex.__count" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Mutex.__value.__wch), "_Lock._g._Mutex.__value.__wch" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Counter), "_Lock._g._Counter" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._g._Recursive), "_Lock._g._Recursive" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Package_O),_Lock._b), "_Lock._b" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Package_O),systemLockedP), "systemLockedP" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_llvmo__ClaspJIT_O, sizeof(llvmo::ClaspJIT_O), 0, "llvmo::ClaspJIT_O" },
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),DL.BigEndian), "DL.BigEndian" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),DL.AllocaAddrSpace), "DL.AllocaAddrSpace" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),DL.StackNaturalAlign), "DL.StackNaturalAlign" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),DL.StringRepresentation._M_string_length), "DL.StringRepresentation._M_string_length" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),DL.StringRepresentation.NO-NAME._M_allocated_capacity), "DL.StringRepresentation.NO-NAME._M_allocated_capacity" }, // public: (NIL NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),ObjectLayer.LinkedObjList._M_impl._M_node._M_data), "ObjectLayer.LinkedObjList._M_impl._M_node._M_data" }, // public: (NIL NIL NIL T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_void_(std___Undefined_class__*)(void), sizeof(void (std::_Undefined_class::*)(void)), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),ObjectLayer.GetMemMgr._M_functor._M_unused._M_member_pointer), "ObjectLayer.GetMemMgr._M_functor._M_unused._M_member_pointer" }, // public: (NIL NIL T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_void_(std___Undefined_class__*)(void), sizeof(void (std::_Undefined_class::*)(void)), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),ObjectLayer.NotifyLoaded._M_functor._M_unused._M_member_pointer), "ObjectLayer.NotifyLoaded._M_functor._M_unused._M_member_pointer" }, // public: (NIL NIL T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_void_(std___Undefined_class__*)(void), sizeof(void (std::_Undefined_class::*)(void)), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),ObjectLayer.NotifyFinalized._M_functor._M_unused._M_member_pointer), "ObjectLayer.NotifyFinalized._M_functor._M_unused._M_member_pointer" }, // public: (NIL NIL T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),ObjectLayer.ProcessAllSections), "ObjectLayer.ProcessAllSections" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_void_(std___Undefined_class__*)(void), sizeof(void (std::_Undefined_class::*)(void)), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),OptimizeLayer.Transform._M_functor._M_unused._M_member_pointer), "OptimizeLayer.Transform._M_functor._M_unused._M_member_pointer" }, // public: (NIL NIL T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(llvmo::ClaspJIT_O),ModuleHandles), "ModuleHandles" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__FileStatus_O, sizeof(core::FileStatus_O), 0, "core::FileStatus_O" },
{ class_kind, STAMP_core__InvocationHistoryFrameIterator_O, sizeof(core::InvocationHistoryFrameIterator_O), 0, "core::InvocationHistoryFrameIterator_O" },
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::InvocationHistoryFrameIterator_O),_Index), "_Index" }, // public: (NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__PosixTime_O, sizeof(core::PosixTime_O), 0, "core::PosixTime_O" },
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::PosixTime_O),_Time.time_.time_count_.value_), "_Time.time_.time_count_.value_" }, // public: (NIL NIL NIL NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__HashTable_O, sizeof(core::HashTable_O), 0, "core::HashTable_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_RehashSize), "_RehashSize" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_RehashThreshold), "_RehashThreshold" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::MDArrayT_O>), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_HashTable), "_HashTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_HashTableCount), "_HashTableCount" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_Mutex), "_Mutex" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // public: (T T) fixable: NIL good-name: NIL
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTable_O),_LocationDependency._rs), "_LocationDependency._rs" }, // public: (T T) fixable: NIL good-name: NIL
{ class_kind, STAMP_core__HashTableEqual_O, sizeof(core::HashTableEqual_O), 0, "core::HashTableEqual_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_RehashSize), "_RehashSize" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_RehashThreshold), "_RehashThreshold" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::MDArrayT_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_HashTable), "_HashTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_HashTableCount), "_HashTableCount" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_Mutex), "_Mutex" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // public: (T T) fixable: NIL good-name: NIL
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqual_O),_LocationDependency._rs), "_LocationDependency._rs" }, // public: (T T) fixable: NIL good-name: NIL
{ class_kind, STAMP_core__HashTableEqualp_O, sizeof(core::HashTableEqualp_O), 0, "core::HashTableEqualp_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_RehashSize), "_RehashSize" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_RehashThreshold), "_RehashThreshold" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::MDArrayT_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_HashTable), "_HashTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_HashTableCount), "_HashTableCount" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_Mutex), "_Mutex" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // public: (T T) fixable: NIL good-name: NIL
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEqualp_O),_LocationDependency._rs), "_LocationDependency._rs" }, // public: (T T) fixable: NIL good-name: NIL
{ class_kind, STAMP_core__HashTableEq_O, sizeof(core::HashTableEq_O), 0, "core::HashTableEq_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_RehashSize), "_RehashSize" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_RehashThreshold), "_RehashThreshold" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::MDArrayT_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_HashTable), "_HashTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_HashTableCount), "_HashTableCount" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_Mutex), "_Mutex" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // public: (T T) fixable: NIL good-name: NIL
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEq_O),_LocationDependency._rs), "_LocationDependency._rs" }, // public: (T T) fixable: NIL good-name: NIL
{ class_kind, STAMP_core__HashTableEql_O, sizeof(core::HashTableEql_O), 0, "core::HashTableEql_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Number_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_RehashSize), "_RehashSize" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, ctype_double, sizeof(double), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_RehashThreshold), "_RehashThreshold" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::MDArrayT_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_HashTable), "_HashTable" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_HashTableCount), "_HashTableCount" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<mp::SharedMutex_O>), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_Mutex), "_Mutex" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_LocationDependency._epoch), "_LocationDependency._epoch" }, // public: (T T) fixable: NIL good-name: NIL
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::HashTableEql_O),_LocationDependency._rs), "_LocationDependency._rs" }, // public: (T T) fixable: NIL good-name: NIL
{ class_kind, STAMP_core__Exposer_O, sizeof(core::Exposer_O), 0, "core::Exposer_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Exposer_O),_Package), "_Package" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Exposer_O),_PackageName._M_string_length), "_PackageName._M_string_length" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Exposer_O),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // public: (NIL NIL T) fixable: NIL good-name: T
{ class_kind, STAMP_core__CoreExposer_O, sizeof(core::CoreExposer_O), 0, "core::CoreExposer_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::CoreExposer_O),_Package), "_Package" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::CoreExposer_O),_PackageName._M_string_length), "_PackageName._M_string_length" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::CoreExposer_O),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // public: (NIL NIL T) fixable: NIL good-name: T
{ class_kind, STAMP_asttooling__AsttoolingExposer_O, sizeof(asttooling::AsttoolingExposer_O), 0, "asttooling::AsttoolingExposer_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(asttooling::AsttoolingExposer_O),_Package), "_Package" }, // public: (NIL) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(asttooling::AsttoolingExposer_O),_PackageName._M_string_length), "_PackageName._M_string_length" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(asttooling::AsttoolingExposer_O),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // public: (NIL NIL T) fixable: NIL good-name: T
{ class_kind, STAMP_core__SourcePosInfo_O, sizeof(core::SourcePosInfo_O), 0, "core::SourcePosInfo_O" },
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_FileId), "_FileId" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_Filepos), "_Filepos" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_Lineno), "_Lineno" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::SourcePosInfo_O),_Column), "_Column" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__IntArray_O, sizeof(core::IntArray_O), 0, "core::IntArray_O" },
{ class_kind, STAMP_core__SourceFileInfo_O, sizeof(core::SourceFileInfo_O), 0, "core::SourceFileInfo_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Pathname_O>), offsetof(SAFE_TYPE_MACRO(core::SourceFileInfo_O),_pathname), "_pathname" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::SourceFileInfo_O),_FileHandle), "_FileHandle" }, // public: (T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::SourceFileInfo_O),_SourceDebugNamestring), "_SourceDebugNamestring" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SourceFileInfo_O),_SourceDebugOffset), "_SourceDebugOffset" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::SourceFileInfo_O),_TrackLineno), "_TrackLineno" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_core__DirectoryEntry_O, sizeof(core::DirectoryEntry_O), 0, "core::DirectoryEntry_O" },
{ class_kind, STAMP_core__LightUserData_O, sizeof(core::LightUserData_O), 0, "core::LightUserData_O" },
{ class_kind, STAMP_core__UserData_O, sizeof(core::UserData_O), 0, "core::UserData_O" },
{ class_kind, STAMP_core__Record_O, sizeof(core::Record_O), 0, "core::Record_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Record_O),_alist), "_alist" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Record_O),_replacement_table), "_replacement_table" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Record_O),_Seen), "_Seen" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_clbind__ClassRegistry_O, sizeof(clbind::ClassRegistry_O), 0, "clbind::ClassRegistry_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEql_O>), offsetof(SAFE_TYPE_MACRO(clbind::ClassRegistry_O),m_classes), "m_classes" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_mp__ConcurrentQueue_O, sizeof(mp::ConcurrentQueue_O), 0, "mp::ConcurrentQueue_O" },
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.producerCount._M_i), "_Queue.producerCount._M_i" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.initialBlockPoolIndex._M_i), "_Queue.initialBlockPoolIndex._M_i" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.initialBlockPoolSize), "_Queue.initialBlockPoolSize" }, // public: (NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.implicitProducerHashCount._M_i), "_Queue.implicitProducerHashCount._M_i" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.initialImplicitProducerHash.capacity), "_Queue.initialImplicitProducerHash.capacity" }, // public: (NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.implicitProducerHashResizeInProgress._M_i), "_Queue.implicitProducerHashResizeInProgress._M_i" }, // public: (NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.nextExplicitConsumerId._M_i), "_Queue.nextExplicitConsumerId._M_i" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(mp::ConcurrentQueue_O),_Queue.globalExplicitConsumerOffset._M_i), "_Queue.globalExplicitConsumerOffset._M_i" }, // public: (NIL NIL NIL) fixable: NIL good-name: T
{ class_kind, STAMP_core__Cons_O, sizeof(core::Cons_O), 0, "core::Cons_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cons_O),_Car), "_Car" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Cons_O),_Cdr), "_Cdr" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ class_kind, STAMP_core__Lisp_O, sizeof(core::Lisp_O), 0, "core::Lisp_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TerminalIO), "_Roots._TerminalIO" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreads), "_Roots._ActiveThreads" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Mutex.__count), "_Roots._ActiveThreadsMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Mutex.__value.__wch), "_Roots._ActiveThreadsMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Counter), "_Roots._ActiveThreadsMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._r._Recursive), "_Roots._ActiveThreadsMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Mutex.__count), "_Roots._ActiveThreadsMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Mutex.__value.__wch), "_Roots._ActiveThreadsMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Counter), "_Roots._ActiveThreadsMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._g._Recursive), "_Roots._ActiveThreadsMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ActiveThreadsMutex._b), "_Roots._ActiveThreadsMutex._b" }, // public: (T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindings), "_Roots._DefaultSpecialBindings" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Mutex.__count), "_Roots._DefaultSpecialBindingsMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Mutex.__value.__wch), "_Roots._DefaultSpecialBindingsMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Counter), "_Roots._DefaultSpecialBindingsMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._r._Recursive), "_Roots._DefaultSpecialBindingsMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Mutex.__count), "_Roots._DefaultSpecialBindingsMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Mutex.__value.__wch), "_Roots._DefaultSpecialBindingsMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Counter), "_Roots._DefaultSpecialBindingsMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._g._Recursive), "_Roots._DefaultSpecialBindingsMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DefaultSpecialBindingsMutex._b), "_Roots._DefaultSpecialBindingsMutex._b" }, // public: (T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Mutex.__count), "_Roots._SyspropMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Mutex.__value.__wch), "_Roots._SyspropMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Counter), "_Roots._SyspropMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._r._Recursive), "_Roots._SyspropMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Mutex.__count), "_Roots._SyspropMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Mutex.__value.__wch), "_Roots._SyspropMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Counter), "_Roots._SyspropMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._g._Recursive), "_Roots._SyspropMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SyspropMutex._b), "_Roots._SyspropMutex._b" }, // public: (T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._Sysprop), "_Roots._Sysprop" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTable_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTable), "_Roots._ClassTable" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Mutex.__count), "_Roots._ClassTableMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Mutex.__value.__wch), "_Roots._ClassTableMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Counter), "_Roots._ClassTableMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._r._Recursive), "_Roots._ClassTableMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Mutex.__count), "_Roots._ClassTableMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Mutex.__value.__wch), "_Roots._ClassTableMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Counter), "_Roots._ClassTableMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._g._Recursive), "_Roots._ClassTableMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassTableMutex._b), "_Roots._ClassTableMutex._b" }, // public: (T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Integer_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._IntegerOverflowAdjust), "_Roots._IntegerOverflowAdjust" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.charInfo.gNamesToCharacterIndex._M_t._M_impl._M_node_count), "_Roots.charInfo.gNamesToCharacterIndex._M_t._M_impl._M_node_count" }, // public: (T T T NIL NIL T) fixable: NIL good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.charInfo.gIndexedCharacters._Vector._Contents), "_Roots.charInfo.gIndexedCharacters._Vector._Contents" }, // public: (T T T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.charInfo.gCharacterNames._Vector._Contents), "_Roots.charInfo.gCharacterNames._Vector._Contents" }, // public: (T T T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ClassSymbolsHolder._Vector._Contents), "_Roots._ClassSymbolsHolder._Vector._Contents" }, // public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFiles._Vector._Contents), "_Roots._SourceFiles._Vector._Contents" }, // public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFileIndices._M_t._M_impl._M_node_count), "_Roots._SourceFileIndices._M_t._M_impl._M_node_count" }, // public: (T T NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Mutex.__count), "_Roots._SourceFilesMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Mutex.__value.__wch), "_Roots._SourceFilesMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Counter), "_Roots._SourceFilesMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._r._Recursive), "_Roots._SourceFilesMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Mutex.__count), "_Roots._SourceFilesMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Mutex.__value.__wch), "_Roots._SourceFilesMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Counter), "_Roots._SourceFilesMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._g._Recursive), "_Roots._SourceFilesMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SourceFilesMutex._b), "_Roots._SourceFilesMutex._b" }, // public: (T T T) fixable: NIL good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<core::SymbolClassPair>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots.bootClassTable._Vector._Contents), "_Roots.bootClassTable._Vector._Contents" }, // public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._CommandLineArguments), "_Roots._CommandLineArguments" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._Packages._Vector._Contents), "_Roots._Packages._Vector._Contents" }, // public: (T T T T) fixable: TAGGED-POINTER-FIX good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackageNameIndexMap._M_t._M_impl._M_node_count), "_Roots._PackageNameIndexMap._M_t._M_impl._M_node_count" }, // public: (T T NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Mutex.__count), "_Roots._PackagesMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Mutex.__value.__wch), "_Roots._PackagesMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Counter), "_Roots._PackagesMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._r._Recursive), "_Roots._PackagesMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Mutex.__count), "_Roots._PackagesMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Mutex.__value.__wch), "_Roots._PackagesMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Counter), "_Roots._PackagesMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._g._Recursive), "_Roots._PackagesMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PackagesMutex._b), "_Roots._PackagesMutex._b" }, // public: (T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheClass), "_Roots._TheClass" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheBuiltInClass), "_Roots._TheBuiltInClass" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheStandardClass), "_Roots._TheStandardClass" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheStructureClass), "_Roots._TheStructureClass" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheDerivableCxxClass), "_Roots._TheDerivableCxxClass" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TheClbindCxxClass), "_Roots._TheClbindCxxClass" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._CorePackage), "_Roots._CorePackage" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._KeywordPackage), "_Roots._KeywordPackage" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._CommonLispPackage), "_Roots._CommonLispPackage" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SpecialForms), "_Roots._SpecialForms" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEqual_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqual), "_Roots._SingleDispatchGenericFunctionHashTableEqual" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__count), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__value.__wch), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Counter), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Recursive), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__count), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__value.__wch), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Counter), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Recursive), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._b), "_Roots._SingleDispatchGenericFunctionHashTableEqualMutex._b" }, // public: (T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._TrueObject), "_Roots._TrueObject" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._RehashSize), "_Roots._RehashSize" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._RehashThreshold), "_Roots._RehashThreshold" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._NullStream), "_Roots._NullStream" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslations), "_Roots._ThePathnameTranslations" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Mutex.__count), "_Roots._ThePathnameTranslationsMutex._r._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Mutex.__value.__wch), "_Roots._ThePathnameTranslationsMutex._r._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Counter), "_Roots._ThePathnameTranslationsMutex._r._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._r._Recursive), "_Roots._ThePathnameTranslationsMutex._r._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Mutex.__count), "_Roots._ThePathnameTranslationsMutex._g._Mutex.__count" }, // public: (T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Mutex.__value.__wch), "_Roots._ThePathnameTranslationsMutex._g._Mutex.__value.__wch" }, // public: (T T T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_long, sizeof(long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Counter), "_Roots._ThePathnameTranslationsMutex._g._Counter" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._g._Recursive), "_Roots._ThePathnameTranslationsMutex._g._Recursive" }, // public: (T T T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ThePathnameTranslationsMutex._b), "_Roots._ThePathnameTranslationsMutex._b" }, // public: (T T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Complex_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ImaginaryUnit), "_Roots._ImaginaryUnit" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Complex_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._ImaginaryUnitNegative), "_Roots._ImaginaryUnitNegative" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Ratio_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._PlusHalf), "_Roots._PlusHalf" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Ratio_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._MinusHalf), "_Roots._MinusHalf" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleFloat_I>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleFloatMinusZero), "_Roots._SingleFloatMinusZero" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleFloat_I>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleFloatPlusZero), "_Roots._SingleFloatPlusZero" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DoubleFloatMinusZero), "_Roots._DoubleFloatMinusZero" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DoubleFloatPlusZero), "_Roots._DoubleFloatPlusZero" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleFloat_I>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._SingleFloatOne), "_Roots._SingleFloatOne" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::DoubleFloat_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._DoubleFloatOne), "_Roots._DoubleFloatOne" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._Booted), "_Roots._Booted" }, // public: (T T) fixable: NIL good-name: T
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::HashTableEq_O>), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Roots._KnownSignals), "_Roots._KnownSignals" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapIntern), "_TrapIntern" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternPackage._M_string_length), "_TrapInternPackage._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternPackage.NO-NAME._M_allocated_capacity), "_TrapInternPackage.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternName._M_string_length), "_TrapInternName._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TrapInternName.NO-NAME._M_allocated_capacity), "_TrapInternName.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_OpenDynamicLibraryHandles._M_t._M_impl._M_node_count), "_OpenDynamicLibraryHandles._M_t._M_impl._M_node_count" }, // public: (T NIL NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackWarnSize), "_StackWarnSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackSampleCount), "_StackSampleCount" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackSampleSize), "_StackSampleSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_StackSampleMax), "_StackSampleMax" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_PrintSymbolsProperly), "_PrintSymbolsProperly" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Argc), "_Argc" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Mode), "_Mode" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_ReplCounter), "_ReplCounter" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._BigEndian), "_IntegerOrdering._BigEndian" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._MostSignificantWordFirst), "_IntegerOrdering._MostSignificantWordFirst" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._mpz_import_word_order), "_IntegerOrdering._mpz_import_word_order" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._mpz_import_size), "_IntegerOrdering._mpz_import_size" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IntegerOrdering._mpz_import_endian), "_IntegerOrdering._mpz_import_endian" }, // public: (T T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_SingleStepLevel), "_SingleStepLevel" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_TraceLevel), "_TraceLevel" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_DebuggerLevel), "_DebuggerLevel" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LockGlobalInitialization), "_LockGlobalInitialization" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_MpiEnabled), "_MpiEnabled" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_MpiRank), "_MpiRank" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_MpiSize), "_MpiSize" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_Interactive), "_Interactive" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_FunctionName._M_string_length), "_FunctionName._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_FunctionName.NO-NAME._M_allocated_capacity), "_FunctionName.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_RCFileName._M_string_length), "_RCFileName._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_RCFileName.NO-NAME._M_allocated_capacity), "_RCFileName.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IgnoreInitImage), "_IgnoreInitImage" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_IgnoreInitLsp), "_IgnoreInitLsp" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_EnvironmentId), "_EnvironmentId" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_RequireLevel), "_RequireLevel" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_CoreBuiltInClassesInitialized), "_CoreBuiltInClassesInitialized" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_BuiltInClassesInitialized), "_BuiltInClassesInitialized" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_PackagesInitialized), "_PackagesInitialized" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_EnvironmentInitialized), "_EnvironmentInitialized" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_NilsCreated), "_NilsCreated" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LastCompileErrorMessage._M_string_length), "_LastCompileErrorMessage._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LastCompileErrorMessage.NO-NAME._M_allocated_capacity), "_LastCompileErrorMessage.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_BootClassTableIsValid), "_BootClassTableIsValid" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_PathMax), "_PathMax" }, // public: (T) fixable: NIL good-name: T
// not-exposing {  fixed_field, ctype_unsigned_int, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(core::Lisp_O),_LineNumber), "_LineNumber" }, // public: (T) fixable: NIL good-name: T
{ class_kind, STAMP_asttooling__AstVisitor_O, sizeof(asttooling::AstVisitor_O), 0, "asttooling::AstVisitor_O" },
 {  fixed_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(asttooling::AstVisitor_O),_Target), "_Target" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ container_kind, STAMP_gctools__GCVector_moveable_core__KeywordArgument_, sizeof(gctools::GCVector_moveable<core::KeywordArgument>), 0, "gctools::GCVector_moveable<core::KeywordArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::KeywordArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::KeywordArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::KeywordArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::KeywordArgument>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_ArgTarget), "_ArgTarget" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // public: (T) fixable: NIL good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Default), "_Default" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Keyword), "_Keyword" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Sensor._ArgTarget), "_Sensor._ArgTarget" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::KeywordArgument),_Sensor._ArgTargetFrameIndex), "_Sensor._ArgTargetFrameIndex" }, // public: (T T) fixable: NIL good-name: T
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_int_, sizeof(gctools::GCArray_moveable<unsigned int>), 0, "gctools::GCArray_moveable<unsigned int>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned int>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned int>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned int>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")>
{    variable_field, ctype_unsigned_int, sizeof(unsigned int), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__CacheRecord_, sizeof(gctools::GCVector_moveable<core::CacheRecord>), 0, "gctools::GCVector_moveable<core::CacheRecord>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::CacheRecord>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::CacheRecord), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::CacheRecord>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::CacheRecord>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CacheRecord),_key), "_key" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::CacheRecord),_value), "_value" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::CacheRecord),_generation), "_generation" }, // public: (T) fixable: NIL good-name: T
{ container_kind, STAMP_gctools__GCVector_moveable_core__RequiredArgument_, sizeof(gctools::GCVector_moveable<core::RequiredArgument>), 0, "gctools::GCVector_moveable<core::RequiredArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::RequiredArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::RequiredArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::RequiredArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::RequiredArgument>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::RequiredArgument),_ArgTarget), "_ArgTarget" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::RequiredArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // public: (T) fixable: NIL good-name: T
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Cons_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Cons_O>" :SPECIALIZER "class core::Cons_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Cons_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::SequenceStepper_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SequenceStepper_O>" :SPECIALIZER "class core::SequenceStepper_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SequenceStepper_O>" :SPECIALIZER "class core::SequenceStepper_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SequenceStepper_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_double_, sizeof(gctools::GCVector_moveable<double>), 0, "gctools::GCVector_moveable<double>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<double>),_Data), "_Data" },
 {  variable_capacity, sizeof(double), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<double>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<double>),_Capacity), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")>
{    variable_field, ctype_double, sizeof(double), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__SymbolStorage_, sizeof(gctools::GCVector_moveable<core::SymbolStorage>), 0, "gctools::GCVector_moveable<core::SymbolStorage>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolStorage>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::SymbolStorage), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolStorage>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolStorage>),_Capacity), NULL },
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_PackageName._M_string_length), "_PackageName._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_PackageName.NO-NAME._M_allocated_capacity), "_PackageName.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_SymbolName._M_string_length), "_SymbolName._M_string_length" }, // public: (T NIL) fixable: NIL good-name: T
// not-exposed-yet     {    variable_field, ctype_unsigned_long, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_SymbolName.NO-NAME._M_allocated_capacity), "_SymbolName.NO-NAME._M_allocated_capacity" }, // public: (T NIL T) fixable: NIL good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_Symbol), "_Symbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_Export), "_Export" }, // public: (T) fixable: NIL good-name: T
    {    variable_field, ctype__Bool, sizeof(_Bool), offsetof(SAFE_TYPE_MACRO(core::SymbolStorage),_Shadow), "_Shadow" }, // public: (T) fixable: NIL good-name: T
{ container_kind, STAMP_gctools__GCArray_moveable_short_, sizeof(gctools::GCArray_moveable<short>), 0, "gctools::GCArray_moveable<short>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<short>),_Data), "_Data" },
 {  variable_capacity, sizeof(short), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<short>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<short>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "short")>
{    variable_field, ctype_short, sizeof(short), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__DynamicBinding_, sizeof(gctools::GCVector_moveable<core::DynamicBinding>), 0, "gctools::GCVector_moveable<core::DynamicBinding>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::DynamicBinding>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::DynamicBinding), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::DynamicBinding>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::DynamicBinding>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::DynamicBinding),_Var), "_Var" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::DynamicBinding),_Val), "_Val" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<clbind::ClassRep_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<clbind::ClassRep_O>" :SPECIALIZER "class clbind::ClassRep_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<clbind::ClassRep_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_long_, sizeof(gctools::GCArray_moveable<unsigned long>), 0, "gctools::GCArray_moveable<unsigned long>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned long>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned long), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned long>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned long>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned long")>
{    variable_field, ctype_unsigned_long, sizeof(unsigned long), 0, "only" },
{ bitunit_container_kind, STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_, sizeof(gctools::GCBitUnitArray_moveable<1,unsigned int,int>), 1, "gctools::GCBitUnitArray_moveable<1,unsigned int,int>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<1,unsigned int,int>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned int), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<1,unsigned int,int>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCBitUnitArray_moveable<1,unsigned int,int>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned int")>
{    variable_field, ctype_unsigned_int, sizeof(unsigned int), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___, sizeof(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>), 0, "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>),_Data), "_Data" },
 {  variable_capacity, sizeof(std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>),first), "first" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>),second), "second" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ container_kind, STAMP_gctools__GCArray_moveable_signed_char_, sizeof(gctools::GCArray_moveable<signed char>), 0, "gctools::GCArray_moveable<signed char>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<signed char>),_Data), "_Data" },
 {  variable_capacity, sizeof(signed char), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<signed char>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<signed char>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "signed char")>
{    variable_field, ctype_signed_char, sizeof(signed char), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__ExceptionEntry_, sizeof(gctools::GCVector_moveable<core::ExceptionEntry>), 0, "gctools::GCVector_moveable<core::ExceptionEntry>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::ExceptionEntry>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::ExceptionEntry), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::ExceptionEntry>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::ExceptionEntry>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::ExceptionEntry),_Key), "_Key" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::List_V>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::List_V>" :SPECIALIZER "class core::List_V")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::List_V>), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___, sizeof(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>), 0, "gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>),_Data), "_Data" },
 {  variable_capacity, sizeof(std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>),first), "first" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>),second), "second" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ container_kind, STAMP_gctools__GCArray_moveable_int_, sizeof(gctools::GCArray_moveable<int>), 0, "gctools::GCArray_moveable<int>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<int>),_Data), "_Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<int>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<int>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_char_, sizeof(gctools::GCArray_moveable<unsigned char>), 0, "gctools::GCArray_moveable<unsigned char>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned char>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned char), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned char>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned char>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned char")>
{    variable_field, ctype_unsigned_char, sizeof(unsigned char), 0, "only" },
{ container_kind, STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__, sizeof(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>), 0, "gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>),_Length), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__AuxArgument_, sizeof(gctools::GCVector_moveable<core::AuxArgument>), 0, "gctools::GCVector_moveable<core::AuxArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::AuxArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::AuxArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::AuxArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::AuxArgument>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AuxArgument),_ArgTarget), "_ArgTarget" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::AuxArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // public: (T) fixable: NIL good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::AuxArgument),_Expression), "_Expression" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ container_kind, STAMP_gctools__GCArray_moveable_long_, sizeof(gctools::GCArray_moveable<long>), 0, "gctools::GCArray_moveable<long>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<long>),_Data), "_Data" },
 {  variable_capacity, sizeof(long), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<long>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<long>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "long")>
{    variable_field, ctype_long, sizeof(long), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_int_, sizeof(gctools::GCVector_moveable<int>), 0, "gctools::GCVector_moveable<int>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<int>),_Data), "_Data" },
 {  variable_capacity, sizeof(int), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<int>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<int>),_Capacity), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "int")>
{    variable_field, ctype_int, sizeof(int), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Symbol_O>" :SPECIALIZER "class core::Symbol_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::T_O>" :SPECIALIZER "class core::T_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__SymbolClassPair_, sizeof(gctools::GCVector_moveable<core::SymbolClassPair>), 0, "gctools::GCVector_moveable<core::SymbolClassPair>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolClassPair>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::SymbolClassPair), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolClassPair>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::SymbolClassPair>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Symbol_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolClassPair),symbol), "symbol" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Instance_O>), offsetof(SAFE_TYPE_MACRO(core::SymbolClassPair),theClass), "theClass" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::SingleDispatchMethod_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SingleDispatchMethod_O>" :SPECIALIZER "class core::SingleDispatchMethod_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SingleDispatchMethod_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::Package_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::Package_O>" :SPECIALIZER "class core::Package_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::Package_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCArray_moveable_float_, sizeof(gctools::GCArray_moveable<float>), 0, "gctools::GCArray_moveable<float>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<float>),_Data), "_Data" },
 {  variable_capacity, sizeof(float), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<float>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<float>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float")>
{    variable_field, ctype_float, sizeof(float), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__, sizeof(gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>), 0, "gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>),_Data), "_Data" },
 {  variable_capacity, sizeof(gctools::smart_ptr<core::SourceFileInfo_O>), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>),_Capacity), NULL },
// one -> #<SMART-PTR-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O") :base #S(CLASP-ANALYZER::SMART-PTR-CTYPE :KEY "gctools::smart_ptr<core::SourceFileInfo_O>" :SPECIALIZER "class core::SourceFileInfo_O")>
{    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::SourceFileInfo_O>), 0, "only" },
{ container_kind, STAMP_gctools__GCArray_moveable_double_, sizeof(gctools::GCArray_moveable<double>), 0, "gctools::GCArray_moveable<double>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<double>),_Data), "_Data" },
 {  variable_capacity, sizeof(double), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<double>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<double>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "double")>
{    variable_field, ctype_double, sizeof(double), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__T_O___, sizeof(gctools::GCVector_moveable<core::T_O *>), 0, "gctools::GCVector_moveable<core::T_O *>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::T_O *>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::T_O*), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::T_O *>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::T_O *>),_Capacity), NULL },
// one -> #<POINTER-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::POINTER-CTYPE :KEY NIL :POINTEE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::T_O" :NAME "T_O")) :base #S(CLASP-ANALYZER::POINTER-CTYPE :KEY NIL :POINTEE #S(CLASP-ANALYZER::CXXRECORD-CTYPE :KEY "core::T_O" :NAME "T_O"))>
{    variable_field, POINTER_OFFSET, sizeof(core::T_O*), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_core__OptionalArgument_, sizeof(gctools::GCVector_moveable<core::OptionalArgument>), 0, "gctools::GCVector_moveable<core::OptionalArgument>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::OptionalArgument>),_Data), "_Data" },
 {  variable_capacity, sizeof(core::OptionalArgument), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::OptionalArgument>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<core::OptionalArgument>),_Capacity), NULL },
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_ArgTarget), "_ArgTarget" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_ArgTargetFrameIndex), "_ArgTargetFrameIndex" }, // public: (T) fixable: NIL good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_Default), "_Default" }, // public: (T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, SMART_PTR_OFFSET, sizeof(gctools::smart_ptr<core::T_O>), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_Sensor._ArgTarget), "_Sensor._ArgTarget" }, // public: (T T) fixable: SMART-PTR-FIX good-name: T
    {    variable_field, ctype_int, sizeof(int), offsetof(SAFE_TYPE_MACRO(core::OptionalArgument),_Sensor._ArgTargetFrameIndex), "_Sensor._ArgTargetFrameIndex" }, // public: (T T) fixable: NIL good-name: T
{ container_kind, STAMP_gctools__GCArray_moveable_unsigned_short_, sizeof(gctools::GCArray_moveable<unsigned short>), 0, "gctools::GCArray_moveable<unsigned short>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned short>),_Data), "_Data" },
 {  variable_capacity, sizeof(unsigned short), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned short>),_Length), offsetof(SAFE_TYPE_MACRO(gctools::GCArray_moveable<unsigned short>),_Length), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "unsigned short")>
{    variable_field, ctype_unsigned_short, sizeof(unsigned short), 0, "only" },
{ container_kind, STAMP_gctools__GCVector_moveable_float_, sizeof(gctools::GCVector_moveable<float>), 0, "gctools::GCVector_moveable<float>" },
 {  variable_array0, 0, 0, offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<float>),_Data), "_Data" },
 {  variable_capacity, sizeof(float), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<float>),_End), offsetof(SAFE_TYPE_MACRO(gctools::GCVector_moveable<float>),_Capacity), NULL },
// one -> #<POD-OFFSET :fields NIL :offset-type #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float") :base #S(CLASP-ANALYZER::BUILTIN-CTYPE :KEY "float")>
{    variable_field, ctype_float, sizeof(float), 0, "only" },
{ class_kind, STAMP_clbind__detail__class_map, sizeof(clbind::detail::class_map), 0, "clbind::detail::class_map" },
 {  fixed_field, TAGGED_POINTER_OFFSET, sizeof(gctools::tagged_pointer<gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>>), offsetof(SAFE_TYPE_MACRO(clbind::detail::class_map),m_classes._Vector._Contents), "m_classes._Vector._Contents" }, // public: (T T T) fixable: TAGGED-POINTER-FIX good-name: T

#endif // defined(GC_OBJ_SCAN_HELPERS)
#if defined(GC_OBJ_SCAN_TABLE)
static void* OBJ_SCAN_table[] = { 
  /* 0 */ NULL,
   NULL
};
#endif // defined(GC_OBJ_SCAN_TABLE)
#if defined(GC_OBJ_FINALIZE)
obj_finalize_STAMP_core__T_O:
{
     // stamp value 1
    core::T_O* obj_gc_safe = reinterpret_cast<core::T_O*>(client);
    obj_gc_safe->~T_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__VaList_dummy_O:
{
     // stamp value 2
    core::VaList_dummy_O* obj_gc_safe = reinterpret_cast<core::VaList_dummy_O*>(client);
    obj_gc_safe->~VaList_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__General_O:
{
     // stamp value 3
    core::General_O* obj_gc_safe = reinterpret_cast<core::General_O*>(client);
    obj_gc_safe->~General_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__MultiStringBuffer_O:
{
     // stamp value 4
    core::MultiStringBuffer_O* obj_gc_safe = reinterpret_cast<core::MultiStringBuffer_O*>(client);
    obj_gc_safe->~MultiStringBuffer_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WeakHashTable_O:
{
     // stamp value 5
    core::WeakHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakHashTable_O*>(client);
    obj_gc_safe->~WeakHashTable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WeakKeyHashTable_O:
{
     // stamp value 6
    core::WeakKeyHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    obj_gc_safe->~WeakKeyHashTable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ReadTable_O:
{
     // stamp value 7
    core::ReadTable_O* obj_gc_safe = reinterpret_cast<core::ReadTable_O*>(client);
    obj_gc_safe->~ReadTable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__PosixTimeDuration_O:
{
     // stamp value 8
    core::PosixTimeDuration_O* obj_gc_safe = reinterpret_cast<core::PosixTimeDuration_O*>(client);
    obj_gc_safe->~PosixTimeDuration_O();
    goto finalize_done;
}
obj_finalize_STAMP_clasp_ffi__ForeignTypeSpec_O:
{
     // stamp value 9
    clasp_ffi::ForeignTypeSpec_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignTypeSpec_O*>(client);
    obj_gc_safe->~ForeignTypeSpec_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Instance_O:
{
     // stamp value 10
    core::Instance_O* obj_gc_safe = reinterpret_cast<core::Instance_O*>(client);
    obj_gc_safe->~Instance_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DerivableCxxObject_O:
{
     // stamp value 11
    core::DerivableCxxObject_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxObject_O*>(client);
    obj_gc_safe->~DerivableCxxObject_O();
    goto finalize_done;
}
obj_finalize_STAMP_clbind__ClassRep_O:
{
     // stamp value 12
    clbind::ClassRep_O* obj_gc_safe = reinterpret_cast<clbind::ClassRep_O*>(client);
    obj_gc_safe->~ClassRep_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SmallMap_O:
{
     // stamp value 13
    core::SmallMap_O* obj_gc_safe = reinterpret_cast<core::SmallMap_O*>(client);
    obj_gc_safe->~SmallMap_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WrappedPointer_O:
{
     // stamp value 14
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    obj_gc_safe->~WrappedPointer_O();
}
obj_finalize_STAMP_core__Archive_O:
{
     // stamp value 15
    core::Archive_O* obj_gc_safe = reinterpret_cast<core::Archive_O*>(client);
    obj_gc_safe->~Archive_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SaveArchive_O:
{
     // stamp value 16
    core::SaveArchive_O* obj_gc_safe = reinterpret_cast<core::SaveArchive_O*>(client);
    obj_gc_safe->~SaveArchive_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SexpSaveArchive_O:
{
     // stamp value 17
    core::SexpSaveArchive_O* obj_gc_safe = reinterpret_cast<core::SexpSaveArchive_O*>(client);
    obj_gc_safe->~SexpSaveArchive_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LoadArchive_O:
{
     // stamp value 18
    core::LoadArchive_O* obj_gc_safe = reinterpret_cast<core::LoadArchive_O*>(client);
    obj_gc_safe->~LoadArchive_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SexpLoadArchive_O:
{
     // stamp value 19
    core::SexpLoadArchive_O* obj_gc_safe = reinterpret_cast<core::SexpLoadArchive_O*>(client);
    obj_gc_safe->~SexpLoadArchive_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SymbolToEnumConverter_O:
{
     // stamp value 20
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    obj_gc_safe->~SymbolToEnumConverter_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Reader_O:
{
     // stamp value 21
    core::Reader_O* obj_gc_safe = reinterpret_cast<core::Reader_O*>(client);
    obj_gc_safe->~Reader_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WeakKeyMapping_O:
{
     // stamp value 22
    core::WeakKeyMapping_O* obj_gc_safe = reinterpret_cast<core::WeakKeyMapping_O*>(client);
    obj_gc_safe->~WeakKeyMapping_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Attribute_O:
{
     // stamp value 23
    llvmo::Attribute_O* obj_gc_safe = reinterpret_cast<llvmo::Attribute_O*>(client);
    obj_gc_safe->~Attribute_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ExternalObject_O:
{
     // stamp value 24
    core::ExternalObject_O* obj_gc_safe = reinterpret_cast<core::ExternalObject_O*>(client);
    obj_gc_safe->~ExternalObject_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Triple_O:
{
     // stamp value 25
    llvmo::Triple_O* obj_gc_safe = reinterpret_cast<llvmo::Triple_O*>(client);
    obj_gc_safe->~Triple_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetOptions_O:
{
     // stamp value 26
    llvmo::TargetOptions_O* obj_gc_safe = reinterpret_cast<llvmo::TargetOptions_O*>(client);
    obj_gc_safe->~TargetOptions_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Pass_O:
{
     // stamp value 27
    llvmo::Pass_O* obj_gc_safe = reinterpret_cast<llvmo::Pass_O*>(client);
    obj_gc_safe->~Pass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ModulePass_O:
{
     // stamp value 28
    llvmo::ModulePass_O* obj_gc_safe = reinterpret_cast<llvmo::ModulePass_O*>(client);
    obj_gc_safe->~ModulePass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ImmutablePass_O:
{
     // stamp value 29
    llvmo::ImmutablePass_O* obj_gc_safe = reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    obj_gc_safe->~ImmutablePass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetLibraryInfoWrapperPass_O:
{
     // stamp value 30
    llvmo::TargetLibraryInfoWrapperPass_O* obj_gc_safe = reinterpret_cast<llvmo::TargetLibraryInfoWrapperPass_O*>(client);
    obj_gc_safe->~TargetLibraryInfoWrapperPass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FunctionPass_O:
{
     // stamp value 31
    llvmo::FunctionPass_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPass_O*>(client);
    obj_gc_safe->~FunctionPass_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ExecutionEngine_O:
{
     // stamp value 32
    llvmo::ExecutionEngine_O* obj_gc_safe = reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    obj_gc_safe->~ExecutionEngine_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LLVMContext_O:
{
     // stamp value 33
    llvmo::LLVMContext_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMContext_O*>(client);
    obj_gc_safe->~LLVMContext_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PassManagerBuilder_O:
{
     // stamp value 34
    llvmo::PassManagerBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    obj_gc_safe->~PassManagerBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MCSubtargetInfo_O:
{
     // stamp value 35
    llvmo::MCSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::MCSubtargetInfo_O*>(client);
    obj_gc_safe->~MCSubtargetInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetSubtargetInfo_O:
{
     // stamp value 36
    llvmo::TargetSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::TargetSubtargetInfo_O*>(client);
    obj_gc_safe->~TargetSubtargetInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Module_O:
{
     // stamp value 37
    llvmo::Module_O* obj_gc_safe = reinterpret_cast<llvmo::Module_O*>(client);
    obj_gc_safe->~Module_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Target_O:
{
     // stamp value 38
    llvmo::Target_O* obj_gc_safe = reinterpret_cast<llvmo::Target_O*>(client);
    obj_gc_safe->~Target_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Type_O:
{
     // stamp value 39
    llvmo::Type_O* obj_gc_safe = reinterpret_cast<llvmo::Type_O*>(client);
    obj_gc_safe->~Type_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IntegerType_O:
{
     // stamp value 40
    llvmo::IntegerType_O* obj_gc_safe = reinterpret_cast<llvmo::IntegerType_O*>(client);
    obj_gc_safe->~IntegerType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FunctionType_O:
{
     // stamp value 41
    llvmo::FunctionType_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionType_O*>(client);
    obj_gc_safe->~FunctionType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__CompositeType_O:
{
     // stamp value 42
    llvmo::CompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::CompositeType_O*>(client);
    obj_gc_safe->~CompositeType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__SequentialType_O:
{
     // stamp value 43
    llvmo::SequentialType_O* obj_gc_safe = reinterpret_cast<llvmo::SequentialType_O*>(client);
    obj_gc_safe->~SequentialType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PointerType_O:
{
     // stamp value 44
    llvmo::PointerType_O* obj_gc_safe = reinterpret_cast<llvmo::PointerType_O*>(client);
    obj_gc_safe->~PointerType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ArrayType_O:
{
     // stamp value 45
    llvmo::ArrayType_O* obj_gc_safe = reinterpret_cast<llvmo::ArrayType_O*>(client);
    obj_gc_safe->~ArrayType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__VectorType_O:
{
     // stamp value 46
    llvmo::VectorType_O* obj_gc_safe = reinterpret_cast<llvmo::VectorType_O*>(client);
    obj_gc_safe->~VectorType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__StructType_O:
{
     // stamp value 47
    llvmo::StructType_O* obj_gc_safe = reinterpret_cast<llvmo::StructType_O*>(client);
    obj_gc_safe->~StructType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IRBuilderBase_O:
{
     // stamp value 48
    llvmo::IRBuilderBase_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    obj_gc_safe->~IRBuilderBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IRBuilder_O:
{
     // stamp value 49
    llvmo::IRBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilder_O*>(client);
    obj_gc_safe->~IRBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__APFloat_O:
{
     // stamp value 50
    llvmo::APFloat_O* obj_gc_safe = reinterpret_cast<llvmo::APFloat_O*>(client);
    obj_gc_safe->~APFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__APInt_O:
{
     // stamp value 51
    llvmo::APInt_O* obj_gc_safe = reinterpret_cast<llvmo::APInt_O*>(client);
    obj_gc_safe->~APInt_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIBuilder_O:
{
     // stamp value 52
    llvmo::DIBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::DIBuilder_O*>(client);
    obj_gc_safe->~DIBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__EngineBuilder_O:
{
     // stamp value 53
    llvmo::EngineBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    obj_gc_safe->~EngineBuilder_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PassManagerBase_O:
{
     // stamp value 54
    llvmo::PassManagerBase_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    obj_gc_safe->~PassManagerBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FunctionPassManager_O:
{
     // stamp value 55
    llvmo::FunctionPassManager_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    obj_gc_safe->~FunctionPassManager_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PassManager_O:
{
     // stamp value 56
    llvmo::PassManager_O* obj_gc_safe = reinterpret_cast<llvmo::PassManager_O*>(client);
    obj_gc_safe->~PassManager_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Linker_O:
{
     // stamp value 57
    llvmo::Linker_O* obj_gc_safe = reinterpret_cast<llvmo::Linker_O*>(client);
    obj_gc_safe->~Linker_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Metadata_O:
{
     // stamp value 58
    llvmo::Metadata_O* obj_gc_safe = reinterpret_cast<llvmo::Metadata_O*>(client);
    obj_gc_safe->~Metadata_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ValueAsMetadata_O:
{
     // stamp value 59
    llvmo::ValueAsMetadata_O* obj_gc_safe = reinterpret_cast<llvmo::ValueAsMetadata_O*>(client);
    obj_gc_safe->~ValueAsMetadata_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MDString_O:
{
     // stamp value 60
    llvmo::MDString_O* obj_gc_safe = reinterpret_cast<llvmo::MDString_O*>(client);
    obj_gc_safe->~MDString_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__MDNode_O:
{
     // stamp value 61
    llvmo::MDNode_O* obj_gc_safe = reinterpret_cast<llvmo::MDNode_O*>(client);
    obj_gc_safe->~MDNode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DINode_O:
{
     // stamp value 62
    llvmo::DINode_O* obj_gc_safe = reinterpret_cast<llvmo::DINode_O*>(client);
    obj_gc_safe->~DINode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIScope_O:
{
     // stamp value 63
    llvmo::DIScope_O* obj_gc_safe = reinterpret_cast<llvmo::DIScope_O*>(client);
    obj_gc_safe->~DIScope_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILocalScope_O:
{
     // stamp value 64
    llvmo::DILocalScope_O* obj_gc_safe = reinterpret_cast<llvmo::DILocalScope_O*>(client);
    obj_gc_safe->~DILocalScope_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DISubprogram_O:
{
     // stamp value 65
    llvmo::DISubprogram_O* obj_gc_safe = reinterpret_cast<llvmo::DISubprogram_O*>(client);
    obj_gc_safe->~DISubprogram_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILexicalBlockBase_O:
{
     // stamp value 66
    llvmo::DILexicalBlockBase_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlockBase_O*>(client);
    obj_gc_safe->~DILexicalBlockBase_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DILexicalBlock_O:
{
     // stamp value 67
    llvmo::DILexicalBlock_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlock_O*>(client);
    obj_gc_safe->~DILexicalBlock_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIFile_O:
{
     // stamp value 68
    llvmo::DIFile_O* obj_gc_safe = reinterpret_cast<llvmo::DIFile_O*>(client);
    obj_gc_safe->~DIFile_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DICompileUnit_O:
{
     // stamp value 69
    llvmo::DICompileUnit_O* obj_gc_safe = reinterpret_cast<llvmo::DICompileUnit_O*>(client);
    obj_gc_safe->~DICompileUnit_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIType_O:
{
     // stamp value 70
    llvmo::DIType_O* obj_gc_safe = reinterpret_cast<llvmo::DIType_O*>(client);
    obj_gc_safe->~DIType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DICompositeType_O:
{
     // stamp value 71
    llvmo::DICompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::DICompositeType_O*>(client);
    obj_gc_safe->~DICompositeType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIDerivedType_O:
{
     // stamp value 72
    llvmo::DIDerivedType_O* obj_gc_safe = reinterpret_cast<llvmo::DIDerivedType_O*>(client);
    obj_gc_safe->~DIDerivedType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DIBasicType_O:
{
     // stamp value 73
    llvmo::DIBasicType_O* obj_gc_safe = reinterpret_cast<llvmo::DIBasicType_O*>(client);
    obj_gc_safe->~DIBasicType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DISubroutineType_O:
{
     // stamp value 74
    llvmo::DISubroutineType_O* obj_gc_safe = reinterpret_cast<llvmo::DISubroutineType_O*>(client);
    obj_gc_safe->~DISubroutineType_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Value_O:
{
     // stamp value 75
    llvmo::Value_O* obj_gc_safe = reinterpret_cast<llvmo::Value_O*>(client);
    obj_gc_safe->~Value_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__User_O:
{
     // stamp value 76
    llvmo::User_O* obj_gc_safe = reinterpret_cast<llvmo::User_O*>(client);
    obj_gc_safe->~User_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Instruction_O:
{
     // stamp value 77
    llvmo::Instruction_O* obj_gc_safe = reinterpret_cast<llvmo::Instruction_O*>(client);
    obj_gc_safe->~Instruction_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__UnaryInstruction_O:
{
     // stamp value 78
    llvmo::UnaryInstruction_O* obj_gc_safe = reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    obj_gc_safe->~UnaryInstruction_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__VAArgInst_O:
{
     // stamp value 79
    llvmo::VAArgInst_O* obj_gc_safe = reinterpret_cast<llvmo::VAArgInst_O*>(client);
    obj_gc_safe->~VAArgInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LoadInst_O:
{
     // stamp value 80
    llvmo::LoadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LoadInst_O*>(client);
    obj_gc_safe->~LoadInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AllocaInst_O:
{
     // stamp value 81
    llvmo::AllocaInst_O* obj_gc_safe = reinterpret_cast<llvmo::AllocaInst_O*>(client);
    obj_gc_safe->~AllocaInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__CallInst_O:
{
     // stamp value 82
    llvmo::CallInst_O* obj_gc_safe = reinterpret_cast<llvmo::CallInst_O*>(client);
    obj_gc_safe->~CallInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AtomicRMWInst_O:
{
     // stamp value 83
    llvmo::AtomicRMWInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    obj_gc_safe->~AtomicRMWInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TerminatorInst_O:
{
     // stamp value 84
    llvmo::TerminatorInst_O* obj_gc_safe = reinterpret_cast<llvmo::TerminatorInst_O*>(client);
    obj_gc_safe->~TerminatorInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__SwitchInst_O:
{
     // stamp value 85
    llvmo::SwitchInst_O* obj_gc_safe = reinterpret_cast<llvmo::SwitchInst_O*>(client);
    obj_gc_safe->~SwitchInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__InvokeInst_O:
{
     // stamp value 86
    llvmo::InvokeInst_O* obj_gc_safe = reinterpret_cast<llvmo::InvokeInst_O*>(client);
    obj_gc_safe->~InvokeInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__UnreachableInst_O:
{
     // stamp value 87
    llvmo::UnreachableInst_O* obj_gc_safe = reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    obj_gc_safe->~UnreachableInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ReturnInst_O:
{
     // stamp value 88
    llvmo::ReturnInst_O* obj_gc_safe = reinterpret_cast<llvmo::ReturnInst_O*>(client);
    obj_gc_safe->~ReturnInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__IndirectBrInst_O:
{
     // stamp value 89
    llvmo::IndirectBrInst_O* obj_gc_safe = reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    obj_gc_safe->~IndirectBrInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ResumeInst_O:
{
     // stamp value 90
    llvmo::ResumeInst_O* obj_gc_safe = reinterpret_cast<llvmo::ResumeInst_O*>(client);
    obj_gc_safe->~ResumeInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__BranchInst_O:
{
     // stamp value 91
    llvmo::BranchInst_O* obj_gc_safe = reinterpret_cast<llvmo::BranchInst_O*>(client);
    obj_gc_safe->~BranchInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LandingPadInst_O:
{
     // stamp value 92
    llvmo::LandingPadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    obj_gc_safe->~LandingPadInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AtomicCmpXchgInst_O:
{
     // stamp value 93
    llvmo::AtomicCmpXchgInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    obj_gc_safe->~AtomicCmpXchgInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__FenceInst_O:
{
     // stamp value 94
    llvmo::FenceInst_O* obj_gc_safe = reinterpret_cast<llvmo::FenceInst_O*>(client);
    obj_gc_safe->~FenceInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__StoreInst_O:
{
     // stamp value 95
    llvmo::StoreInst_O* obj_gc_safe = reinterpret_cast<llvmo::StoreInst_O*>(client);
    obj_gc_safe->~StoreInst_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__PHINode_O:
{
     // stamp value 96
    llvmo::PHINode_O* obj_gc_safe = reinterpret_cast<llvmo::PHINode_O*>(client);
    obj_gc_safe->~PHINode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Constant_O:
{
     // stamp value 97
    llvmo::Constant_O* obj_gc_safe = reinterpret_cast<llvmo::Constant_O*>(client);
    obj_gc_safe->~Constant_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__GlobalValue_O:
{
     // stamp value 98
    llvmo::GlobalValue_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalValue_O*>(client);
    obj_gc_safe->~GlobalValue_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__GlobalVariable_O:
{
     // stamp value 99
    llvmo::GlobalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    obj_gc_safe->~GlobalVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Function_O:
{
     // stamp value 100
    llvmo::Function_O* obj_gc_safe = reinterpret_cast<llvmo::Function_O*>(client);
    obj_gc_safe->~Function_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantFP_O:
{
     // stamp value 101
    llvmo::ConstantFP_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantFP_O*>(client);
    obj_gc_safe->~ConstantFP_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__BlockAddress_O:
{
     // stamp value 102
    llvmo::BlockAddress_O* obj_gc_safe = reinterpret_cast<llvmo::BlockAddress_O*>(client);
    obj_gc_safe->~BlockAddress_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantExpr_O:
{
     // stamp value 103
    llvmo::ConstantExpr_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    obj_gc_safe->~ConstantExpr_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantPointerNull_O:
{
     // stamp value 104
    llvmo::ConstantPointerNull_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    obj_gc_safe->~ConstantPointerNull_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantDataSequential_O:
{
     // stamp value 105
    llvmo::ConstantDataSequential_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    obj_gc_safe->~ConstantDataSequential_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantDataArray_O:
{
     // stamp value 106
    llvmo::ConstantDataArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    obj_gc_safe->~ConstantDataArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__UndefValue_O:
{
     // stamp value 107
    llvmo::UndefValue_O* obj_gc_safe = reinterpret_cast<llvmo::UndefValue_O*>(client);
    obj_gc_safe->~UndefValue_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantArray_O:
{
     // stamp value 108
    llvmo::ConstantArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantArray_O*>(client);
    obj_gc_safe->~ConstantArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantStruct_O:
{
     // stamp value 109
    llvmo::ConstantStruct_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    obj_gc_safe->~ConstantStruct_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ConstantInt_O:
{
     // stamp value 110
    llvmo::ConstantInt_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantInt_O*>(client);
    obj_gc_safe->~ConstantInt_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__Argument_O:
{
     // stamp value 111
    llvmo::Argument_O* obj_gc_safe = reinterpret_cast<llvmo::Argument_O*>(client);
    obj_gc_safe->~Argument_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__BasicBlock_O:
{
     // stamp value 112
    llvmo::BasicBlock_O* obj_gc_safe = reinterpret_cast<llvmo::BasicBlock_O*>(client);
    obj_gc_safe->~BasicBlock_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__TargetMachine_O:
{
     // stamp value 113
    llvmo::TargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::TargetMachine_O*>(client);
    obj_gc_safe->~TargetMachine_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__LLVMTargetMachine_O:
{
     // stamp value 114
    llvmo::LLVMTargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMTargetMachine_O*>(client);
    obj_gc_safe->~LLVMTargetMachine_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__NamedMDNode_O:
{
     // stamp value 115
    llvmo::NamedMDNode_O* obj_gc_safe = reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    obj_gc_safe->~NamedMDNode_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SmallMultimap_O:
{
     // stamp value 116
    core::SmallMultimap_O* obj_gc_safe = reinterpret_cast<core::SmallMultimap_O*>(client);
    obj_gc_safe->~SmallMultimap_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LambdaListHandler_O:
{
     // stamp value 117
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    obj_gc_safe->~LambdaListHandler_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Sigset_O:
{
     // stamp value 118
    core::Sigset_O* obj_gc_safe = reinterpret_cast<core::Sigset_O*>(client);
    obj_gc_safe->~Sigset_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__AttributeSet_O:
{
     // stamp value 119
    llvmo::AttributeSet_O* obj_gc_safe = reinterpret_cast<llvmo::AttributeSet_O*>(client);
    obj_gc_safe->~AttributeSet_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Environment_O:
{
     // stamp value 120
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    obj_gc_safe->~Environment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__GlueEnvironment_O:
{
     // stamp value 121
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    obj_gc_safe->~GlueEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LexicalEnvironment_O:
{
     // stamp value 122
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    obj_gc_safe->~LexicalEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__RuntimeVisibleEnvironment_O:
{
     // stamp value 123
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    obj_gc_safe->~RuntimeVisibleEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BlockEnvironment_O:
{
     // stamp value 124
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    obj_gc_safe->~BlockEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FunctionValueEnvironment_O:
{
     // stamp value 125
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    obj_gc_safe->~FunctionValueEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ValueEnvironment_O:
{
     // stamp value 126
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    obj_gc_safe->~ValueEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__TagbodyEnvironment_O:
{
     // stamp value 127
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    obj_gc_safe->~TagbodyEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CompileTimeEnvironment_O:
{
     // stamp value 128
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    obj_gc_safe->~CompileTimeEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CatchEnvironment_O:
{
     // stamp value 129
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    obj_gc_safe->~CatchEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__MacroletEnvironment_O:
{
     // stamp value 130
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    obj_gc_safe->~MacroletEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SymbolMacroletEnvironment_O:
{
     // stamp value 131
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    obj_gc_safe->~SymbolMacroletEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__UnwindProtectEnvironment_O:
{
     // stamp value 132
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    obj_gc_safe->~UnwindProtectEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FunctionContainerEnvironment_O:
{
     // stamp value 133
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    obj_gc_safe->~FunctionContainerEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ActivationFrame_O:
{
     // stamp value 134
    core::ActivationFrame_O* obj_gc_safe = reinterpret_cast<core::ActivationFrame_O*>(client);
    obj_gc_safe->~ActivationFrame_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ValueFrame_O:
{
     // stamp value 135
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    obj_gc_safe->~ValueFrame_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FunctionFrame_O:
{
     // stamp value 136
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    obj_gc_safe->~FunctionFrame_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__RandomState_O:
{
     // stamp value 137
    core::RandomState_O* obj_gc_safe = reinterpret_cast<core::RandomState_O*>(client);
    obj_gc_safe->~RandomState_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Function_O:
{
     // stamp value 138
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    obj_gc_safe->~Function_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Closure_O:
{
     // stamp value 139
    core::Closure_O* obj_gc_safe = reinterpret_cast<core::Closure_O*>(client);
    obj_gc_safe->~Closure_O();
}
obj_finalize_STAMP_core__ClosureWithSlots_O:
{
     // stamp value 140
    core::ClosureWithSlots_O* obj_gc_safe = reinterpret_cast<core::ClosureWithSlots_O*>(client);
    obj_gc_safe->~ClosureWithSlots_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchMethodFunction_O:
{
     // stamp value 141
    core::SingleDispatchMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CxxMethodFunction_O:
{
     // stamp value 142
    core::CxxMethodFunction_O* obj_gc_safe = reinterpret_cast<core::CxxMethodFunction_O*>(client);
    obj_gc_safe->~CxxMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BuiltinClosure_O:
{
     // stamp value 143
    core::BuiltinClosure_O* obj_gc_safe = reinterpret_cast<core::BuiltinClosure_O*>(client);
    obj_gc_safe->~BuiltinClosure_O();
}
obj_finalize_STAMP_core__TranslationFunctor_O:
{
     // stamp value 144
    core::TranslationFunctor_O* obj_gc_safe = reinterpret_cast<core::TranslationFunctor_O*>(client);
    obj_gc_safe->~TranslationFunctor_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchGenericFunctionClosure_O:
{
     // stamp value 145
    core::SingleDispatchGenericFunctionClosure_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunctionClosure_O*>(client);
    obj_gc_safe->~SingleDispatchGenericFunctionClosure_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchEffectiveMethodFunction_O:
{
     // stamp value 146
    core::SingleDispatchEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchEffectiveMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O:
{
     // stamp value 147
    core::SingleDispatchCxxEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchCxxEffectiveMethodFunction_O*>(client);
    obj_gc_safe->~SingleDispatchCxxEffectiveMethodFunction_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FuncallableInstance_O:
{
     // stamp value 148
    core::FuncallableInstance_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstance_O*>(client);
    obj_gc_safe->~FuncallableInstance_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Creator_O:
{
     // stamp value 149
    core::Creator_O* obj_gc_safe = reinterpret_cast<core::Creator_O*>(client);
    obj_gc_safe->~Creator_O();
}
obj_finalize_STAMP_core__ClassRepCreator_O:
{
     // stamp value 150
    core::ClassRepCreator_O* obj_gc_safe = reinterpret_cast<core::ClassRepCreator_O*>(client);
    obj_gc_safe->~ClassRepCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DerivableCxxClassCreator_O:
{
     // stamp value 151
    core::DerivableCxxClassCreator_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxClassCreator_O*>(client);
    obj_gc_safe->~DerivableCxxClassCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FuncallableInstanceCreator_O:
{
     // stamp value 152
    core::FuncallableInstanceCreator_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstanceCreator_O*>(client);
    obj_gc_safe->~FuncallableInstanceCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_clbind__ConstructorCreator_O:
{
     // stamp value 153
    clbind::ConstructorCreator_O* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator_O*>(client);
    obj_gc_safe->~ConstructorCreator_O();
}
obj_finalize_STAMP_clbind__DummyCreator_O:
{
     // stamp value 154
    clbind::DummyCreator_O* obj_gc_safe = reinterpret_cast<clbind::DummyCreator_O*>(client);
    obj_gc_safe->~DummyCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__InstanceCreator_O:
{
     // stamp value 155
    core::InstanceCreator_O* obj_gc_safe = reinterpret_cast<core::InstanceCreator_O*>(client);
    obj_gc_safe->~InstanceCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StandardClassCreator_O:
{
     // stamp value 156
    core::StandardClassCreator_O* obj_gc_safe = reinterpret_cast<core::StandardClassCreator_O*>(client);
    obj_gc_safe->~StandardClassCreator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SpecialForm_O:
{
     // stamp value 157
    core::SpecialForm_O* obj_gc_safe = reinterpret_cast<core::SpecialForm_O*>(client);
    obj_gc_safe->~SpecialForm_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SequenceStepper_O:
{
     // stamp value 158
    core::SequenceStepper_O* obj_gc_safe = reinterpret_cast<core::SequenceStepper_O*>(client);
    obj_gc_safe->~SequenceStepper_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__VectorStepper_O:
{
     // stamp value 159
    core::VectorStepper_O* obj_gc_safe = reinterpret_cast<core::VectorStepper_O*>(client);
    obj_gc_safe->~VectorStepper_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ConsStepper_O:
{
     // stamp value 160
    core::ConsStepper_O* obj_gc_safe = reinterpret_cast<core::ConsStepper_O*>(client);
    obj_gc_safe->~ConsStepper_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__WeakPointer_O:
{
     // stamp value 161
    core::WeakPointer_O* obj_gc_safe = reinterpret_cast<core::WeakPointer_O*>(client);
    obj_gc_safe->~WeakPointer_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DebugLoc_O:
{
     // stamp value 162
    llvmo::DebugLoc_O* obj_gc_safe = reinterpret_cast<llvmo::DebugLoc_O*>(client);
    obj_gc_safe->~DebugLoc_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SNode_O:
{
     // stamp value 163
    core::SNode_O* obj_gc_safe = reinterpret_cast<core::SNode_O*>(client);
    obj_gc_safe->~SNode_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BranchSNode_O:
{
     // stamp value 164
    core::BranchSNode_O* obj_gc_safe = reinterpret_cast<core::BranchSNode_O*>(client);
    obj_gc_safe->~BranchSNode_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LeafSNode_O:
{
     // stamp value 165
    core::LeafSNode_O* obj_gc_safe = reinterpret_cast<core::LeafSNode_O*>(client);
    obj_gc_safe->~LeafSNode_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ModuleHandle_O:
{
     // stamp value 166
    llvmo::ModuleHandle_O* obj_gc_safe = reinterpret_cast<llvmo::ModuleHandle_O*>(client);
    obj_gc_safe->~ModuleHandle_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Pointer_O:
{
     // stamp value 167
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    obj_gc_safe->~Pointer_O();
    goto finalize_done;
}
obj_finalize_STAMP_clasp_ffi__ForeignData_O:
{
     // stamp value 168
    clasp_ffi::ForeignData_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignData_O*>(client);
    obj_gc_safe->~ForeignData_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CxxObject_O:
{
     // stamp value 169
    core::CxxObject_O* obj_gc_safe = reinterpret_cast<core::CxxObject_O*>(client);
    obj_gc_safe->~CxxObject_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DINodeArray_O:
{
     // stamp value 170
    llvmo::DINodeArray_O* obj_gc_safe = reinterpret_cast<llvmo::DINodeArray_O*>(client);
    obj_gc_safe->~DINodeArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__NativeVector_float_O:
{
     // stamp value 171
    core::NativeVector_float_O* obj_gc_safe = reinterpret_cast<core::NativeVector_float_O*>(client);
    obj_gc_safe->~NativeVector_float_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Info_O:
{
     // stamp value 172
    clcenv::Info_O* obj_gc_safe = reinterpret_cast<clcenv::Info_O*>(client);
    obj_gc_safe->~Info_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__OptimizeInfo_O:
{
     // stamp value 173
    clcenv::OptimizeInfo_O* obj_gc_safe = reinterpret_cast<clcenv::OptimizeInfo_O*>(client);
    obj_gc_safe->~OptimizeInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__BlockInfo_O:
{
     // stamp value 174
    clcenv::BlockInfo_O* obj_gc_safe = reinterpret_cast<clcenv::BlockInfo_O*>(client);
    obj_gc_safe->~BlockInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__FunctionInfo_O:
{
     // stamp value 175
    clcenv::FunctionInfo_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionInfo_O*>(client);
    obj_gc_safe->~FunctionInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__GlobalMacroInfo_O:
{
     // stamp value 176
    clcenv::GlobalMacroInfo_O* obj_gc_safe = reinterpret_cast<clcenv::GlobalMacroInfo_O*>(client);
    obj_gc_safe->~GlobalMacroInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__LocalMacroInfo_O:
{
     // stamp value 177
    clcenv::LocalMacroInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LocalMacroInfo_O*>(client);
    obj_gc_safe->~LocalMacroInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__LocalFunctionInfo_O:
{
     // stamp value 178
    clcenv::LocalFunctionInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LocalFunctionInfo_O*>(client);
    obj_gc_safe->~LocalFunctionInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__SpecialOperatorInfo_O:
{
     // stamp value 179
    clcenv::SpecialOperatorInfo_O* obj_gc_safe = reinterpret_cast<clcenv::SpecialOperatorInfo_O*>(client);
    obj_gc_safe->~SpecialOperatorInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__LambdaNameInfo_O:
{
     // stamp value 180
    clcenv::LambdaNameInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LambdaNameInfo_O*>(client);
    obj_gc_safe->~LambdaNameInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__GlobalFunctionInfo_O:
{
     // stamp value 181
    clcenv::GlobalFunctionInfo_O* obj_gc_safe = reinterpret_cast<clcenv::GlobalFunctionInfo_O*>(client);
    obj_gc_safe->~GlobalFunctionInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__VariableInfo_O:
{
     // stamp value 182
    clcenv::VariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::VariableInfo_O*>(client);
    obj_gc_safe->~VariableInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__SpecialVariableInfo_O:
{
     // stamp value 183
    clcenv::SpecialVariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::SpecialVariableInfo_O*>(client);
    obj_gc_safe->~SpecialVariableInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__LexicalVariableInfo_O:
{
     // stamp value 184
    clcenv::LexicalVariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LexicalVariableInfo_O*>(client);
    obj_gc_safe->~LexicalVariableInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__SymbolMacroInfo_O:
{
     // stamp value 185
    clcenv::SymbolMacroInfo_O* obj_gc_safe = reinterpret_cast<clcenv::SymbolMacroInfo_O*>(client);
    obj_gc_safe->~SymbolMacroInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__ConstantVariableInfo_O:
{
     // stamp value 186
    clcenv::ConstantVariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::ConstantVariableInfo_O*>(client);
    obj_gc_safe->~ConstantVariableInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__ConditionVariable_O:
{
     // stamp value 187
    mp::ConditionVariable_O* obj_gc_safe = reinterpret_cast<mp::ConditionVariable_O*>(client);
    obj_gc_safe->~ConditionVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__Mutex_O:
{
     // stamp value 188
    mp::Mutex_O* obj_gc_safe = reinterpret_cast<mp::Mutex_O*>(client);
    obj_gc_safe->~Mutex_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__RecursiveMutex_O:
{
     // stamp value 189
    mp::RecursiveMutex_O* obj_gc_safe = reinterpret_cast<mp::RecursiveMutex_O*>(client);
    obj_gc_safe->~RecursiveMutex_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DITypeRefArray_O:
{
     // stamp value 190
    llvmo::DITypeRefArray_O* obj_gc_safe = reinterpret_cast<llvmo::DITypeRefArray_O*>(client);
    obj_gc_safe->~DITypeRefArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__NativeVector_double_O:
{
     // stamp value 191
    core::NativeVector_double_O* obj_gc_safe = reinterpret_cast<core::NativeVector_double_O*>(client);
    obj_gc_safe->~NativeVector_double_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__NativeVector_int_O:
{
     // stamp value 192
    core::NativeVector_int_O* obj_gc_safe = reinterpret_cast<core::NativeVector_int_O*>(client);
    obj_gc_safe->~NativeVector_int_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__SharedMutex_O:
{
     // stamp value 193
    mp::SharedMutex_O* obj_gc_safe = reinterpret_cast<mp::SharedMutex_O*>(client);
    obj_gc_safe->~SharedMutex_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Entry_O:
{
     // stamp value 194
    clcenv::Entry_O* obj_gc_safe = reinterpret_cast<clcenv::Entry_O*>(client);
    obj_gc_safe->~Entry_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__VariableType_O:
{
     // stamp value 195
    clcenv::VariableType_O* obj_gc_safe = reinterpret_cast<clcenv::VariableType_O*>(client);
    obj_gc_safe->~VariableType_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__VariableIgnore_O:
{
     // stamp value 196
    clcenv::VariableIgnore_O* obj_gc_safe = reinterpret_cast<clcenv::VariableIgnore_O*>(client);
    obj_gc_safe->~VariableIgnore_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Function_O:
{
     // stamp value 197
    clcenv::Function_O* obj_gc_safe = reinterpret_cast<clcenv::Function_O*>(client);
    obj_gc_safe->~Function_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__SymbolMacro_O:
{
     // stamp value 198
    clcenv::SymbolMacro_O* obj_gc_safe = reinterpret_cast<clcenv::SymbolMacro_O*>(client);
    obj_gc_safe->~SymbolMacro_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__FunctionDynamicExtent_O:
{
     // stamp value 199
    clcenv::FunctionDynamicExtent_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionDynamicExtent_O*>(client);
    obj_gc_safe->~FunctionDynamicExtent_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Inline_O:
{
     // stamp value 200
    clcenv::Inline_O* obj_gc_safe = reinterpret_cast<clcenv::Inline_O*>(client);
    obj_gc_safe->~Inline_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Closure_O:
{
     // stamp value 201
    clcenv::Closure_O* obj_gc_safe = reinterpret_cast<clcenv::Closure_O*>(client);
    obj_gc_safe->~Closure_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Optimize_O:
{
     // stamp value 202
    clcenv::Optimize_O* obj_gc_safe = reinterpret_cast<clcenv::Optimize_O*>(client);
    obj_gc_safe->~Optimize_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__LambdaName_O:
{
     // stamp value 203
    clcenv::LambdaName_O* obj_gc_safe = reinterpret_cast<clcenv::LambdaName_O*>(client);
    obj_gc_safe->~LambdaName_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Tag_O:
{
     // stamp value 204
    clcenv::Tag_O* obj_gc_safe = reinterpret_cast<clcenv::Tag_O*>(client);
    obj_gc_safe->~Tag_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Block_O:
{
     // stamp value 205
    clcenv::Block_O* obj_gc_safe = reinterpret_cast<clcenv::Block_O*>(client);
    obj_gc_safe->~Block_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__FunctionType_O:
{
     // stamp value 206
    clcenv::FunctionType_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionType_O*>(client);
    obj_gc_safe->~FunctionType_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__GlobalEnvironment_O:
{
     // stamp value 207
    clcenv::GlobalEnvironment_O* obj_gc_safe = reinterpret_cast<clcenv::GlobalEnvironment_O*>(client);
    obj_gc_safe->~GlobalEnvironment_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__VariableDynamicExtent_O:
{
     // stamp value 208
    clcenv::VariableDynamicExtent_O* obj_gc_safe = reinterpret_cast<clcenv::VariableDynamicExtent_O*>(client);
    obj_gc_safe->~VariableDynamicExtent_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__LexicalVariable_O:
{
     // stamp value 209
    clcenv::LexicalVariable_O* obj_gc_safe = reinterpret_cast<clcenv::LexicalVariable_O*>(client);
    obj_gc_safe->~LexicalVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__SpecialVariable_O:
{
     // stamp value 210
    clcenv::SpecialVariable_O* obj_gc_safe = reinterpret_cast<clcenv::SpecialVariable_O*>(client);
    obj_gc_safe->~SpecialVariable_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__Macro_O:
{
     // stamp value 211
    clcenv::Macro_O* obj_gc_safe = reinterpret_cast<clcenv::Macro_O*>(client);
    obj_gc_safe->~Macro_O();
    goto finalize_done;
}
obj_finalize_STAMP_clcenv__FunctionIgnore_O:
{
     // stamp value 212
    clcenv::FunctionIgnore_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionIgnore_O*>(client);
    obj_gc_safe->~FunctionIgnore_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__Process_O:
{
     // stamp value 213
    mp::Process_O* obj_gc_safe = reinterpret_cast<mp::Process_O*>(client);
    obj_gc_safe->~Process_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleDispatchMethod_O:
{
     // stamp value 214
    core::SingleDispatchMethod_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    obj_gc_safe->~SingleDispatchMethod_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Iterator_O:
{
     // stamp value 215
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    obj_gc_safe->~Iterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__RecursiveDirectoryIterator_O:
{
     // stamp value 216
    core::RecursiveDirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    obj_gc_safe->~RecursiveDirectoryIterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DirectoryIterator_O:
{
     // stamp value 217
    core::DirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::DirectoryIterator_O*>(client);
    obj_gc_safe->~DirectoryIterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__InsertPoint_O:
{
     // stamp value 218
    llvmo::InsertPoint_O* obj_gc_safe = reinterpret_cast<llvmo::InsertPoint_O*>(client);
    obj_gc_safe->~InsertPoint_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Array_O:
{
     // stamp value 219
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    obj_gc_safe->~Array_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__AbstractSimpleVector_O:
{
     // stamp value 220
    core::AbstractSimpleVector_O* obj_gc_safe = reinterpret_cast<core::AbstractSimpleVector_O*>(client);
    obj_gc_safe->~AbstractSimpleVector_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVectorFloat_O_float_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 221
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVectorFloat_O,float,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVectorFloat_O:
{
     // stamp value 222
    core::SimpleVectorFloat_O* obj_gc_safe = reinterpret_cast<core::SimpleVectorFloat_O*>(client);
    obj_gc_safe->~SimpleVectorFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 223
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte64_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte64_t_O:
{
     // stamp value 224
    core::SimpleVector_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte64_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 225
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int64_t_O,long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int64_t_O:
{
     // stamp value 226
    core::SimpleVector_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int64_t_O*>(client);
    obj_gc_safe->~SimpleVector_int64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SimpleString_O:
{
     // stamp value 227
    core::SimpleString_O* obj_gc_safe = reinterpret_cast<core::SimpleString_O*>(client);
    obj_gc_safe->~SimpleString_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_:
{
     // do nothing stamp value 228
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleCharacterString_O,int,core::SimpleString_O>"));
}
obj_finalize_STAMP_core__SimpleCharacterString_O:
{
     // stamp value 229
    core::SimpleCharacterString_O* obj_gc_safe = reinterpret_cast<core::SimpleCharacterString_O*>(client);
    obj_gc_safe->~SimpleCharacterString_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_:
{
     // do nothing stamp value 230
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleBaseString_O,unsigned char,core::SimpleString_O>"));
}
obj_finalize_STAMP_core__SimpleBaseString_O:
{
     // stamp value 231
    core::SimpleBaseString_O* obj_gc_safe = reinterpret_cast<core::SimpleBaseString_O*>(client);
    obj_gc_safe->~SimpleBaseString_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 232
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int16_t_O,short,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int16_t_O:
{
     // stamp value 233
    core::SimpleVector_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int16_t_O*>(client);
    obj_gc_safe->~SimpleVector_int16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 234
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte16_t_O,unsigned short,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte16_t_O:
{
     // stamp value 235
    core::SimpleVector_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte16_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 236
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_fixnum_O,long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_fixnum_O:
{
     // stamp value 237
    core::SimpleVector_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_fixnum_O*>(client);
    obj_gc_safe->~SimpleVector_fixnum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 238
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int8_t_O,signed char,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int8_t_O:
{
     // stamp value 239
    core::SimpleVector_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int8_t_O*>(client);
    obj_gc_safe->~SimpleVector_int8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 240
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_O,gctools::smart_ptr<core::T_O>,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_O:
{
     // stamp value 241
    core::SimpleVector_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_O*>(client);
    obj_gc_safe->~SimpleVector_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 242
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte8_t_O,unsigned char,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte8_t_O:
{
     // stamp value 243
    core::SimpleVector_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte8_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 244
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_int32_t_O,int,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_int32_t_O:
{
     // stamp value 245
    core::SimpleVector_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int32_t_O*>(client);
    obj_gc_safe->~SimpleVector_int32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SimpleBitVector_O:
{
     // stamp value 246
    core::SimpleBitVector_O* obj_gc_safe = reinterpret_cast<core::SimpleBitVector_O*>(client);
    obj_gc_safe->~SimpleBitVector_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 247
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_byte32_t_O,unsigned int,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_byte32_t_O:
{
     // stamp value 248
    core::SimpleVector_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte32_t_O*>(client);
    obj_gc_safe->~SimpleVector_byte32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 249
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVector_size_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVector_size_t_O:
{
     // stamp value 250
    core::SimpleVector_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_size_t_O*>(client);
    obj_gc_safe->~SimpleVector_size_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVectorDouble_O_double_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 251
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleVector<core::SimpleVectorDouble_O,double,core::AbstractSimpleVector_O>"));
}
obj_finalize_STAMP_core__SimpleVectorDouble_O:
{
     // stamp value 252
    core::SimpleVectorDouble_O* obj_gc_safe = reinterpret_cast<core::SimpleVectorDouble_O*>(client);
    obj_gc_safe->~SimpleVectorDouble_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__MDArray_O:
{
     // stamp value 253
    core::MDArray_O* obj_gc_safe = reinterpret_cast<core::MDArray_O*>(client);
    obj_gc_safe->~MDArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BitVectorNs_O:
{
     // stamp value 254
    core::BitVectorNs_O* obj_gc_safe = reinterpret_cast<core::BitVectorNs_O*>(client);
    obj_gc_safe->~BitVectorNs_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 255
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte64_t_O,core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte64_t_O:
{
     // stamp value 256
    core::MDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte64_t_O*>(client);
    obj_gc_safe->~MDArray_byte64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 257
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int16_t_O,core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int16_t_O:
{
     // stamp value 258
    core::MDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int16_t_O*>(client);
    obj_gc_safe->~MDArray_int16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 259
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int8_t_O,core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int8_t_O:
{
     // stamp value 260
    core::MDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int8_t_O*>(client);
    obj_gc_safe->~MDArray_int8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_:
{
     // do nothing stamp value 261
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayCharacter_O,core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayCharacter_O:
{
     // stamp value 262
    core::MDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::MDArrayCharacter_O*>(client);
    obj_gc_safe->~MDArrayCharacter_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 263
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int32_t_O,core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int32_t_O:
{
     // stamp value 264
    core::MDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int32_t_O*>(client);
    obj_gc_safe->~MDArray_int32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayFloat_O_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__MDArray_O_:
{
     // do nothing stamp value 265
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayFloat_O,core::SimpleMDArrayFloat_O,core::SimpleVectorFloat_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayFloat_O:
{
     // stamp value 266
    core::MDArrayFloat_O* obj_gc_safe = reinterpret_cast<core::MDArrayFloat_O*>(client);
    obj_gc_safe->~MDArrayFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StrNs_O:
{
     // stamp value 267
    core::StrNs_O* obj_gc_safe = reinterpret_cast<core::StrNs_O*>(client);
    obj_gc_safe->~StrNs_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_:
{
     // do nothing stamp value 268
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::StrWNs_O,core::SimpleCharacterString_O,core::StrNs_O>"));
}
obj_finalize_STAMP_core__StrWNs_O:
{
     // stamp value 269
    core::StrWNs_O* obj_gc_safe = reinterpret_cast<core::StrWNs_O*>(client);
    obj_gc_safe->~StrWNs_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_:
{
     // do nothing stamp value 270
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Vector<core::Str8Ns_O,core::SimpleBaseString_O,core::StrNs_O>"));
}
obj_finalize_STAMP_core__Str8Ns_O:
{
     // stamp value 271
    core::Str8Ns_O* obj_gc_safe = reinterpret_cast<core::Str8Ns_O*>(client);
    obj_gc_safe->~Str8Ns_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayDouble_O_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__MDArray_O_:
{
     // do nothing stamp value 272
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayDouble_O,core::SimpleMDArrayDouble_O,core::SimpleVectorDouble_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayDouble_O:
{
     // stamp value 273
    core::MDArrayDouble_O* obj_gc_safe = reinterpret_cast<core::MDArrayDouble_O*>(client);
    obj_gc_safe->~MDArrayDouble_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_:
{
     // do nothing stamp value 274
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayT_O,core::SimpleMDArrayT_O,core::SimpleVector_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayT_O:
{
     // stamp value 275
    core::MDArrayT_O* obj_gc_safe = reinterpret_cast<core::MDArrayT_O*>(client);
    obj_gc_safe->~MDArrayT_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_:
{
     // do nothing stamp value 276
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_size_t_O,core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_size_t_O:
{
     // stamp value 277
    core::MDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_size_t_O*>(client);
    obj_gc_safe->~MDArray_size_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 278
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte8_t_O,core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte8_t_O:
{
     // stamp value 279
    core::MDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte8_t_O*>(client);
    obj_gc_safe->~MDArray_byte8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__MDArrayBit_O:
{
     // stamp value 280
    core::MDArrayBit_O* obj_gc_safe = reinterpret_cast<core::MDArrayBit_O*>(client);
    obj_gc_safe->~MDArrayBit_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 281
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_int64_t_O,core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_int64_t_O:
{
     // stamp value 282
    core::MDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int64_t_O*>(client);
    obj_gc_safe->~MDArray_int64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 283
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte16_t_O,core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte16_t_O:
{
     // stamp value 284
    core::MDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte16_t_O*>(client);
    obj_gc_safe->~MDArray_byte16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 285
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_byte32_t_O,core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_byte32_t_O:
{
     // stamp value 286
    core::MDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte32_t_O*>(client);
    obj_gc_safe->~MDArray_byte32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SimpleMDArray_O:
{
     // stamp value 287
    core::SimpleMDArray_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_O*>(client);
    obj_gc_safe->~SimpleMDArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 288
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int8_t_O:
{
     // stamp value 289
    core::SimpleMDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int8_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 290
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayCharacter_O:
{
     // stamp value 291
    core::SimpleMDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayCharacter_O*>(client);
    obj_gc_safe->~SimpleMDArrayCharacter_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 292
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_fixnum_O:
{
     // stamp value 293
    core::SimpleMDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_fixnum_O*>(client);
    obj_gc_safe->~SimpleMDArray_fixnum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 294
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte32_t_O:
{
     // stamp value 295
    core::SimpleMDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte32_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 296
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte16_t_O:
{
     // stamp value 297
    core::SimpleMDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte16_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 298
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayT_O,core::SimpleVector_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayT_O:
{
     // stamp value 299
    core::SimpleMDArrayT_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayT_O*>(client);
    obj_gc_safe->~SimpleMDArrayT_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 300
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int32_t_O:
{
     // stamp value 301
    core::SimpleMDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int32_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int32_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 302
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayDouble_O,core::SimpleVectorDouble_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayDouble_O:
{
     // stamp value 303
    core::SimpleMDArrayDouble_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayDouble_O*>(client);
    obj_gc_safe->~SimpleMDArrayDouble_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 304
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayBaseChar_O:
{
     // stamp value 305
    core::SimpleMDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBaseChar_O*>(client);
    obj_gc_safe->~SimpleMDArrayBaseChar_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 306
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte64_t_O:
{
     // stamp value 307
    core::SimpleMDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte64_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SimpleMDArrayBit_O:
{
     // stamp value 308
    core::SimpleMDArrayBit_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBit_O*>(client);
    obj_gc_safe->~SimpleMDArrayBit_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 309
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int16_t_O:
{
     // stamp value 310
    core::SimpleMDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int16_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int16_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 311
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_byte8_t_O:
{
     // stamp value 312
    core::SimpleMDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte8_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_byte8_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 313
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_size_t_O:
{
     // stamp value 314
    core::SimpleMDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_size_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_size_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 315
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArray_int64_t_O:
{
     // stamp value 316
    core::SimpleMDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int64_t_O*>(client);
    obj_gc_safe->~SimpleMDArray_int64_t_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 317
    THROW_HARD_ERROR(BF("Should never finalize object core::template_SimpleArray<core::SimpleMDArrayFloat_O,core::SimpleVectorFloat_O,core::SimpleMDArray_O>"));
}
obj_finalize_STAMP_core__SimpleMDArrayFloat_O:
{
     // stamp value 318
    core::SimpleMDArrayFloat_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayFloat_O*>(client);
    obj_gc_safe->~SimpleMDArrayFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_:
{
     // do nothing stamp value 319
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArray_fixnum_O,core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArray_fixnum_O:
{
     // stamp value 320
    core::MDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::MDArray_fixnum_O*>(client);
    obj_gc_safe->~MDArray_fixnum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_:
{
     // do nothing stamp value 321
    THROW_HARD_ERROR(BF("Should never finalize object core::template_Array<core::MDArrayBaseChar_O,core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::MDArray_O>"));
}
obj_finalize_STAMP_core__MDArrayBaseChar_O:
{
     // stamp value 322
    core::MDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::MDArrayBaseChar_O*>(client);
    obj_gc_safe->~MDArrayBaseChar_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Symbol_O:
{
     // stamp value 323
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    obj_gc_safe->~Symbol_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Null_O:
{
     // stamp value 324
    core::Null_O* obj_gc_safe = reinterpret_cast<core::Null_O*>(client);
    obj_gc_safe->~Null_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__BlockingConcurrentQueue_O:
{
     // stamp value 325
    mp::BlockingConcurrentQueue_O* obj_gc_safe = reinterpret_cast<mp::BlockingConcurrentQueue_O*>(client);
    obj_gc_safe->~BlockingConcurrentQueue_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Path_O:
{
     // stamp value 326
    core::Path_O* obj_gc_safe = reinterpret_cast<core::Path_O*>(client);
    obj_gc_safe->~Path_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Character_dummy_O:
{
     // stamp value 327
    core::Character_dummy_O* obj_gc_safe = reinterpret_cast<core::Character_dummy_O*>(client);
    obj_gc_safe->~Character_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SourceManager_O:
{
     // stamp value 328
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    obj_gc_safe->~SourceManager_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__DataLayout_O:
{
     // stamp value 329
    llvmo::DataLayout_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayout_O*>(client);
    obj_gc_safe->~DataLayout_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Pathname_O:
{
     // stamp value 330
    core::Pathname_O* obj_gc_safe = reinterpret_cast<core::Pathname_O*>(client);
    obj_gc_safe->~Pathname_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LogicalPathname_O:
{
     // stamp value 331
    core::LogicalPathname_O* obj_gc_safe = reinterpret_cast<core::LogicalPathname_O*>(client);
    obj_gc_safe->~LogicalPathname_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Cache_O:
{
     // stamp value 332
    core::Cache_O* obj_gc_safe = reinterpret_cast<core::Cache_O*>(client);
    obj_gc_safe->~Cache_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LoadTimeValues_O:
{
     // stamp value 333
    core::LoadTimeValues_O* obj_gc_safe = reinterpret_cast<core::LoadTimeValues_O*>(client);
    obj_gc_safe->~LoadTimeValues_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SharpEqualWrapper_O:
{
     // stamp value 334
    core::SharpEqualWrapper_O* obj_gc_safe = reinterpret_cast<core::SharpEqualWrapper_O*>(client);
    obj_gc_safe->~SharpEqualWrapper_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Number_O:
{
     // stamp value 335
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    obj_gc_safe->~Number_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Real_O:
{
     // stamp value 336
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    obj_gc_safe->~Real_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Rational_O:
{
     // stamp value 337
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    obj_gc_safe->~Rational_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Ratio_O:
{
     // stamp value 338
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    obj_gc_safe->~Ratio_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Integer_O:
{
     // stamp value 339
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    obj_gc_safe->~Integer_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Bignum_O:
{
     // stamp value 340
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    obj_gc_safe->~Bignum_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Fixnum_dummy_O:
{
     // stamp value 341
    core::Fixnum_dummy_O* obj_gc_safe = reinterpret_cast<core::Fixnum_dummy_O*>(client);
    obj_gc_safe->~Fixnum_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Float_O:
{
     // stamp value 342
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    obj_gc_safe->~Float_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DoubleFloat_O:
{
     // stamp value 343
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    obj_gc_safe->~DoubleFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SingleFloat_dummy_O:
{
     // stamp value 344
    core::SingleFloat_dummy_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_dummy_O*>(client);
    obj_gc_safe->~SingleFloat_dummy_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LongFloat_O:
{
     // stamp value 345
    core::LongFloat_O* obj_gc_safe = reinterpret_cast<core::LongFloat_O*>(client);
    obj_gc_safe->~LongFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ShortFloat_O:
{
     // stamp value 346
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    obj_gc_safe->~ShortFloat_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Complex_O:
{
     // stamp value 347
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    obj_gc_safe->~Complex_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Stream_O:
{
     // stamp value 348
    core::Stream_O* obj_gc_safe = reinterpret_cast<core::Stream_O*>(client);
    obj_gc_safe->~Stream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__AnsiStream_O:
{
     // stamp value 349
    core::AnsiStream_O* obj_gc_safe = reinterpret_cast<core::AnsiStream_O*>(client);
    obj_gc_safe->~AnsiStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__TwoWayStream_O:
{
     // stamp value 350
    core::TwoWayStream_O* obj_gc_safe = reinterpret_cast<core::TwoWayStream_O*>(client);
    obj_gc_safe->~TwoWayStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__BroadcastStream_O:
{
     // stamp value 351
    core::BroadcastStream_O* obj_gc_safe = reinterpret_cast<core::BroadcastStream_O*>(client);
    obj_gc_safe->~BroadcastStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SynonymStream_O:
{
     // stamp value 352
    core::SynonymStream_O* obj_gc_safe = reinterpret_cast<core::SynonymStream_O*>(client);
    obj_gc_safe->~SynonymStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__ConcatenatedStream_O:
{
     // stamp value 353
    core::ConcatenatedStream_O* obj_gc_safe = reinterpret_cast<core::ConcatenatedStream_O*>(client);
    obj_gc_safe->~ConcatenatedStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StringStream_O:
{
     // stamp value 354
    core::StringStream_O* obj_gc_safe = reinterpret_cast<core::StringStream_O*>(client);
    obj_gc_safe->~StringStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StringOutputStream_O:
{
     // stamp value 355
    core::StringOutputStream_O* obj_gc_safe = reinterpret_cast<core::StringOutputStream_O*>(client);
    obj_gc_safe->~StringOutputStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__StringInputStream_O:
{
     // stamp value 356
    core::StringInputStream_O* obj_gc_safe = reinterpret_cast<core::StringInputStream_O*>(client);
    obj_gc_safe->~StringInputStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FileStream_O:
{
     // stamp value 357
    core::FileStream_O* obj_gc_safe = reinterpret_cast<core::FileStream_O*>(client);
    obj_gc_safe->~FileStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__IOFileStream_O:
{
     // stamp value 358
    core::IOFileStream_O* obj_gc_safe = reinterpret_cast<core::IOFileStream_O*>(client);
    obj_gc_safe->~IOFileStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__IOStreamStream_O:
{
     // stamp value 359
    core::IOStreamStream_O* obj_gc_safe = reinterpret_cast<core::IOStreamStream_O*>(client);
    obj_gc_safe->~IOStreamStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__EchoStream_O:
{
     // stamp value 360
    core::EchoStream_O* obj_gc_safe = reinterpret_cast<core::EchoStream_O*>(client);
    obj_gc_safe->~EchoStream_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Package_O:
{
     // stamp value 361
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    obj_gc_safe->~Package_O();
    goto finalize_done;
}
obj_finalize_STAMP_llvmo__ClaspJIT_O:
{
     // stamp value 362
    llvmo::ClaspJIT_O* obj_gc_safe = reinterpret_cast<llvmo::ClaspJIT_O*>(client);
    obj_gc_safe->~ClaspJIT_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__FileStatus_O:
{
     // stamp value 363
    core::FileStatus_O* obj_gc_safe = reinterpret_cast<core::FileStatus_O*>(client);
    obj_gc_safe->~FileStatus_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__InvocationHistoryFrameIterator_O:
{
     // stamp value 364
    core::InvocationHistoryFrameIterator_O* obj_gc_safe = reinterpret_cast<core::InvocationHistoryFrameIterator_O*>(client);
    obj_gc_safe->~InvocationHistoryFrameIterator_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__PosixTime_O:
{
     // stamp value 365
    core::PosixTime_O* obj_gc_safe = reinterpret_cast<core::PosixTime_O*>(client);
    obj_gc_safe->~PosixTime_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTable_O:
{
     // stamp value 366
    core::HashTable_O* obj_gc_safe = reinterpret_cast<core::HashTable_O*>(client);
    obj_gc_safe->~HashTable_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEqual_O:
{
     // stamp value 367
    core::HashTableEqual_O* obj_gc_safe = reinterpret_cast<core::HashTableEqual_O*>(client);
    obj_gc_safe->~HashTableEqual_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEqualp_O:
{
     // stamp value 368
    core::HashTableEqualp_O* obj_gc_safe = reinterpret_cast<core::HashTableEqualp_O*>(client);
    obj_gc_safe->~HashTableEqualp_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEq_O:
{
     // stamp value 369
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    obj_gc_safe->~HashTableEq_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__HashTableEql_O:
{
     // stamp value 370
    core::HashTableEql_O* obj_gc_safe = reinterpret_cast<core::HashTableEql_O*>(client);
    obj_gc_safe->~HashTableEql_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Exposer_O:
{
     // stamp value 371
    core::Exposer_O* obj_gc_safe = reinterpret_cast<core::Exposer_O*>(client);
    obj_gc_safe->~Exposer_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__CoreExposer_O:
{
     // stamp value 372
    core::CoreExposer_O* obj_gc_safe = reinterpret_cast<core::CoreExposer_O*>(client);
    obj_gc_safe->~CoreExposer_O();
    goto finalize_done;
}
obj_finalize_STAMP_asttooling__AsttoolingExposer_O:
{
     // stamp value 373
    asttooling::AsttoolingExposer_O* obj_gc_safe = reinterpret_cast<asttooling::AsttoolingExposer_O*>(client);
    obj_gc_safe->~AsttoolingExposer_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SourcePosInfo_O:
{
     // stamp value 374
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    obj_gc_safe->~SourcePosInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__IntArray_O:
{
     // stamp value 375
    core::IntArray_O* obj_gc_safe = reinterpret_cast<core::IntArray_O*>(client);
    obj_gc_safe->~IntArray_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__SourceFileInfo_O:
{
     // stamp value 376
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    obj_gc_safe->~SourceFileInfo_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__DirectoryEntry_O:
{
     // stamp value 377
    core::DirectoryEntry_O* obj_gc_safe = reinterpret_cast<core::DirectoryEntry_O*>(client);
    obj_gc_safe->~DirectoryEntry_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__LightUserData_O:
{
     // stamp value 378
    core::LightUserData_O* obj_gc_safe = reinterpret_cast<core::LightUserData_O*>(client);
    obj_gc_safe->~LightUserData_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__UserData_O:
{
     // stamp value 379
    core::UserData_O* obj_gc_safe = reinterpret_cast<core::UserData_O*>(client);
    obj_gc_safe->~UserData_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Record_O:
{
     // stamp value 380
    core::Record_O* obj_gc_safe = reinterpret_cast<core::Record_O*>(client);
    obj_gc_safe->~Record_O();
    goto finalize_done;
}
obj_finalize_STAMP_clbind__ClassRegistry_O:
{
     // stamp value 381
    clbind::ClassRegistry_O* obj_gc_safe = reinterpret_cast<clbind::ClassRegistry_O*>(client);
    obj_gc_safe->~ClassRegistry_O();
    goto finalize_done;
}
obj_finalize_STAMP_mp__ConcurrentQueue_O:
{
     // stamp value 382
    mp::ConcurrentQueue_O* obj_gc_safe = reinterpret_cast<mp::ConcurrentQueue_O*>(client);
    obj_gc_safe->~ConcurrentQueue_O();
    goto finalize_done;
}
obj_finalize_STAMP_core__Cons_O:
{
     // stamp value 383
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    obj_gc_safe->~Cons_O();
    goto finalize_done;
}
obj_finalize_STAMP_clang__ast_matchers__MatchFinder__MatchCallback:
{
     // do nothing stamp value 384
    THROW_HARD_ERROR(BF("Should never finalize object clang::ast_matchers::MatchFinder::MatchCallback"));
}
obj_finalize_STAMP_core__Lisp_O:
{
     // stamp value 385
    core::Lisp_O* obj_gc_safe = reinterpret_cast<core::Lisp_O*>(client);
    obj_gc_safe->~Lisp_O();
    goto finalize_done;
}
obj_finalize_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_:
{
     // do nothing stamp value 386
    THROW_HARD_ERROR(BF("Should never finalize object clang::RecursiveASTVisitor<asttooling::AstVisitor_O>"));
}
obj_finalize_STAMP_asttooling__AstVisitor_O:
{
     // stamp value 387
    asttooling::AstVisitor_O* obj_gc_safe = reinterpret_cast<asttooling::AstVisitor_O*>(client);
    obj_gc_safe->~AstVisitor_O();
    goto finalize_done;
}
obj_finalize_STAMP_gctools__GCContainer:
{
     // do nothing stamp value 388
    THROW_HARD_ERROR(BF("Should never finalize object gctools::GCContainer"));
}
obj_finalize_STAMP_gctools__GCVector_moveable_core__KeywordArgument_:
{
     // stamp value 389
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::KeywordArgument>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_int_:
{
     // stamp value 390
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned int>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__CacheRecord_:
{
     // stamp value 391
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::CacheRecord>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__RequiredArgument_:
{
     // stamp value 392
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::RequiredArgument>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__:
{
     // stamp value 393
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__:
{
     // stamp value 394
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_double_:
{
     // stamp value 395
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<double>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolStorage_:
{
     // stamp value 396
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolStorage>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_short_:
{
     // stamp value 397
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<short>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__DynamicBinding_:
{
     // stamp value 398
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::DynamicBinding>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__:
{
     // stamp value 399
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_long_:
{
     // stamp value 400
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned long>"));}
obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_:
{
     // stamp value 401
    THROW_HARD_ERROR(BF("Should never finalize gctools::GCBitUnitArray_moveable<1,unsigned int,int>"));
}
obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 402
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_signed_char_:
{
     // stamp value 403
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<signed char>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__ExceptionEntry_:
{
     // stamp value 404
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::ExceptionEntry>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__:
{
     // stamp value 405
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 406
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_int_:
{
     // stamp value 407
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<int>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_char_:
{
     // stamp value 408
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned char>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 409
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__AuxArgument_:
{
     // stamp value 410
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::AuxArgument>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_long_:
{
     // stamp value 411
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<long>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_int_:
{
     // stamp value 412
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<int>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__:
{
     // stamp value 413
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 414
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolClassPair_:
{
     // stamp value 415
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::SymbolClassPair>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__:
{
     // stamp value 416
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__:
{
     // stamp value 417
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_float_:
{
     // stamp value 418
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<float>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__:
{
     // stamp value 419
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_double_:
{
     // stamp value 420
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<double>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__T_O___:
{
     // stamp value 421
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::T_O *>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_core__OptionalArgument_:
{
     // stamp value 422
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<core::OptionalArgument>"));}
obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_short_:
{
     // stamp value 423
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCArray_moveable<unsigned short>"));}
obj_finalize_STAMP_gctools__GCVector_moveable_float_:
{
     // stamp value 424
    THROW_HARD_ERROR(BF("Should never finalize containers gctools::GCVector_moveable<float>"));}
obj_finalize_STAMP_clang__FrontendAction:
{
     // do nothing stamp value 425
    THROW_HARD_ERROR(BF("Should never finalize object clang::FrontendAction"));
}
obj_finalize_STAMP_clang__ASTFrontendAction:
{
     // do nothing stamp value 426
    THROW_HARD_ERROR(BF("Should never finalize object clang::ASTFrontendAction"));
}
obj_finalize_STAMP_clang__SyntaxOnlyAction:
{
     // do nothing stamp value 427
    THROW_HARD_ERROR(BF("Should never finalize object clang::SyntaxOnlyAction"));
}
obj_finalize_STAMP_clang__tooling__ToolAction:
{
     // do nothing stamp value 428
    THROW_HARD_ERROR(BF("Should never finalize object clang::tooling::ToolAction"));
}
obj_finalize_STAMP_clang__tooling__FrontendActionFactory:
{
     // do nothing stamp value 429
    THROW_HARD_ERROR(BF("Should never finalize object clang::tooling::FrontendActionFactory"));
}
obj_finalize_STAMP_clbind__detail__class_map:
{
     // stamp value 430
    clbind::detail::class_map* obj_gc_safe = reinterpret_cast<clbind::detail::class_map*>(client);
    obj_gc_safe->~class_map();
    goto finalize_done;
}
#endif // defined(GC_OBJ_FINALIZE)
#if defined(GC_OBJ_FINALIZE_HELPERS)

#endif // defined(GC_OBJ_FINALIZE_HELPERS)
#if defined(GC_OBJ_FINALIZE_TABLE)
static void* OBJ_FINALIZE_table[] = { 
  /* 0 */ NULL,
  /* 1 */ &&obj_finalize_STAMP_core__T_O,
  /* 2 */ &&obj_finalize_STAMP_core__VaList_dummy_O,
  /* 3 */ &&obj_finalize_STAMP_core__General_O,
  /* 4 */ &&obj_finalize_STAMP_core__MultiStringBuffer_O,
  /* 5 */ &&obj_finalize_STAMP_core__WeakHashTable_O,
  /* 6 */ &&obj_finalize_STAMP_core__WeakKeyHashTable_O,
  /* 7 */ &&obj_finalize_STAMP_core__ReadTable_O,
  /* 8 */ &&obj_finalize_STAMP_core__PosixTimeDuration_O,
  /* 9 */ &&obj_finalize_STAMP_clasp_ffi__ForeignTypeSpec_O,
  /* 10 */ &&obj_finalize_STAMP_core__Instance_O,
  /* 11 */ &&obj_finalize_STAMP_core__DerivableCxxObject_O,
  /* 12 */ &&obj_finalize_STAMP_clbind__ClassRep_O,
  /* 13 */ &&obj_finalize_STAMP_core__SmallMap_O,
  /* 14 */ &&obj_finalize_STAMP_core__WrappedPointer_O,
  /* 15 */ &&obj_finalize_STAMP_core__Archive_O,
  /* 16 */ &&obj_finalize_STAMP_core__SaveArchive_O,
  /* 17 */ &&obj_finalize_STAMP_core__SexpSaveArchive_O,
  /* 18 */ &&obj_finalize_STAMP_core__LoadArchive_O,
  /* 19 */ &&obj_finalize_STAMP_core__SexpLoadArchive_O,
  /* 20 */ &&obj_finalize_STAMP_core__SymbolToEnumConverter_O,
  /* 21 */ &&obj_finalize_STAMP_core__Reader_O,
  /* 22 */ &&obj_finalize_STAMP_core__WeakKeyMapping_O,
  /* 23 */ &&obj_finalize_STAMP_llvmo__Attribute_O,
  /* 24 */ &&obj_finalize_STAMP_core__ExternalObject_O,
  /* 25 */ &&obj_finalize_STAMP_llvmo__Triple_O,
  /* 26 */ &&obj_finalize_STAMP_llvmo__TargetOptions_O,
  /* 27 */ &&obj_finalize_STAMP_llvmo__Pass_O,
  /* 28 */ &&obj_finalize_STAMP_llvmo__ModulePass_O,
  /* 29 */ &&obj_finalize_STAMP_llvmo__ImmutablePass_O,
  /* 30 */ &&obj_finalize_STAMP_llvmo__TargetLibraryInfoWrapperPass_O,
  /* 31 */ &&obj_finalize_STAMP_llvmo__FunctionPass_O,
  /* 32 */ &&obj_finalize_STAMP_llvmo__ExecutionEngine_O,
  /* 33 */ &&obj_finalize_STAMP_llvmo__LLVMContext_O,
  /* 34 */ &&obj_finalize_STAMP_llvmo__PassManagerBuilder_O,
  /* 35 */ &&obj_finalize_STAMP_llvmo__MCSubtargetInfo_O,
  /* 36 */ &&obj_finalize_STAMP_llvmo__TargetSubtargetInfo_O,
  /* 37 */ &&obj_finalize_STAMP_llvmo__Module_O,
  /* 38 */ &&obj_finalize_STAMP_llvmo__Target_O,
  /* 39 */ &&obj_finalize_STAMP_llvmo__Type_O,
  /* 40 */ &&obj_finalize_STAMP_llvmo__IntegerType_O,
  /* 41 */ &&obj_finalize_STAMP_llvmo__FunctionType_O,
  /* 42 */ &&obj_finalize_STAMP_llvmo__CompositeType_O,
  /* 43 */ &&obj_finalize_STAMP_llvmo__SequentialType_O,
  /* 44 */ &&obj_finalize_STAMP_llvmo__PointerType_O,
  /* 45 */ &&obj_finalize_STAMP_llvmo__ArrayType_O,
  /* 46 */ &&obj_finalize_STAMP_llvmo__VectorType_O,
  /* 47 */ &&obj_finalize_STAMP_llvmo__StructType_O,
  /* 48 */ &&obj_finalize_STAMP_llvmo__IRBuilderBase_O,
  /* 49 */ &&obj_finalize_STAMP_llvmo__IRBuilder_O,
  /* 50 */ &&obj_finalize_STAMP_llvmo__APFloat_O,
  /* 51 */ &&obj_finalize_STAMP_llvmo__APInt_O,
  /* 52 */ &&obj_finalize_STAMP_llvmo__DIBuilder_O,
  /* 53 */ &&obj_finalize_STAMP_llvmo__EngineBuilder_O,
  /* 54 */ &&obj_finalize_STAMP_llvmo__PassManagerBase_O,
  /* 55 */ &&obj_finalize_STAMP_llvmo__FunctionPassManager_O,
  /* 56 */ &&obj_finalize_STAMP_llvmo__PassManager_O,
  /* 57 */ &&obj_finalize_STAMP_llvmo__Linker_O,
  /* 58 */ &&obj_finalize_STAMP_llvmo__Metadata_O,
  /* 59 */ &&obj_finalize_STAMP_llvmo__ValueAsMetadata_O,
  /* 60 */ &&obj_finalize_STAMP_llvmo__MDString_O,
  /* 61 */ &&obj_finalize_STAMP_llvmo__MDNode_O,
  /* 62 */ &&obj_finalize_STAMP_llvmo__DINode_O,
  /* 63 */ &&obj_finalize_STAMP_llvmo__DIScope_O,
  /* 64 */ &&obj_finalize_STAMP_llvmo__DILocalScope_O,
  /* 65 */ &&obj_finalize_STAMP_llvmo__DISubprogram_O,
  /* 66 */ &&obj_finalize_STAMP_llvmo__DILexicalBlockBase_O,
  /* 67 */ &&obj_finalize_STAMP_llvmo__DILexicalBlock_O,
  /* 68 */ &&obj_finalize_STAMP_llvmo__DIFile_O,
  /* 69 */ &&obj_finalize_STAMP_llvmo__DICompileUnit_O,
  /* 70 */ &&obj_finalize_STAMP_llvmo__DIType_O,
  /* 71 */ &&obj_finalize_STAMP_llvmo__DICompositeType_O,
  /* 72 */ &&obj_finalize_STAMP_llvmo__DIDerivedType_O,
  /* 73 */ &&obj_finalize_STAMP_llvmo__DIBasicType_O,
  /* 74 */ &&obj_finalize_STAMP_llvmo__DISubroutineType_O,
  /* 75 */ &&obj_finalize_STAMP_llvmo__Value_O,
  /* 76 */ &&obj_finalize_STAMP_llvmo__User_O,
  /* 77 */ &&obj_finalize_STAMP_llvmo__Instruction_O,
  /* 78 */ &&obj_finalize_STAMP_llvmo__UnaryInstruction_O,
  /* 79 */ &&obj_finalize_STAMP_llvmo__VAArgInst_O,
  /* 80 */ &&obj_finalize_STAMP_llvmo__LoadInst_O,
  /* 81 */ &&obj_finalize_STAMP_llvmo__AllocaInst_O,
  /* 82 */ &&obj_finalize_STAMP_llvmo__CallInst_O,
  /* 83 */ &&obj_finalize_STAMP_llvmo__AtomicRMWInst_O,
  /* 84 */ &&obj_finalize_STAMP_llvmo__TerminatorInst_O,
  /* 85 */ &&obj_finalize_STAMP_llvmo__SwitchInst_O,
  /* 86 */ &&obj_finalize_STAMP_llvmo__InvokeInst_O,
  /* 87 */ &&obj_finalize_STAMP_llvmo__UnreachableInst_O,
  /* 88 */ &&obj_finalize_STAMP_llvmo__ReturnInst_O,
  /* 89 */ &&obj_finalize_STAMP_llvmo__IndirectBrInst_O,
  /* 90 */ &&obj_finalize_STAMP_llvmo__ResumeInst_O,
  /* 91 */ &&obj_finalize_STAMP_llvmo__BranchInst_O,
  /* 92 */ &&obj_finalize_STAMP_llvmo__LandingPadInst_O,
  /* 93 */ &&obj_finalize_STAMP_llvmo__AtomicCmpXchgInst_O,
  /* 94 */ &&obj_finalize_STAMP_llvmo__FenceInst_O,
  /* 95 */ &&obj_finalize_STAMP_llvmo__StoreInst_O,
  /* 96 */ &&obj_finalize_STAMP_llvmo__PHINode_O,
  /* 97 */ &&obj_finalize_STAMP_llvmo__Constant_O,
  /* 98 */ &&obj_finalize_STAMP_llvmo__GlobalValue_O,
  /* 99 */ &&obj_finalize_STAMP_llvmo__GlobalVariable_O,
  /* 100 */ &&obj_finalize_STAMP_llvmo__Function_O,
  /* 101 */ &&obj_finalize_STAMP_llvmo__ConstantFP_O,
  /* 102 */ &&obj_finalize_STAMP_llvmo__BlockAddress_O,
  /* 103 */ &&obj_finalize_STAMP_llvmo__ConstantExpr_O,
  /* 104 */ &&obj_finalize_STAMP_llvmo__ConstantPointerNull_O,
  /* 105 */ &&obj_finalize_STAMP_llvmo__ConstantDataSequential_O,
  /* 106 */ &&obj_finalize_STAMP_llvmo__ConstantDataArray_O,
  /* 107 */ &&obj_finalize_STAMP_llvmo__UndefValue_O,
  /* 108 */ &&obj_finalize_STAMP_llvmo__ConstantArray_O,
  /* 109 */ &&obj_finalize_STAMP_llvmo__ConstantStruct_O,
  /* 110 */ &&obj_finalize_STAMP_llvmo__ConstantInt_O,
  /* 111 */ &&obj_finalize_STAMP_llvmo__Argument_O,
  /* 112 */ &&obj_finalize_STAMP_llvmo__BasicBlock_O,
  /* 113 */ &&obj_finalize_STAMP_llvmo__TargetMachine_O,
  /* 114 */ &&obj_finalize_STAMP_llvmo__LLVMTargetMachine_O,
  /* 115 */ &&obj_finalize_STAMP_llvmo__NamedMDNode_O,
  /* 116 */ &&obj_finalize_STAMP_core__SmallMultimap_O,
  /* 117 */ &&obj_finalize_STAMP_core__LambdaListHandler_O,
  /* 118 */ &&obj_finalize_STAMP_core__Sigset_O,
  /* 119 */ &&obj_finalize_STAMP_llvmo__AttributeSet_O,
  /* 120 */ &&obj_finalize_STAMP_core__Environment_O,
  /* 121 */ &&obj_finalize_STAMP_core__GlueEnvironment_O,
  /* 122 */ &&obj_finalize_STAMP_core__LexicalEnvironment_O,
  /* 123 */ &&obj_finalize_STAMP_core__RuntimeVisibleEnvironment_O,
  /* 124 */ &&obj_finalize_STAMP_core__BlockEnvironment_O,
  /* 125 */ &&obj_finalize_STAMP_core__FunctionValueEnvironment_O,
  /* 126 */ &&obj_finalize_STAMP_core__ValueEnvironment_O,
  /* 127 */ &&obj_finalize_STAMP_core__TagbodyEnvironment_O,
  /* 128 */ &&obj_finalize_STAMP_core__CompileTimeEnvironment_O,
  /* 129 */ &&obj_finalize_STAMP_core__CatchEnvironment_O,
  /* 130 */ &&obj_finalize_STAMP_core__MacroletEnvironment_O,
  /* 131 */ &&obj_finalize_STAMP_core__SymbolMacroletEnvironment_O,
  /* 132 */ &&obj_finalize_STAMP_core__UnwindProtectEnvironment_O,
  /* 133 */ &&obj_finalize_STAMP_core__FunctionContainerEnvironment_O,
  /* 134 */ &&obj_finalize_STAMP_core__ActivationFrame_O,
  /* 135 */ &&obj_finalize_STAMP_core__ValueFrame_O,
  /* 136 */ &&obj_finalize_STAMP_core__FunctionFrame_O,
  /* 137 */ &&obj_finalize_STAMP_core__RandomState_O,
  /* 138 */ &&obj_finalize_STAMP_core__Function_O,
  /* 139 */ &&obj_finalize_STAMP_core__Closure_O,
  /* 140 */ &&obj_finalize_STAMP_core__ClosureWithSlots_O,
  /* 141 */ &&obj_finalize_STAMP_core__SingleDispatchMethodFunction_O,
  /* 142 */ &&obj_finalize_STAMP_core__CxxMethodFunction_O,
  /* 143 */ &&obj_finalize_STAMP_core__BuiltinClosure_O,
  /* 144 */ &&obj_finalize_STAMP_core__TranslationFunctor_O,
  /* 145 */ &&obj_finalize_STAMP_core__SingleDispatchGenericFunctionClosure_O,
  /* 146 */ &&obj_finalize_STAMP_core__SingleDispatchEffectiveMethodFunction_O,
  /* 147 */ &&obj_finalize_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O,
  /* 148 */ &&obj_finalize_STAMP_core__FuncallableInstance_O,
  /* 149 */ &&obj_finalize_STAMP_core__Creator_O,
  /* 150 */ &&obj_finalize_STAMP_core__ClassRepCreator_O,
  /* 151 */ &&obj_finalize_STAMP_core__DerivableCxxClassCreator_O,
  /* 152 */ &&obj_finalize_STAMP_core__FuncallableInstanceCreator_O,
  /* 153 */ &&obj_finalize_STAMP_clbind__ConstructorCreator_O,
  /* 154 */ &&obj_finalize_STAMP_clbind__DummyCreator_O,
  /* 155 */ &&obj_finalize_STAMP_core__InstanceCreator_O,
  /* 156 */ &&obj_finalize_STAMP_core__StandardClassCreator_O,
  /* 157 */ &&obj_finalize_STAMP_core__SpecialForm_O,
  /* 158 */ &&obj_finalize_STAMP_core__SequenceStepper_O,
  /* 159 */ &&obj_finalize_STAMP_core__VectorStepper_O,
  /* 160 */ &&obj_finalize_STAMP_core__ConsStepper_O,
  /* 161 */ &&obj_finalize_STAMP_core__WeakPointer_O,
  /* 162 */ &&obj_finalize_STAMP_llvmo__DebugLoc_O,
  /* 163 */ &&obj_finalize_STAMP_core__SNode_O,
  /* 164 */ &&obj_finalize_STAMP_core__BranchSNode_O,
  /* 165 */ &&obj_finalize_STAMP_core__LeafSNode_O,
  /* 166 */ &&obj_finalize_STAMP_llvmo__ModuleHandle_O,
  /* 167 */ &&obj_finalize_STAMP_core__Pointer_O,
  /* 168 */ &&obj_finalize_STAMP_clasp_ffi__ForeignData_O,
  /* 169 */ &&obj_finalize_STAMP_core__CxxObject_O,
  /* 170 */ &&obj_finalize_STAMP_llvmo__DINodeArray_O,
  /* 171 */ &&obj_finalize_STAMP_core__NativeVector_float_O,
  /* 172 */ &&obj_finalize_STAMP_clcenv__Info_O,
  /* 173 */ &&obj_finalize_STAMP_clcenv__OptimizeInfo_O,
  /* 174 */ &&obj_finalize_STAMP_clcenv__BlockInfo_O,
  /* 175 */ &&obj_finalize_STAMP_clcenv__FunctionInfo_O,
  /* 176 */ &&obj_finalize_STAMP_clcenv__GlobalMacroInfo_O,
  /* 177 */ &&obj_finalize_STAMP_clcenv__LocalMacroInfo_O,
  /* 178 */ &&obj_finalize_STAMP_clcenv__LocalFunctionInfo_O,
  /* 179 */ &&obj_finalize_STAMP_clcenv__SpecialOperatorInfo_O,
  /* 180 */ &&obj_finalize_STAMP_clcenv__LambdaNameInfo_O,
  /* 181 */ &&obj_finalize_STAMP_clcenv__GlobalFunctionInfo_O,
  /* 182 */ &&obj_finalize_STAMP_clcenv__VariableInfo_O,
  /* 183 */ &&obj_finalize_STAMP_clcenv__SpecialVariableInfo_O,
  /* 184 */ &&obj_finalize_STAMP_clcenv__LexicalVariableInfo_O,
  /* 185 */ &&obj_finalize_STAMP_clcenv__SymbolMacroInfo_O,
  /* 186 */ &&obj_finalize_STAMP_clcenv__ConstantVariableInfo_O,
  /* 187 */ &&obj_finalize_STAMP_mp__ConditionVariable_O,
  /* 188 */ &&obj_finalize_STAMP_mp__Mutex_O,
  /* 189 */ &&obj_finalize_STAMP_mp__RecursiveMutex_O,
  /* 190 */ &&obj_finalize_STAMP_llvmo__DITypeRefArray_O,
  /* 191 */ &&obj_finalize_STAMP_core__NativeVector_double_O,
  /* 192 */ &&obj_finalize_STAMP_core__NativeVector_int_O,
  /* 193 */ &&obj_finalize_STAMP_mp__SharedMutex_O,
  /* 194 */ &&obj_finalize_STAMP_clcenv__Entry_O,
  /* 195 */ &&obj_finalize_STAMP_clcenv__VariableType_O,
  /* 196 */ &&obj_finalize_STAMP_clcenv__VariableIgnore_O,
  /* 197 */ &&obj_finalize_STAMP_clcenv__Function_O,
  /* 198 */ &&obj_finalize_STAMP_clcenv__SymbolMacro_O,
  /* 199 */ &&obj_finalize_STAMP_clcenv__FunctionDynamicExtent_O,
  /* 200 */ &&obj_finalize_STAMP_clcenv__Inline_O,
  /* 201 */ &&obj_finalize_STAMP_clcenv__Closure_O,
  /* 202 */ &&obj_finalize_STAMP_clcenv__Optimize_O,
  /* 203 */ &&obj_finalize_STAMP_clcenv__LambdaName_O,
  /* 204 */ &&obj_finalize_STAMP_clcenv__Tag_O,
  /* 205 */ &&obj_finalize_STAMP_clcenv__Block_O,
  /* 206 */ &&obj_finalize_STAMP_clcenv__FunctionType_O,
  /* 207 */ &&obj_finalize_STAMP_clcenv__GlobalEnvironment_O,
  /* 208 */ &&obj_finalize_STAMP_clcenv__VariableDynamicExtent_O,
  /* 209 */ &&obj_finalize_STAMP_clcenv__LexicalVariable_O,
  /* 210 */ &&obj_finalize_STAMP_clcenv__SpecialVariable_O,
  /* 211 */ &&obj_finalize_STAMP_clcenv__Macro_O,
  /* 212 */ &&obj_finalize_STAMP_clcenv__FunctionIgnore_O,
  /* 213 */ &&obj_finalize_STAMP_mp__Process_O,
  /* 214 */ &&obj_finalize_STAMP_core__SingleDispatchMethod_O,
  /* 215 */ &&obj_finalize_STAMP_core__Iterator_O,
  /* 216 */ &&obj_finalize_STAMP_core__RecursiveDirectoryIterator_O,
  /* 217 */ &&obj_finalize_STAMP_core__DirectoryIterator_O,
  /* 218 */ &&obj_finalize_STAMP_llvmo__InsertPoint_O,
  /* 219 */ &&obj_finalize_STAMP_core__Array_O,
  /* 220 */ &&obj_finalize_STAMP_core__AbstractSimpleVector_O,
  /* 221 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVectorFloat_O_float_core__AbstractSimpleVector_O_,
  /* 222 */ &&obj_finalize_STAMP_core__SimpleVectorFloat_O,
  /* 223 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 224 */ &&obj_finalize_STAMP_core__SimpleVector_byte64_t_O,
  /* 225 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_,
  /* 226 */ &&obj_finalize_STAMP_core__SimpleVector_int64_t_O,
  /* 227 */ &&obj_finalize_STAMP_core__SimpleString_O,
  /* 228 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_,
  /* 229 */ &&obj_finalize_STAMP_core__SimpleCharacterString_O,
  /* 230 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_,
  /* 231 */ &&obj_finalize_STAMP_core__SimpleBaseString_O,
  /* 232 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_,
  /* 233 */ &&obj_finalize_STAMP_core__SimpleVector_int16_t_O,
  /* 234 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_,
  /* 235 */ &&obj_finalize_STAMP_core__SimpleVector_byte16_t_O,
  /* 236 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_,
  /* 237 */ &&obj_finalize_STAMP_core__SimpleVector_fixnum_O,
  /* 238 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_,
  /* 239 */ &&obj_finalize_STAMP_core__SimpleVector_int8_t_O,
  /* 240 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_,
  /* 241 */ &&obj_finalize_STAMP_core__SimpleVector_O,
  /* 242 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_,
  /* 243 */ &&obj_finalize_STAMP_core__SimpleVector_byte8_t_O,
  /* 244 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_,
  /* 245 */ &&obj_finalize_STAMP_core__SimpleVector_int32_t_O,
  /* 246 */ &&obj_finalize_STAMP_core__SimpleBitVector_O,
  /* 247 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_,
  /* 248 */ &&obj_finalize_STAMP_core__SimpleVector_byte32_t_O,
  /* 249 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 250 */ &&obj_finalize_STAMP_core__SimpleVector_size_t_O,
  /* 251 */ &&obj_finalize_STAMP_core__template_SimpleVector_core__SimpleVectorDouble_O_double_core__AbstractSimpleVector_O_,
  /* 252 */ &&obj_finalize_STAMP_core__SimpleVectorDouble_O,
  /* 253 */ &&obj_finalize_STAMP_core__MDArray_O,
  /* 254 */ &&obj_finalize_STAMP_core__BitVectorNs_O,
  /* 255 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_,
  /* 256 */ &&obj_finalize_STAMP_core__MDArray_byte64_t_O,
  /* 257 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_,
  /* 258 */ &&obj_finalize_STAMP_core__MDArray_int16_t_O,
  /* 259 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_,
  /* 260 */ &&obj_finalize_STAMP_core__MDArray_int8_t_O,
  /* 261 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_,
  /* 262 */ &&obj_finalize_STAMP_core__MDArrayCharacter_O,
  /* 263 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_,
  /* 264 */ &&obj_finalize_STAMP_core__MDArray_int32_t_O,
  /* 265 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayFloat_O_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__MDArray_O_,
  /* 266 */ &&obj_finalize_STAMP_core__MDArrayFloat_O,
  /* 267 */ &&obj_finalize_STAMP_core__StrNs_O,
  /* 268 */ &&obj_finalize_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_,
  /* 269 */ &&obj_finalize_STAMP_core__StrWNs_O,
  /* 270 */ &&obj_finalize_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_,
  /* 271 */ &&obj_finalize_STAMP_core__Str8Ns_O,
  /* 272 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayDouble_O_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__MDArray_O_,
  /* 273 */ &&obj_finalize_STAMP_core__MDArrayDouble_O,
  /* 274 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_,
  /* 275 */ &&obj_finalize_STAMP_core__MDArrayT_O,
  /* 276 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_,
  /* 277 */ &&obj_finalize_STAMP_core__MDArray_size_t_O,
  /* 278 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_,
  /* 279 */ &&obj_finalize_STAMP_core__MDArray_byte8_t_O,
  /* 280 */ &&obj_finalize_STAMP_core__MDArrayBit_O,
  /* 281 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_,
  /* 282 */ &&obj_finalize_STAMP_core__MDArray_int64_t_O,
  /* 283 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_,
  /* 284 */ &&obj_finalize_STAMP_core__MDArray_byte16_t_O,
  /* 285 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_,
  /* 286 */ &&obj_finalize_STAMP_core__MDArray_byte32_t_O,
  /* 287 */ &&obj_finalize_STAMP_core__SimpleMDArray_O,
  /* 288 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_,
  /* 289 */ &&obj_finalize_STAMP_core__SimpleMDArray_int8_t_O,
  /* 290 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_,
  /* 291 */ &&obj_finalize_STAMP_core__SimpleMDArrayCharacter_O,
  /* 292 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_,
  /* 293 */ &&obj_finalize_STAMP_core__SimpleMDArray_fixnum_O,
  /* 294 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_,
  /* 295 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte32_t_O,
  /* 296 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_,
  /* 297 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte16_t_O,
  /* 298 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_,
  /* 299 */ &&obj_finalize_STAMP_core__SimpleMDArrayT_O,
  /* 300 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_,
  /* 301 */ &&obj_finalize_STAMP_core__SimpleMDArray_int32_t_O,
  /* 302 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__SimpleMDArray_O_,
  /* 303 */ &&obj_finalize_STAMP_core__SimpleMDArrayDouble_O,
  /* 304 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_,
  /* 305 */ &&obj_finalize_STAMP_core__SimpleMDArrayBaseChar_O,
  /* 306 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_,
  /* 307 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte64_t_O,
  /* 308 */ &&obj_finalize_STAMP_core__SimpleMDArrayBit_O,
  /* 309 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_,
  /* 310 */ &&obj_finalize_STAMP_core__SimpleMDArray_int16_t_O,
  /* 311 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_,
  /* 312 */ &&obj_finalize_STAMP_core__SimpleMDArray_byte8_t_O,
  /* 313 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_,
  /* 314 */ &&obj_finalize_STAMP_core__SimpleMDArray_size_t_O,
  /* 315 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_,
  /* 316 */ &&obj_finalize_STAMP_core__SimpleMDArray_int64_t_O,
  /* 317 */ &&obj_finalize_STAMP_core__template_SimpleArray_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__SimpleMDArray_O_,
  /* 318 */ &&obj_finalize_STAMP_core__SimpleMDArrayFloat_O,
  /* 319 */ &&obj_finalize_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_,
  /* 320 */ &&obj_finalize_STAMP_core__MDArray_fixnum_O,
  /* 321 */ &&obj_finalize_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_,
  /* 322 */ &&obj_finalize_STAMP_core__MDArrayBaseChar_O,
  /* 323 */ &&obj_finalize_STAMP_core__Symbol_O,
  /* 324 */ &&obj_finalize_STAMP_core__Null_O,
  /* 325 */ &&obj_finalize_STAMP_mp__BlockingConcurrentQueue_O,
  /* 326 */ &&obj_finalize_STAMP_core__Path_O,
  /* 327 */ &&obj_finalize_STAMP_core__Character_dummy_O,
  /* 328 */ &&obj_finalize_STAMP_core__SourceManager_O,
  /* 329 */ &&obj_finalize_STAMP_llvmo__DataLayout_O,
  /* 330 */ &&obj_finalize_STAMP_core__Pathname_O,
  /* 331 */ &&obj_finalize_STAMP_core__LogicalPathname_O,
  /* 332 */ &&obj_finalize_STAMP_core__Cache_O,
  /* 333 */ &&obj_finalize_STAMP_core__LoadTimeValues_O,
  /* 334 */ &&obj_finalize_STAMP_core__SharpEqualWrapper_O,
  /* 335 */ &&obj_finalize_STAMP_core__Number_O,
  /* 336 */ &&obj_finalize_STAMP_core__Real_O,
  /* 337 */ &&obj_finalize_STAMP_core__Rational_O,
  /* 338 */ &&obj_finalize_STAMP_core__Ratio_O,
  /* 339 */ &&obj_finalize_STAMP_core__Integer_O,
  /* 340 */ &&obj_finalize_STAMP_core__Bignum_O,
  /* 341 */ &&obj_finalize_STAMP_core__Fixnum_dummy_O,
  /* 342 */ &&obj_finalize_STAMP_core__Float_O,
  /* 343 */ &&obj_finalize_STAMP_core__DoubleFloat_O,
  /* 344 */ &&obj_finalize_STAMP_core__SingleFloat_dummy_O,
  /* 345 */ &&obj_finalize_STAMP_core__LongFloat_O,
  /* 346 */ &&obj_finalize_STAMP_core__ShortFloat_O,
  /* 347 */ &&obj_finalize_STAMP_core__Complex_O,
  /* 348 */ &&obj_finalize_STAMP_core__Stream_O,
  /* 349 */ &&obj_finalize_STAMP_core__AnsiStream_O,
  /* 350 */ &&obj_finalize_STAMP_core__TwoWayStream_O,
  /* 351 */ &&obj_finalize_STAMP_core__BroadcastStream_O,
  /* 352 */ &&obj_finalize_STAMP_core__SynonymStream_O,
  /* 353 */ &&obj_finalize_STAMP_core__ConcatenatedStream_O,
  /* 354 */ &&obj_finalize_STAMP_core__StringStream_O,
  /* 355 */ &&obj_finalize_STAMP_core__StringOutputStream_O,
  /* 356 */ &&obj_finalize_STAMP_core__StringInputStream_O,
  /* 357 */ &&obj_finalize_STAMP_core__FileStream_O,
  /* 358 */ &&obj_finalize_STAMP_core__IOFileStream_O,
  /* 359 */ &&obj_finalize_STAMP_core__IOStreamStream_O,
  /* 360 */ &&obj_finalize_STAMP_core__EchoStream_O,
  /* 361 */ &&obj_finalize_STAMP_core__Package_O,
  /* 362 */ &&obj_finalize_STAMP_llvmo__ClaspJIT_O,
  /* 363 */ &&obj_finalize_STAMP_core__FileStatus_O,
  /* 364 */ &&obj_finalize_STAMP_core__InvocationHistoryFrameIterator_O,
  /* 365 */ &&obj_finalize_STAMP_core__PosixTime_O,
  /* 366 */ &&obj_finalize_STAMP_core__HashTable_O,
  /* 367 */ &&obj_finalize_STAMP_core__HashTableEqual_O,
  /* 368 */ &&obj_finalize_STAMP_core__HashTableEqualp_O,
  /* 369 */ &&obj_finalize_STAMP_core__HashTableEq_O,
  /* 370 */ &&obj_finalize_STAMP_core__HashTableEql_O,
  /* 371 */ &&obj_finalize_STAMP_core__Exposer_O,
  /* 372 */ &&obj_finalize_STAMP_core__CoreExposer_O,
  /* 373 */ &&obj_finalize_STAMP_asttooling__AsttoolingExposer_O,
  /* 374 */ &&obj_finalize_STAMP_core__SourcePosInfo_O,
  /* 375 */ &&obj_finalize_STAMP_core__IntArray_O,
  /* 376 */ &&obj_finalize_STAMP_core__SourceFileInfo_O,
  /* 377 */ &&obj_finalize_STAMP_core__DirectoryEntry_O,
  /* 378 */ &&obj_finalize_STAMP_core__LightUserData_O,
  /* 379 */ &&obj_finalize_STAMP_core__UserData_O,
  /* 380 */ &&obj_finalize_STAMP_core__Record_O,
  /* 381 */ &&obj_finalize_STAMP_clbind__ClassRegistry_O,
  /* 382 */ &&obj_finalize_STAMP_mp__ConcurrentQueue_O,
  /* 383 */ &&obj_finalize_STAMP_core__Cons_O,
  /* 384 */ &&obj_finalize_STAMP_clang__ast_matchers__MatchFinder__MatchCallback,
  /* 385 */ &&obj_finalize_STAMP_core__Lisp_O,
  /* 386 */ &&obj_finalize_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_,
  /* 387 */ &&obj_finalize_STAMP_asttooling__AstVisitor_O,
  /* 388 */ &&obj_finalize_STAMP_gctools__GCContainer,
  /* 389 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__KeywordArgument_,
  /* 390 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_int_,
  /* 391 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__CacheRecord_,
  /* 392 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__RequiredArgument_,
  /* 393 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__,
  /* 394 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__,
  /* 395 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_double_,
  /* 396 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolStorage_,
  /* 397 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_short_,
  /* 398 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__DynamicBinding_,
  /* 399 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__,
  /* 400 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_long_,
  /* 401 */ &&obj_finalize_STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_,
  /* 402 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___,
  /* 403 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_signed_char_,
  /* 404 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__ExceptionEntry_,
  /* 405 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__,
  /* 406 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___,
  /* 407 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_int_,
  /* 408 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_char_,
  /* 409 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__,
  /* 410 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__AuxArgument_,
  /* 411 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_long_,
  /* 412 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_int_,
  /* 413 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__,
  /* 414 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__,
  /* 415 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__SymbolClassPair_,
  /* 416 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__,
  /* 417 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__,
  /* 418 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_float_,
  /* 419 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__,
  /* 420 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_double_,
  /* 421 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__T_O___,
  /* 422 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_core__OptionalArgument_,
  /* 423 */ &&obj_finalize_STAMP_gctools__GCArray_moveable_unsigned_short_,
  /* 424 */ &&obj_finalize_STAMP_gctools__GCVector_moveable_float_,
  /* 425 */ &&obj_finalize_STAMP_clang__FrontendAction,
  /* 426 */ &&obj_finalize_STAMP_clang__ASTFrontendAction,
  /* 427 */ &&obj_finalize_STAMP_clang__SyntaxOnlyAction,
  /* 428 */ &&obj_finalize_STAMP_clang__tooling__ToolAction,
  /* 429 */ &&obj_finalize_STAMP_clang__tooling__FrontendActionFactory,
  /* 430 */ &&obj_finalize_STAMP_clbind__detail__class_map,
   NULL
};
#endif // defined(GC_OBJ_FINALIZE_TABLE)
#if defined(GC_OBJ_DEALLOCATOR)
obj_deallocate_unmanaged_instance_STAMP_core__T_O:
{
     // stamp value 1
    core::T_O* obj_gc_safe = reinterpret_cast<core::T_O*>(client);
    GC<core::T_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__VaList_dummy_O:
{
     // stamp value 2
    core::VaList_dummy_O* obj_gc_safe = reinterpret_cast<core::VaList_dummy_O*>(client);
    GC<core::VaList_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__General_O:
{
     // stamp value 3
    core::General_O* obj_gc_safe = reinterpret_cast<core::General_O*>(client);
    GC<core::General_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__MultiStringBuffer_O:
{
     // stamp value 4
    core::MultiStringBuffer_O* obj_gc_safe = reinterpret_cast<core::MultiStringBuffer_O*>(client);
    GC<core::MultiStringBuffer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WeakHashTable_O:
{
     // stamp value 5
    core::WeakHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakHashTable_O*>(client);
    GC<core::WeakHashTable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WeakKeyHashTable_O:
{
     // stamp value 6
    core::WeakKeyHashTable_O* obj_gc_safe = reinterpret_cast<core::WeakKeyHashTable_O*>(client);
    GC<core::WeakKeyHashTable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ReadTable_O:
{
     // stamp value 7
    core::ReadTable_O* obj_gc_safe = reinterpret_cast<core::ReadTable_O*>(client);
    GC<core::ReadTable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__PosixTimeDuration_O:
{
     // stamp value 8
    core::PosixTimeDuration_O* obj_gc_safe = reinterpret_cast<core::PosixTimeDuration_O*>(client);
    GC<core::PosixTimeDuration_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignTypeSpec_O:
{
     // stamp value 9
    clasp_ffi::ForeignTypeSpec_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignTypeSpec_O*>(client);
    GC<clasp_ffi::ForeignTypeSpec_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Instance_O:
{
     // stamp value 10
    core::Instance_O* obj_gc_safe = reinterpret_cast<core::Instance_O*>(client);
    GC<core::Instance_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxObject_O:
{
     // stamp value 11
    core::DerivableCxxObject_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxObject_O*>(client);
    GC<core::DerivableCxxObject_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRep_O:
{
     // stamp value 12
    clbind::ClassRep_O* obj_gc_safe = reinterpret_cast<clbind::ClassRep_O*>(client);
    GC<clbind::ClassRep_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SmallMap_O:
{
     // stamp value 13
    core::SmallMap_O* obj_gc_safe = reinterpret_cast<core::SmallMap_O*>(client);
    GC<core::SmallMap_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WrappedPointer_O:
{
     // stamp value 14
    core::WrappedPointer_O* obj_gc_safe = reinterpret_cast<core::WrappedPointer_O*>(client);
    GC<core::WrappedPointer_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__Archive_O:
{
     // stamp value 15
    core::Archive_O* obj_gc_safe = reinterpret_cast<core::Archive_O*>(client);
    GC<core::Archive_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SaveArchive_O:
{
     // stamp value 16
    core::SaveArchive_O* obj_gc_safe = reinterpret_cast<core::SaveArchive_O*>(client);
    GC<core::SaveArchive_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SexpSaveArchive_O:
{
     // stamp value 17
    core::SexpSaveArchive_O* obj_gc_safe = reinterpret_cast<core::SexpSaveArchive_O*>(client);
    GC<core::SexpSaveArchive_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LoadArchive_O:
{
     // stamp value 18
    core::LoadArchive_O* obj_gc_safe = reinterpret_cast<core::LoadArchive_O*>(client);
    GC<core::LoadArchive_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SexpLoadArchive_O:
{
     // stamp value 19
    core::SexpLoadArchive_O* obj_gc_safe = reinterpret_cast<core::SexpLoadArchive_O*>(client);
    GC<core::SexpLoadArchive_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SymbolToEnumConverter_O:
{
     // stamp value 20
    core::SymbolToEnumConverter_O* obj_gc_safe = reinterpret_cast<core::SymbolToEnumConverter_O*>(client);
    GC<core::SymbolToEnumConverter_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Reader_O:
{
     // stamp value 21
    core::Reader_O* obj_gc_safe = reinterpret_cast<core::Reader_O*>(client);
    GC<core::Reader_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WeakKeyMapping_O:
{
     // stamp value 22
    core::WeakKeyMapping_O* obj_gc_safe = reinterpret_cast<core::WeakKeyMapping_O*>(client);
    GC<core::WeakKeyMapping_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Attribute_O:
{
     // stamp value 23
    llvmo::Attribute_O* obj_gc_safe = reinterpret_cast<llvmo::Attribute_O*>(client);
    GC<llvmo::Attribute_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ExternalObject_O:
{
     // stamp value 24
    core::ExternalObject_O* obj_gc_safe = reinterpret_cast<core::ExternalObject_O*>(client);
    GC<core::ExternalObject_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Triple_O:
{
     // stamp value 25
    llvmo::Triple_O* obj_gc_safe = reinterpret_cast<llvmo::Triple_O*>(client);
    GC<llvmo::Triple_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetOptions_O:
{
     // stamp value 26
    llvmo::TargetOptions_O* obj_gc_safe = reinterpret_cast<llvmo::TargetOptions_O*>(client);
    GC<llvmo::TargetOptions_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Pass_O:
{
     // stamp value 27
    llvmo::Pass_O* obj_gc_safe = reinterpret_cast<llvmo::Pass_O*>(client);
    GC<llvmo::Pass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ModulePass_O:
{
     // stamp value 28
    llvmo::ModulePass_O* obj_gc_safe = reinterpret_cast<llvmo::ModulePass_O*>(client);
    GC<llvmo::ModulePass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ImmutablePass_O:
{
     // stamp value 29
    llvmo::ImmutablePass_O* obj_gc_safe = reinterpret_cast<llvmo::ImmutablePass_O*>(client);
    GC<llvmo::ImmutablePass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetLibraryInfoWrapperPass_O:
{
     // stamp value 30
    llvmo::TargetLibraryInfoWrapperPass_O* obj_gc_safe = reinterpret_cast<llvmo::TargetLibraryInfoWrapperPass_O*>(client);
    GC<llvmo::TargetLibraryInfoWrapperPass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPass_O:
{
     // stamp value 31
    llvmo::FunctionPass_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPass_O*>(client);
    GC<llvmo::FunctionPass_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ExecutionEngine_O:
{
     // stamp value 32
    llvmo::ExecutionEngine_O* obj_gc_safe = reinterpret_cast<llvmo::ExecutionEngine_O*>(client);
    GC<llvmo::ExecutionEngine_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMContext_O:
{
     // stamp value 33
    llvmo::LLVMContext_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMContext_O*>(client);
    GC<llvmo::LLVMContext_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBuilder_O:
{
     // stamp value 34
    llvmo::PassManagerBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBuilder_O*>(client);
    GC<llvmo::PassManagerBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MCSubtargetInfo_O:
{
     // stamp value 35
    llvmo::MCSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::MCSubtargetInfo_O*>(client);
    GC<llvmo::MCSubtargetInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetSubtargetInfo_O:
{
     // stamp value 36
    llvmo::TargetSubtargetInfo_O* obj_gc_safe = reinterpret_cast<llvmo::TargetSubtargetInfo_O*>(client);
    GC<llvmo::TargetSubtargetInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Module_O:
{
     // stamp value 37
    llvmo::Module_O* obj_gc_safe = reinterpret_cast<llvmo::Module_O*>(client);
    GC<llvmo::Module_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Target_O:
{
     // stamp value 38
    llvmo::Target_O* obj_gc_safe = reinterpret_cast<llvmo::Target_O*>(client);
    GC<llvmo::Target_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Type_O:
{
     // stamp value 39
    llvmo::Type_O* obj_gc_safe = reinterpret_cast<llvmo::Type_O*>(client);
    GC<llvmo::Type_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IntegerType_O:
{
     // stamp value 40
    llvmo::IntegerType_O* obj_gc_safe = reinterpret_cast<llvmo::IntegerType_O*>(client);
    GC<llvmo::IntegerType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionType_O:
{
     // stamp value 41
    llvmo::FunctionType_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionType_O*>(client);
    GC<llvmo::FunctionType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__CompositeType_O:
{
     // stamp value 42
    llvmo::CompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::CompositeType_O*>(client);
    GC<llvmo::CompositeType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__SequentialType_O:
{
     // stamp value 43
    llvmo::SequentialType_O* obj_gc_safe = reinterpret_cast<llvmo::SequentialType_O*>(client);
    GC<llvmo::SequentialType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PointerType_O:
{
     // stamp value 44
    llvmo::PointerType_O* obj_gc_safe = reinterpret_cast<llvmo::PointerType_O*>(client);
    GC<llvmo::PointerType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ArrayType_O:
{
     // stamp value 45
    llvmo::ArrayType_O* obj_gc_safe = reinterpret_cast<llvmo::ArrayType_O*>(client);
    GC<llvmo::ArrayType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__VectorType_O:
{
     // stamp value 46
    llvmo::VectorType_O* obj_gc_safe = reinterpret_cast<llvmo::VectorType_O*>(client);
    GC<llvmo::VectorType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__StructType_O:
{
     // stamp value 47
    llvmo::StructType_O* obj_gc_safe = reinterpret_cast<llvmo::StructType_O*>(client);
    GC<llvmo::StructType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilderBase_O:
{
     // stamp value 48
    llvmo::IRBuilderBase_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilderBase_O*>(client);
    GC<llvmo::IRBuilderBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilder_O:
{
     // stamp value 49
    llvmo::IRBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::IRBuilder_O*>(client);
    GC<llvmo::IRBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__APFloat_O:
{
     // stamp value 50
    llvmo::APFloat_O* obj_gc_safe = reinterpret_cast<llvmo::APFloat_O*>(client);
    GC<llvmo::APFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__APInt_O:
{
     // stamp value 51
    llvmo::APInt_O* obj_gc_safe = reinterpret_cast<llvmo::APInt_O*>(client);
    GC<llvmo::APInt_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBuilder_O:
{
     // stamp value 52
    llvmo::DIBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::DIBuilder_O*>(client);
    GC<llvmo::DIBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__EngineBuilder_O:
{
     // stamp value 53
    llvmo::EngineBuilder_O* obj_gc_safe = reinterpret_cast<llvmo::EngineBuilder_O*>(client);
    GC<llvmo::EngineBuilder_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBase_O:
{
     // stamp value 54
    llvmo::PassManagerBase_O* obj_gc_safe = reinterpret_cast<llvmo::PassManagerBase_O*>(client);
    GC<llvmo::PassManagerBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPassManager_O:
{
     // stamp value 55
    llvmo::FunctionPassManager_O* obj_gc_safe = reinterpret_cast<llvmo::FunctionPassManager_O*>(client);
    GC<llvmo::FunctionPassManager_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManager_O:
{
     // stamp value 56
    llvmo::PassManager_O* obj_gc_safe = reinterpret_cast<llvmo::PassManager_O*>(client);
    GC<llvmo::PassManager_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Linker_O:
{
     // stamp value 57
    llvmo::Linker_O* obj_gc_safe = reinterpret_cast<llvmo::Linker_O*>(client);
    GC<llvmo::Linker_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Metadata_O:
{
     // stamp value 58
    llvmo::Metadata_O* obj_gc_safe = reinterpret_cast<llvmo::Metadata_O*>(client);
    GC<llvmo::Metadata_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ValueAsMetadata_O:
{
     // stamp value 59
    llvmo::ValueAsMetadata_O* obj_gc_safe = reinterpret_cast<llvmo::ValueAsMetadata_O*>(client);
    GC<llvmo::ValueAsMetadata_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MDString_O:
{
     // stamp value 60
    llvmo::MDString_O* obj_gc_safe = reinterpret_cast<llvmo::MDString_O*>(client);
    GC<llvmo::MDString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__MDNode_O:
{
     // stamp value 61
    llvmo::MDNode_O* obj_gc_safe = reinterpret_cast<llvmo::MDNode_O*>(client);
    GC<llvmo::MDNode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DINode_O:
{
     // stamp value 62
    llvmo::DINode_O* obj_gc_safe = reinterpret_cast<llvmo::DINode_O*>(client);
    GC<llvmo::DINode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIScope_O:
{
     // stamp value 63
    llvmo::DIScope_O* obj_gc_safe = reinterpret_cast<llvmo::DIScope_O*>(client);
    GC<llvmo::DIScope_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocalScope_O:
{
     // stamp value 64
    llvmo::DILocalScope_O* obj_gc_safe = reinterpret_cast<llvmo::DILocalScope_O*>(client);
    GC<llvmo::DILocalScope_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubprogram_O:
{
     // stamp value 65
    llvmo::DISubprogram_O* obj_gc_safe = reinterpret_cast<llvmo::DISubprogram_O*>(client);
    GC<llvmo::DISubprogram_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlockBase_O:
{
     // stamp value 66
    llvmo::DILexicalBlockBase_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlockBase_O*>(client);
    GC<llvmo::DILexicalBlockBase_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlock_O:
{
     // stamp value 67
    llvmo::DILexicalBlock_O* obj_gc_safe = reinterpret_cast<llvmo::DILexicalBlock_O*>(client);
    GC<llvmo::DILexicalBlock_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIFile_O:
{
     // stamp value 68
    llvmo::DIFile_O* obj_gc_safe = reinterpret_cast<llvmo::DIFile_O*>(client);
    GC<llvmo::DIFile_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompileUnit_O:
{
     // stamp value 69
    llvmo::DICompileUnit_O* obj_gc_safe = reinterpret_cast<llvmo::DICompileUnit_O*>(client);
    GC<llvmo::DICompileUnit_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIType_O:
{
     // stamp value 70
    llvmo::DIType_O* obj_gc_safe = reinterpret_cast<llvmo::DIType_O*>(client);
    GC<llvmo::DIType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompositeType_O:
{
     // stamp value 71
    llvmo::DICompositeType_O* obj_gc_safe = reinterpret_cast<llvmo::DICompositeType_O*>(client);
    GC<llvmo::DICompositeType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIDerivedType_O:
{
     // stamp value 72
    llvmo::DIDerivedType_O* obj_gc_safe = reinterpret_cast<llvmo::DIDerivedType_O*>(client);
    GC<llvmo::DIDerivedType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBasicType_O:
{
     // stamp value 73
    llvmo::DIBasicType_O* obj_gc_safe = reinterpret_cast<llvmo::DIBasicType_O*>(client);
    GC<llvmo::DIBasicType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubroutineType_O:
{
     // stamp value 74
    llvmo::DISubroutineType_O* obj_gc_safe = reinterpret_cast<llvmo::DISubroutineType_O*>(client);
    GC<llvmo::DISubroutineType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Value_O:
{
     // stamp value 75
    llvmo::Value_O* obj_gc_safe = reinterpret_cast<llvmo::Value_O*>(client);
    GC<llvmo::Value_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__User_O:
{
     // stamp value 76
    llvmo::User_O* obj_gc_safe = reinterpret_cast<llvmo::User_O*>(client);
    GC<llvmo::User_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Instruction_O:
{
     // stamp value 77
    llvmo::Instruction_O* obj_gc_safe = reinterpret_cast<llvmo::Instruction_O*>(client);
    GC<llvmo::Instruction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__UnaryInstruction_O:
{
     // stamp value 78
    llvmo::UnaryInstruction_O* obj_gc_safe = reinterpret_cast<llvmo::UnaryInstruction_O*>(client);
    GC<llvmo::UnaryInstruction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__VAArgInst_O:
{
     // stamp value 79
    llvmo::VAArgInst_O* obj_gc_safe = reinterpret_cast<llvmo::VAArgInst_O*>(client);
    GC<llvmo::VAArgInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LoadInst_O:
{
     // stamp value 80
    llvmo::LoadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LoadInst_O*>(client);
    GC<llvmo::LoadInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AllocaInst_O:
{
     // stamp value 81
    llvmo::AllocaInst_O* obj_gc_safe = reinterpret_cast<llvmo::AllocaInst_O*>(client);
    GC<llvmo::AllocaInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__CallInst_O:
{
     // stamp value 82
    llvmo::CallInst_O* obj_gc_safe = reinterpret_cast<llvmo::CallInst_O*>(client);
    GC<llvmo::CallInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicRMWInst_O:
{
     // stamp value 83
    llvmo::AtomicRMWInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicRMWInst_O*>(client);
    GC<llvmo::AtomicRMWInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TerminatorInst_O:
{
     // stamp value 84
    llvmo::TerminatorInst_O* obj_gc_safe = reinterpret_cast<llvmo::TerminatorInst_O*>(client);
    GC<llvmo::TerminatorInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__SwitchInst_O:
{
     // stamp value 85
    llvmo::SwitchInst_O* obj_gc_safe = reinterpret_cast<llvmo::SwitchInst_O*>(client);
    GC<llvmo::SwitchInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__InvokeInst_O:
{
     // stamp value 86
    llvmo::InvokeInst_O* obj_gc_safe = reinterpret_cast<llvmo::InvokeInst_O*>(client);
    GC<llvmo::InvokeInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__UnreachableInst_O:
{
     // stamp value 87
    llvmo::UnreachableInst_O* obj_gc_safe = reinterpret_cast<llvmo::UnreachableInst_O*>(client);
    GC<llvmo::UnreachableInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ReturnInst_O:
{
     // stamp value 88
    llvmo::ReturnInst_O* obj_gc_safe = reinterpret_cast<llvmo::ReturnInst_O*>(client);
    GC<llvmo::ReturnInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__IndirectBrInst_O:
{
     // stamp value 89
    llvmo::IndirectBrInst_O* obj_gc_safe = reinterpret_cast<llvmo::IndirectBrInst_O*>(client);
    GC<llvmo::IndirectBrInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ResumeInst_O:
{
     // stamp value 90
    llvmo::ResumeInst_O* obj_gc_safe = reinterpret_cast<llvmo::ResumeInst_O*>(client);
    GC<llvmo::ResumeInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__BranchInst_O:
{
     // stamp value 91
    llvmo::BranchInst_O* obj_gc_safe = reinterpret_cast<llvmo::BranchInst_O*>(client);
    GC<llvmo::BranchInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LandingPadInst_O:
{
     // stamp value 92
    llvmo::LandingPadInst_O* obj_gc_safe = reinterpret_cast<llvmo::LandingPadInst_O*>(client);
    GC<llvmo::LandingPadInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicCmpXchgInst_O:
{
     // stamp value 93
    llvmo::AtomicCmpXchgInst_O* obj_gc_safe = reinterpret_cast<llvmo::AtomicCmpXchgInst_O*>(client);
    GC<llvmo::AtomicCmpXchgInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__FenceInst_O:
{
     // stamp value 94
    llvmo::FenceInst_O* obj_gc_safe = reinterpret_cast<llvmo::FenceInst_O*>(client);
    GC<llvmo::FenceInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__StoreInst_O:
{
     // stamp value 95
    llvmo::StoreInst_O* obj_gc_safe = reinterpret_cast<llvmo::StoreInst_O*>(client);
    GC<llvmo::StoreInst_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__PHINode_O:
{
     // stamp value 96
    llvmo::PHINode_O* obj_gc_safe = reinterpret_cast<llvmo::PHINode_O*>(client);
    GC<llvmo::PHINode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Constant_O:
{
     // stamp value 97
    llvmo::Constant_O* obj_gc_safe = reinterpret_cast<llvmo::Constant_O*>(client);
    GC<llvmo::Constant_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalValue_O:
{
     // stamp value 98
    llvmo::GlobalValue_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalValue_O*>(client);
    GC<llvmo::GlobalValue_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalVariable_O:
{
     // stamp value 99
    llvmo::GlobalVariable_O* obj_gc_safe = reinterpret_cast<llvmo::GlobalVariable_O*>(client);
    GC<llvmo::GlobalVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Function_O:
{
     // stamp value 100
    llvmo::Function_O* obj_gc_safe = reinterpret_cast<llvmo::Function_O*>(client);
    GC<llvmo::Function_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantFP_O:
{
     // stamp value 101
    llvmo::ConstantFP_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantFP_O*>(client);
    GC<llvmo::ConstantFP_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__BlockAddress_O:
{
     // stamp value 102
    llvmo::BlockAddress_O* obj_gc_safe = reinterpret_cast<llvmo::BlockAddress_O*>(client);
    GC<llvmo::BlockAddress_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantExpr_O:
{
     // stamp value 103
    llvmo::ConstantExpr_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantExpr_O*>(client);
    GC<llvmo::ConstantExpr_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantPointerNull_O:
{
     // stamp value 104
    llvmo::ConstantPointerNull_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantPointerNull_O*>(client);
    GC<llvmo::ConstantPointerNull_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataSequential_O:
{
     // stamp value 105
    llvmo::ConstantDataSequential_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataSequential_O*>(client);
    GC<llvmo::ConstantDataSequential_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataArray_O:
{
     // stamp value 106
    llvmo::ConstantDataArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantDataArray_O*>(client);
    GC<llvmo::ConstantDataArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__UndefValue_O:
{
     // stamp value 107
    llvmo::UndefValue_O* obj_gc_safe = reinterpret_cast<llvmo::UndefValue_O*>(client);
    GC<llvmo::UndefValue_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantArray_O:
{
     // stamp value 108
    llvmo::ConstantArray_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantArray_O*>(client);
    GC<llvmo::ConstantArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantStruct_O:
{
     // stamp value 109
    llvmo::ConstantStruct_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantStruct_O*>(client);
    GC<llvmo::ConstantStruct_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantInt_O:
{
     // stamp value 110
    llvmo::ConstantInt_O* obj_gc_safe = reinterpret_cast<llvmo::ConstantInt_O*>(client);
    GC<llvmo::ConstantInt_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__Argument_O:
{
     // stamp value 111
    llvmo::Argument_O* obj_gc_safe = reinterpret_cast<llvmo::Argument_O*>(client);
    GC<llvmo::Argument_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__BasicBlock_O:
{
     // stamp value 112
    llvmo::BasicBlock_O* obj_gc_safe = reinterpret_cast<llvmo::BasicBlock_O*>(client);
    GC<llvmo::BasicBlock_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetMachine_O:
{
     // stamp value 113
    llvmo::TargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::TargetMachine_O*>(client);
    GC<llvmo::TargetMachine_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMTargetMachine_O:
{
     // stamp value 114
    llvmo::LLVMTargetMachine_O* obj_gc_safe = reinterpret_cast<llvmo::LLVMTargetMachine_O*>(client);
    GC<llvmo::LLVMTargetMachine_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__NamedMDNode_O:
{
     // stamp value 115
    llvmo::NamedMDNode_O* obj_gc_safe = reinterpret_cast<llvmo::NamedMDNode_O*>(client);
    GC<llvmo::NamedMDNode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SmallMultimap_O:
{
     // stamp value 116
    core::SmallMultimap_O* obj_gc_safe = reinterpret_cast<core::SmallMultimap_O*>(client);
    GC<core::SmallMultimap_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LambdaListHandler_O:
{
     // stamp value 117
    core::LambdaListHandler_O* obj_gc_safe = reinterpret_cast<core::LambdaListHandler_O*>(client);
    GC<core::LambdaListHandler_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Sigset_O:
{
     // stamp value 118
    core::Sigset_O* obj_gc_safe = reinterpret_cast<core::Sigset_O*>(client);
    GC<core::Sigset_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__AttributeSet_O:
{
     // stamp value 119
    llvmo::AttributeSet_O* obj_gc_safe = reinterpret_cast<llvmo::AttributeSet_O*>(client);
    GC<llvmo::AttributeSet_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Environment_O:
{
     // stamp value 120
    core::Environment_O* obj_gc_safe = reinterpret_cast<core::Environment_O*>(client);
    GC<core::Environment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__GlueEnvironment_O:
{
     // stamp value 121
    core::GlueEnvironment_O* obj_gc_safe = reinterpret_cast<core::GlueEnvironment_O*>(client);
    GC<core::GlueEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LexicalEnvironment_O:
{
     // stamp value 122
    core::LexicalEnvironment_O* obj_gc_safe = reinterpret_cast<core::LexicalEnvironment_O*>(client);
    GC<core::LexicalEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__RuntimeVisibleEnvironment_O:
{
     // stamp value 123
    core::RuntimeVisibleEnvironment_O* obj_gc_safe = reinterpret_cast<core::RuntimeVisibleEnvironment_O*>(client);
    GC<core::RuntimeVisibleEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BlockEnvironment_O:
{
     // stamp value 124
    core::BlockEnvironment_O* obj_gc_safe = reinterpret_cast<core::BlockEnvironment_O*>(client);
    GC<core::BlockEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FunctionValueEnvironment_O:
{
     // stamp value 125
    core::FunctionValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionValueEnvironment_O*>(client);
    GC<core::FunctionValueEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ValueEnvironment_O:
{
     // stamp value 126
    core::ValueEnvironment_O* obj_gc_safe = reinterpret_cast<core::ValueEnvironment_O*>(client);
    GC<core::ValueEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__TagbodyEnvironment_O:
{
     // stamp value 127
    core::TagbodyEnvironment_O* obj_gc_safe = reinterpret_cast<core::TagbodyEnvironment_O*>(client);
    GC<core::TagbodyEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CompileTimeEnvironment_O:
{
     // stamp value 128
    core::CompileTimeEnvironment_O* obj_gc_safe = reinterpret_cast<core::CompileTimeEnvironment_O*>(client);
    GC<core::CompileTimeEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CatchEnvironment_O:
{
     // stamp value 129
    core::CatchEnvironment_O* obj_gc_safe = reinterpret_cast<core::CatchEnvironment_O*>(client);
    GC<core::CatchEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__MacroletEnvironment_O:
{
     // stamp value 130
    core::MacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::MacroletEnvironment_O*>(client);
    GC<core::MacroletEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SymbolMacroletEnvironment_O:
{
     // stamp value 131
    core::SymbolMacroletEnvironment_O* obj_gc_safe = reinterpret_cast<core::SymbolMacroletEnvironment_O*>(client);
    GC<core::SymbolMacroletEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__UnwindProtectEnvironment_O:
{
     // stamp value 132
    core::UnwindProtectEnvironment_O* obj_gc_safe = reinterpret_cast<core::UnwindProtectEnvironment_O*>(client);
    GC<core::UnwindProtectEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FunctionContainerEnvironment_O:
{
     // stamp value 133
    core::FunctionContainerEnvironment_O* obj_gc_safe = reinterpret_cast<core::FunctionContainerEnvironment_O*>(client);
    GC<core::FunctionContainerEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ActivationFrame_O:
{
     // stamp value 134
    core::ActivationFrame_O* obj_gc_safe = reinterpret_cast<core::ActivationFrame_O*>(client);
    GC<core::ActivationFrame_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ValueFrame_O:
{
     // stamp value 135
    core::ValueFrame_O* obj_gc_safe = reinterpret_cast<core::ValueFrame_O*>(client);
    GC<core::ValueFrame_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FunctionFrame_O:
{
     // stamp value 136
    core::FunctionFrame_O* obj_gc_safe = reinterpret_cast<core::FunctionFrame_O*>(client);
    GC<core::FunctionFrame_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__RandomState_O:
{
     // stamp value 137
    core::RandomState_O* obj_gc_safe = reinterpret_cast<core::RandomState_O*>(client);
    GC<core::RandomState_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Function_O:
{
     // stamp value 138
    core::Function_O* obj_gc_safe = reinterpret_cast<core::Function_O*>(client);
    GC<core::Function_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Closure_O:
{
     // stamp value 139
    core::Closure_O* obj_gc_safe = reinterpret_cast<core::Closure_O*>(client);
    GC<core::Closure_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__ClosureWithSlots_O:
{
     // stamp value 140
    core::ClosureWithSlots_O* obj_gc_safe = reinterpret_cast<core::ClosureWithSlots_O*>(client);
    GC<core::ClosureWithSlots_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethodFunction_O:
{
     // stamp value 141
    core::SingleDispatchMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethodFunction_O*>(client);
    GC<core::SingleDispatchMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CxxMethodFunction_O:
{
     // stamp value 142
    core::CxxMethodFunction_O* obj_gc_safe = reinterpret_cast<core::CxxMethodFunction_O*>(client);
    GC<core::CxxMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BuiltinClosure_O:
{
     // stamp value 143
    core::BuiltinClosure_O* obj_gc_safe = reinterpret_cast<core::BuiltinClosure_O*>(client);
    GC<core::BuiltinClosure_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__TranslationFunctor_O:
{
     // stamp value 144
    core::TranslationFunctor_O* obj_gc_safe = reinterpret_cast<core::TranslationFunctor_O*>(client);
    GC<core::TranslationFunctor_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchGenericFunctionClosure_O:
{
     // stamp value 145
    core::SingleDispatchGenericFunctionClosure_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchGenericFunctionClosure_O*>(client);
    GC<core::SingleDispatchGenericFunctionClosure_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchEffectiveMethodFunction_O:
{
     // stamp value 146
    core::SingleDispatchEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchEffectiveMethodFunction_O*>(client);
    GC<core::SingleDispatchEffectiveMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O:
{
     // stamp value 147
    core::SingleDispatchCxxEffectiveMethodFunction_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchCxxEffectiveMethodFunction_O*>(client);
    GC<core::SingleDispatchCxxEffectiveMethodFunction_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstance_O:
{
     // stamp value 148
    core::FuncallableInstance_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstance_O*>(client);
    GC<core::FuncallableInstance_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Creator_O:
{
     // stamp value 149
    core::Creator_O* obj_gc_safe = reinterpret_cast<core::Creator_O*>(client);
    GC<core::Creator_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_core__ClassRepCreator_O:
{
     // stamp value 150
    core::ClassRepCreator_O* obj_gc_safe = reinterpret_cast<core::ClassRepCreator_O*>(client);
    GC<core::ClassRepCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxClassCreator_O:
{
     // stamp value 151
    core::DerivableCxxClassCreator_O* obj_gc_safe = reinterpret_cast<core::DerivableCxxClassCreator_O*>(client);
    GC<core::DerivableCxxClassCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstanceCreator_O:
{
     // stamp value 152
    core::FuncallableInstanceCreator_O* obj_gc_safe = reinterpret_cast<core::FuncallableInstanceCreator_O*>(client);
    GC<core::FuncallableInstanceCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clbind__ConstructorCreator_O:
{
     // stamp value 153
    clbind::ConstructorCreator_O* obj_gc_safe = reinterpret_cast<clbind::ConstructorCreator_O*>(client);
    GC<clbind::ConstructorCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
}
obj_deallocate_unmanaged_instance_STAMP_clbind__DummyCreator_O:
{
     // stamp value 154
    clbind::DummyCreator_O* obj_gc_safe = reinterpret_cast<clbind::DummyCreator_O*>(client);
    GC<clbind::DummyCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__InstanceCreator_O:
{
     // stamp value 155
    core::InstanceCreator_O* obj_gc_safe = reinterpret_cast<core::InstanceCreator_O*>(client);
    GC<core::InstanceCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StandardClassCreator_O:
{
     // stamp value 156
    core::StandardClassCreator_O* obj_gc_safe = reinterpret_cast<core::StandardClassCreator_O*>(client);
    GC<core::StandardClassCreator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SpecialForm_O:
{
     // stamp value 157
    core::SpecialForm_O* obj_gc_safe = reinterpret_cast<core::SpecialForm_O*>(client);
    GC<core::SpecialForm_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SequenceStepper_O:
{
     // stamp value 158
    core::SequenceStepper_O* obj_gc_safe = reinterpret_cast<core::SequenceStepper_O*>(client);
    GC<core::SequenceStepper_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__VectorStepper_O:
{
     // stamp value 159
    core::VectorStepper_O* obj_gc_safe = reinterpret_cast<core::VectorStepper_O*>(client);
    GC<core::VectorStepper_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ConsStepper_O:
{
     // stamp value 160
    core::ConsStepper_O* obj_gc_safe = reinterpret_cast<core::ConsStepper_O*>(client);
    GC<core::ConsStepper_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__WeakPointer_O:
{
     // stamp value 161
    core::WeakPointer_O* obj_gc_safe = reinterpret_cast<core::WeakPointer_O*>(client);
    GC<core::WeakPointer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DebugLoc_O:
{
     // stamp value 162
    llvmo::DebugLoc_O* obj_gc_safe = reinterpret_cast<llvmo::DebugLoc_O*>(client);
    GC<llvmo::DebugLoc_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SNode_O:
{
     // stamp value 163
    core::SNode_O* obj_gc_safe = reinterpret_cast<core::SNode_O*>(client);
    GC<core::SNode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BranchSNode_O:
{
     // stamp value 164
    core::BranchSNode_O* obj_gc_safe = reinterpret_cast<core::BranchSNode_O*>(client);
    GC<core::BranchSNode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LeafSNode_O:
{
     // stamp value 165
    core::LeafSNode_O* obj_gc_safe = reinterpret_cast<core::LeafSNode_O*>(client);
    GC<core::LeafSNode_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ModuleHandle_O:
{
     // stamp value 166
    llvmo::ModuleHandle_O* obj_gc_safe = reinterpret_cast<llvmo::ModuleHandle_O*>(client);
    GC<llvmo::ModuleHandle_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Pointer_O:
{
     // stamp value 167
    core::Pointer_O* obj_gc_safe = reinterpret_cast<core::Pointer_O*>(client);
    GC<core::Pointer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignData_O:
{
     // stamp value 168
    clasp_ffi::ForeignData_O* obj_gc_safe = reinterpret_cast<clasp_ffi::ForeignData_O*>(client);
    GC<clasp_ffi::ForeignData_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CxxObject_O:
{
     // stamp value 169
    core::CxxObject_O* obj_gc_safe = reinterpret_cast<core::CxxObject_O*>(client);
    GC<core::CxxObject_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DINodeArray_O:
{
     // stamp value 170
    llvmo::DINodeArray_O* obj_gc_safe = reinterpret_cast<llvmo::DINodeArray_O*>(client);
    GC<llvmo::DINodeArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_float_O:
{
     // stamp value 171
    core::NativeVector_float_O* obj_gc_safe = reinterpret_cast<core::NativeVector_float_O*>(client);
    GC<core::NativeVector_float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Info_O:
{
     // stamp value 172
    clcenv::Info_O* obj_gc_safe = reinterpret_cast<clcenv::Info_O*>(client);
    GC<clcenv::Info_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__OptimizeInfo_O:
{
     // stamp value 173
    clcenv::OptimizeInfo_O* obj_gc_safe = reinterpret_cast<clcenv::OptimizeInfo_O*>(client);
    GC<clcenv::OptimizeInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__BlockInfo_O:
{
     // stamp value 174
    clcenv::BlockInfo_O* obj_gc_safe = reinterpret_cast<clcenv::BlockInfo_O*>(client);
    GC<clcenv::BlockInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionInfo_O:
{
     // stamp value 175
    clcenv::FunctionInfo_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionInfo_O*>(client);
    GC<clcenv::FunctionInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__GlobalMacroInfo_O:
{
     // stamp value 176
    clcenv::GlobalMacroInfo_O* obj_gc_safe = reinterpret_cast<clcenv::GlobalMacroInfo_O*>(client);
    GC<clcenv::GlobalMacroInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__LocalMacroInfo_O:
{
     // stamp value 177
    clcenv::LocalMacroInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LocalMacroInfo_O*>(client);
    GC<clcenv::LocalMacroInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__LocalFunctionInfo_O:
{
     // stamp value 178
    clcenv::LocalFunctionInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LocalFunctionInfo_O*>(client);
    GC<clcenv::LocalFunctionInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__SpecialOperatorInfo_O:
{
     // stamp value 179
    clcenv::SpecialOperatorInfo_O* obj_gc_safe = reinterpret_cast<clcenv::SpecialOperatorInfo_O*>(client);
    GC<clcenv::SpecialOperatorInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__LambdaNameInfo_O:
{
     // stamp value 180
    clcenv::LambdaNameInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LambdaNameInfo_O*>(client);
    GC<clcenv::LambdaNameInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__GlobalFunctionInfo_O:
{
     // stamp value 181
    clcenv::GlobalFunctionInfo_O* obj_gc_safe = reinterpret_cast<clcenv::GlobalFunctionInfo_O*>(client);
    GC<clcenv::GlobalFunctionInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableInfo_O:
{
     // stamp value 182
    clcenv::VariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::VariableInfo_O*>(client);
    GC<clcenv::VariableInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__SpecialVariableInfo_O:
{
     // stamp value 183
    clcenv::SpecialVariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::SpecialVariableInfo_O*>(client);
    GC<clcenv::SpecialVariableInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__LexicalVariableInfo_O:
{
     // stamp value 184
    clcenv::LexicalVariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::LexicalVariableInfo_O*>(client);
    GC<clcenv::LexicalVariableInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__SymbolMacroInfo_O:
{
     // stamp value 185
    clcenv::SymbolMacroInfo_O* obj_gc_safe = reinterpret_cast<clcenv::SymbolMacroInfo_O*>(client);
    GC<clcenv::SymbolMacroInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__ConstantVariableInfo_O:
{
     // stamp value 186
    clcenv::ConstantVariableInfo_O* obj_gc_safe = reinterpret_cast<clcenv::ConstantVariableInfo_O*>(client);
    GC<clcenv::ConstantVariableInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__ConditionVariable_O:
{
     // stamp value 187
    mp::ConditionVariable_O* obj_gc_safe = reinterpret_cast<mp::ConditionVariable_O*>(client);
    GC<mp::ConditionVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__Mutex_O:
{
     // stamp value 188
    mp::Mutex_O* obj_gc_safe = reinterpret_cast<mp::Mutex_O*>(client);
    GC<mp::Mutex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__RecursiveMutex_O:
{
     // stamp value 189
    mp::RecursiveMutex_O* obj_gc_safe = reinterpret_cast<mp::RecursiveMutex_O*>(client);
    GC<mp::RecursiveMutex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DITypeRefArray_O:
{
     // stamp value 190
    llvmo::DITypeRefArray_O* obj_gc_safe = reinterpret_cast<llvmo::DITypeRefArray_O*>(client);
    GC<llvmo::DITypeRefArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_double_O:
{
     // stamp value 191
    core::NativeVector_double_O* obj_gc_safe = reinterpret_cast<core::NativeVector_double_O*>(client);
    GC<core::NativeVector_double_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_int_O:
{
     // stamp value 192
    core::NativeVector_int_O* obj_gc_safe = reinterpret_cast<core::NativeVector_int_O*>(client);
    GC<core::NativeVector_int_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__SharedMutex_O:
{
     // stamp value 193
    mp::SharedMutex_O* obj_gc_safe = reinterpret_cast<mp::SharedMutex_O*>(client);
    GC<mp::SharedMutex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Entry_O:
{
     // stamp value 194
    clcenv::Entry_O* obj_gc_safe = reinterpret_cast<clcenv::Entry_O*>(client);
    GC<clcenv::Entry_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableType_O:
{
     // stamp value 195
    clcenv::VariableType_O* obj_gc_safe = reinterpret_cast<clcenv::VariableType_O*>(client);
    GC<clcenv::VariableType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableIgnore_O:
{
     // stamp value 196
    clcenv::VariableIgnore_O* obj_gc_safe = reinterpret_cast<clcenv::VariableIgnore_O*>(client);
    GC<clcenv::VariableIgnore_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Function_O:
{
     // stamp value 197
    clcenv::Function_O* obj_gc_safe = reinterpret_cast<clcenv::Function_O*>(client);
    GC<clcenv::Function_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__SymbolMacro_O:
{
     // stamp value 198
    clcenv::SymbolMacro_O* obj_gc_safe = reinterpret_cast<clcenv::SymbolMacro_O*>(client);
    GC<clcenv::SymbolMacro_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionDynamicExtent_O:
{
     // stamp value 199
    clcenv::FunctionDynamicExtent_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionDynamicExtent_O*>(client);
    GC<clcenv::FunctionDynamicExtent_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Inline_O:
{
     // stamp value 200
    clcenv::Inline_O* obj_gc_safe = reinterpret_cast<clcenv::Inline_O*>(client);
    GC<clcenv::Inline_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Closure_O:
{
     // stamp value 201
    clcenv::Closure_O* obj_gc_safe = reinterpret_cast<clcenv::Closure_O*>(client);
    GC<clcenv::Closure_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Optimize_O:
{
     // stamp value 202
    clcenv::Optimize_O* obj_gc_safe = reinterpret_cast<clcenv::Optimize_O*>(client);
    GC<clcenv::Optimize_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__LambdaName_O:
{
     // stamp value 203
    clcenv::LambdaName_O* obj_gc_safe = reinterpret_cast<clcenv::LambdaName_O*>(client);
    GC<clcenv::LambdaName_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Tag_O:
{
     // stamp value 204
    clcenv::Tag_O* obj_gc_safe = reinterpret_cast<clcenv::Tag_O*>(client);
    GC<clcenv::Tag_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Block_O:
{
     // stamp value 205
    clcenv::Block_O* obj_gc_safe = reinterpret_cast<clcenv::Block_O*>(client);
    GC<clcenv::Block_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionType_O:
{
     // stamp value 206
    clcenv::FunctionType_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionType_O*>(client);
    GC<clcenv::FunctionType_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__GlobalEnvironment_O:
{
     // stamp value 207
    clcenv::GlobalEnvironment_O* obj_gc_safe = reinterpret_cast<clcenv::GlobalEnvironment_O*>(client);
    GC<clcenv::GlobalEnvironment_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableDynamicExtent_O:
{
     // stamp value 208
    clcenv::VariableDynamicExtent_O* obj_gc_safe = reinterpret_cast<clcenv::VariableDynamicExtent_O*>(client);
    GC<clcenv::VariableDynamicExtent_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__LexicalVariable_O:
{
     // stamp value 209
    clcenv::LexicalVariable_O* obj_gc_safe = reinterpret_cast<clcenv::LexicalVariable_O*>(client);
    GC<clcenv::LexicalVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__SpecialVariable_O:
{
     // stamp value 210
    clcenv::SpecialVariable_O* obj_gc_safe = reinterpret_cast<clcenv::SpecialVariable_O*>(client);
    GC<clcenv::SpecialVariable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__Macro_O:
{
     // stamp value 211
    clcenv::Macro_O* obj_gc_safe = reinterpret_cast<clcenv::Macro_O*>(client);
    GC<clcenv::Macro_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionIgnore_O:
{
     // stamp value 212
    clcenv::FunctionIgnore_O* obj_gc_safe = reinterpret_cast<clcenv::FunctionIgnore_O*>(client);
    GC<clcenv::FunctionIgnore_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__Process_O:
{
     // stamp value 213
    mp::Process_O* obj_gc_safe = reinterpret_cast<mp::Process_O*>(client);
    GC<mp::Process_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethod_O:
{
     // stamp value 214
    core::SingleDispatchMethod_O* obj_gc_safe = reinterpret_cast<core::SingleDispatchMethod_O*>(client);
    GC<core::SingleDispatchMethod_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Iterator_O:
{
     // stamp value 215
    core::Iterator_O* obj_gc_safe = reinterpret_cast<core::Iterator_O*>(client);
    GC<core::Iterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__RecursiveDirectoryIterator_O:
{
     // stamp value 216
    core::RecursiveDirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::RecursiveDirectoryIterator_O*>(client);
    GC<core::RecursiveDirectoryIterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DirectoryIterator_O:
{
     // stamp value 217
    core::DirectoryIterator_O* obj_gc_safe = reinterpret_cast<core::DirectoryIterator_O*>(client);
    GC<core::DirectoryIterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__InsertPoint_O:
{
     // stamp value 218
    llvmo::InsertPoint_O* obj_gc_safe = reinterpret_cast<llvmo::InsertPoint_O*>(client);
    GC<llvmo::InsertPoint_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Array_O:
{
     // stamp value 219
    core::Array_O* obj_gc_safe = reinterpret_cast<core::Array_O*>(client);
    GC<core::Array_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__AbstractSimpleVector_O:
{
     // stamp value 220
    core::AbstractSimpleVector_O* obj_gc_safe = reinterpret_cast<core::AbstractSimpleVector_O*>(client);
    GC<core::AbstractSimpleVector_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVectorFloat_O_float_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 221
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVectorFloat_O,float,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVectorFloat_O:
{
     // stamp value 222
    core::SimpleVectorFloat_O* obj_gc_safe = reinterpret_cast<core::SimpleVectorFloat_O*>(client);
    GC<core::SimpleVectorFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 223
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte64_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte64_t_O:
{
     // stamp value 224
    core::SimpleVector_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte64_t_O*>(client);
    GC<core::SimpleVector_byte64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 225
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int64_t_O,long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int64_t_O:
{
     // stamp value 226
    core::SimpleVector_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int64_t_O*>(client);
    GC<core::SimpleVector_int64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleString_O:
{
     // stamp value 227
    core::SimpleString_O* obj_gc_safe = reinterpret_cast<core::SimpleString_O*>(client);
    GC<core::SimpleString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_:
{
     // do nothing stamp value 228
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleCharacterString_O,int,core::SimpleString_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleCharacterString_O:
{
     // stamp value 229
    core::SimpleCharacterString_O* obj_gc_safe = reinterpret_cast<core::SimpleCharacterString_O*>(client);
    GC<core::SimpleCharacterString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_:
{
     // do nothing stamp value 230
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleBaseString_O,unsigned char,core::SimpleString_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleBaseString_O:
{
     // stamp value 231
    core::SimpleBaseString_O* obj_gc_safe = reinterpret_cast<core::SimpleBaseString_O*>(client);
    GC<core::SimpleBaseString_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 232
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int16_t_O,short,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int16_t_O:
{
     // stamp value 233
    core::SimpleVector_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int16_t_O*>(client);
    GC<core::SimpleVector_int16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 234
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte16_t_O,unsigned short,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte16_t_O:
{
     // stamp value 235
    core::SimpleVector_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte16_t_O*>(client);
    GC<core::SimpleVector_byte16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 236
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_fixnum_O,long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_fixnum_O:
{
     // stamp value 237
    core::SimpleVector_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_fixnum_O*>(client);
    GC<core::SimpleVector_fixnum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 238
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int8_t_O,signed char,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int8_t_O:
{
     // stamp value 239
    core::SimpleVector_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int8_t_O*>(client);
    GC<core::SimpleVector_int8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 240
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_O,gctools::smart_ptr<core::T_O>,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_O:
{
     // stamp value 241
    core::SimpleVector_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_O*>(client);
    GC<core::SimpleVector_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 242
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte8_t_O,unsigned char,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte8_t_O:
{
     // stamp value 243
    core::SimpleVector_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte8_t_O*>(client);
    GC<core::SimpleVector_byte8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 244
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_int32_t_O,int,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int32_t_O:
{
     // stamp value 245
    core::SimpleVector_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_int32_t_O*>(client);
    GC<core::SimpleVector_int32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleBitVector_O:
{
     // stamp value 246
    core::SimpleBitVector_O* obj_gc_safe = reinterpret_cast<core::SimpleBitVector_O*>(client);
    GC<core::SimpleBitVector_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 247
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_byte32_t_O,unsigned int,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte32_t_O:
{
     // stamp value 248
    core::SimpleVector_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_byte32_t_O*>(client);
    GC<core::SimpleVector_byte32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 249
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVector_size_t_O,unsigned long,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_size_t_O:
{
     // stamp value 250
    core::SimpleVector_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleVector_size_t_O*>(client);
    GC<core::SimpleVector_size_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVectorDouble_O_double_core__AbstractSimpleVector_O_:
{
     // do nothing stamp value 251
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleVector<core::SimpleVectorDouble_O,double,core::AbstractSimpleVector_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleVectorDouble_O:
{
     // stamp value 252
    core::SimpleVectorDouble_O* obj_gc_safe = reinterpret_cast<core::SimpleVectorDouble_O*>(client);
    GC<core::SimpleVectorDouble_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_O:
{
     // stamp value 253
    core::MDArray_O* obj_gc_safe = reinterpret_cast<core::MDArray_O*>(client);
    GC<core::MDArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BitVectorNs_O:
{
     // stamp value 254
    core::BitVectorNs_O* obj_gc_safe = reinterpret_cast<core::BitVectorNs_O*>(client);
    GC<core::BitVectorNs_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 255
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte64_t_O,core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte64_t_O:
{
     // stamp value 256
    core::MDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte64_t_O*>(client);
    GC<core::MDArray_byte64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 257
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int16_t_O,core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int16_t_O:
{
     // stamp value 258
    core::MDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int16_t_O*>(client);
    GC<core::MDArray_int16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 259
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int8_t_O,core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int8_t_O:
{
     // stamp value 260
    core::MDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int8_t_O*>(client);
    GC<core::MDArray_int8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_:
{
     // do nothing stamp value 261
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayCharacter_O,core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayCharacter_O:
{
     // stamp value 262
    core::MDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::MDArrayCharacter_O*>(client);
    GC<core::MDArrayCharacter_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 263
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int32_t_O,core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int32_t_O:
{
     // stamp value 264
    core::MDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int32_t_O*>(client);
    GC<core::MDArray_int32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayFloat_O_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__MDArray_O_:
{
     // do nothing stamp value 265
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayFloat_O,core::SimpleMDArrayFloat_O,core::SimpleVectorFloat_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayFloat_O:
{
     // stamp value 266
    core::MDArrayFloat_O* obj_gc_safe = reinterpret_cast<core::MDArrayFloat_O*>(client);
    GC<core::MDArrayFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StrNs_O:
{
     // stamp value 267
    core::StrNs_O* obj_gc_safe = reinterpret_cast<core::StrNs_O*>(client);
    GC<core::StrNs_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_:
{
     // do nothing stamp value 268
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::StrWNs_O,core::SimpleCharacterString_O,core::StrNs_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__StrWNs_O:
{
     // stamp value 269
    core::StrWNs_O* obj_gc_safe = reinterpret_cast<core::StrWNs_O*>(client);
    GC<core::StrWNs_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_:
{
     // do nothing stamp value 270
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Vector<core::Str8Ns_O,core::SimpleBaseString_O,core::StrNs_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__Str8Ns_O:
{
     // stamp value 271
    core::Str8Ns_O* obj_gc_safe = reinterpret_cast<core::Str8Ns_O*>(client);
    GC<core::Str8Ns_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayDouble_O_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__MDArray_O_:
{
     // do nothing stamp value 272
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayDouble_O,core::SimpleMDArrayDouble_O,core::SimpleVectorDouble_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayDouble_O:
{
     // stamp value 273
    core::MDArrayDouble_O* obj_gc_safe = reinterpret_cast<core::MDArrayDouble_O*>(client);
    GC<core::MDArrayDouble_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_:
{
     // do nothing stamp value 274
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayT_O,core::SimpleMDArrayT_O,core::SimpleVector_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayT_O:
{
     // stamp value 275
    core::MDArrayT_O* obj_gc_safe = reinterpret_cast<core::MDArrayT_O*>(client);
    GC<core::MDArrayT_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_:
{
     // do nothing stamp value 276
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_size_t_O,core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_size_t_O:
{
     // stamp value 277
    core::MDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_size_t_O*>(client);
    GC<core::MDArray_size_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_:
{
     // do nothing stamp value 278
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte8_t_O,core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte8_t_O:
{
     // stamp value 279
    core::MDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte8_t_O*>(client);
    GC<core::MDArray_byte8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBit_O:
{
     // stamp value 280
    core::MDArrayBit_O* obj_gc_safe = reinterpret_cast<core::MDArrayBit_O*>(client);
    GC<core::MDArrayBit_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_:
{
     // do nothing stamp value 281
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_int64_t_O,core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int64_t_O:
{
     // stamp value 282
    core::MDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_int64_t_O*>(client);
    GC<core::MDArray_int64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_:
{
     // do nothing stamp value 283
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte16_t_O,core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte16_t_O:
{
     // stamp value 284
    core::MDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte16_t_O*>(client);
    GC<core::MDArray_byte16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_:
{
     // do nothing stamp value 285
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_byte32_t_O,core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte32_t_O:
{
     // stamp value 286
    core::MDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::MDArray_byte32_t_O*>(client);
    GC<core::MDArray_byte32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_O:
{
     // stamp value 287
    core::SimpleMDArray_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_O*>(client);
    GC<core::SimpleMDArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 288
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int8_t_O,core::SimpleVector_int8_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int8_t_O:
{
     // stamp value 289
    core::SimpleMDArray_int8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int8_t_O*>(client);
    GC<core::SimpleMDArray_int8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 290
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayCharacter_O,core::SimpleCharacterString_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayCharacter_O:
{
     // stamp value 291
    core::SimpleMDArrayCharacter_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayCharacter_O*>(client);
    GC<core::SimpleMDArrayCharacter_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 292
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_fixnum_O:
{
     // stamp value 293
    core::SimpleMDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_fixnum_O*>(client);
    GC<core::SimpleMDArray_fixnum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 294
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte32_t_O,core::SimpleVector_byte32_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte32_t_O:
{
     // stamp value 295
    core::SimpleMDArray_byte32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte32_t_O*>(client);
    GC<core::SimpleMDArray_byte32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 296
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte16_t_O,core::SimpleVector_byte16_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte16_t_O:
{
     // stamp value 297
    core::SimpleMDArray_byte16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte16_t_O*>(client);
    GC<core::SimpleMDArray_byte16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 298
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayT_O,core::SimpleVector_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayT_O:
{
     // stamp value 299
    core::SimpleMDArrayT_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayT_O*>(client);
    GC<core::SimpleMDArrayT_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 300
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int32_t_O,core::SimpleVector_int32_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int32_t_O:
{
     // stamp value 301
    core::SimpleMDArray_int32_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int32_t_O*>(client);
    GC<core::SimpleMDArray_int32_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 302
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayDouble_O,core::SimpleVectorDouble_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayDouble_O:
{
     // stamp value 303
    core::SimpleMDArrayDouble_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayDouble_O*>(client);
    GC<core::SimpleMDArrayDouble_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 304
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBaseChar_O:
{
     // stamp value 305
    core::SimpleMDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBaseChar_O*>(client);
    GC<core::SimpleMDArrayBaseChar_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 306
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte64_t_O,core::SimpleVector_byte64_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte64_t_O:
{
     // stamp value 307
    core::SimpleMDArray_byte64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte64_t_O*>(client);
    GC<core::SimpleMDArray_byte64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBit_O:
{
     // stamp value 308
    core::SimpleMDArrayBit_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayBit_O*>(client);
    GC<core::SimpleMDArrayBit_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 309
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int16_t_O,core::SimpleVector_int16_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int16_t_O:
{
     // stamp value 310
    core::SimpleMDArray_int16_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int16_t_O*>(client);
    GC<core::SimpleMDArray_int16_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 311
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_byte8_t_O,core::SimpleVector_byte8_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte8_t_O:
{
     // stamp value 312
    core::SimpleMDArray_byte8_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_byte8_t_O*>(client);
    GC<core::SimpleMDArray_byte8_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 313
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_size_t_O,core::SimpleVector_size_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_size_t_O:
{
     // stamp value 314
    core::SimpleMDArray_size_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_size_t_O*>(client);
    GC<core::SimpleMDArray_size_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 315
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArray_int64_t_O,core::SimpleVector_int64_t_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int64_t_O:
{
     // stamp value 316
    core::SimpleMDArray_int64_t_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArray_int64_t_O*>(client);
    GC<core::SimpleMDArray_int64_t_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__SimpleMDArray_O_:
{
     // do nothing stamp value 317
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_SimpleArray<core::SimpleMDArrayFloat_O,core::SimpleVectorFloat_O,core::SimpleMDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayFloat_O:
{
     // stamp value 318
    core::SimpleMDArrayFloat_O* obj_gc_safe = reinterpret_cast<core::SimpleMDArrayFloat_O*>(client);
    GC<core::SimpleMDArrayFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_:
{
     // do nothing stamp value 319
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArray_fixnum_O,core::SimpleMDArray_fixnum_O,core::SimpleVector_fixnum_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArray_fixnum_O:
{
     // stamp value 320
    core::MDArray_fixnum_O* obj_gc_safe = reinterpret_cast<core::MDArray_fixnum_O*>(client);
    GC<core::MDArray_fixnum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_:
{
     // do nothing stamp value 321
    THROW_HARD_ERROR(BF("Should never deallocate object core::template_Array<core::MDArrayBaseChar_O,core::SimpleMDArrayBaseChar_O,core::SimpleBaseString_O,core::MDArray_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBaseChar_O:
{
     // stamp value 322
    core::MDArrayBaseChar_O* obj_gc_safe = reinterpret_cast<core::MDArrayBaseChar_O*>(client);
    GC<core::MDArrayBaseChar_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Symbol_O:
{
     // stamp value 323
    core::Symbol_O* obj_gc_safe = reinterpret_cast<core::Symbol_O*>(client);
    GC<core::Symbol_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Null_O:
{
     // stamp value 324
    core::Null_O* obj_gc_safe = reinterpret_cast<core::Null_O*>(client);
    GC<core::Null_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__BlockingConcurrentQueue_O:
{
     // stamp value 325
    mp::BlockingConcurrentQueue_O* obj_gc_safe = reinterpret_cast<mp::BlockingConcurrentQueue_O*>(client);
    GC<mp::BlockingConcurrentQueue_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Path_O:
{
     // stamp value 326
    core::Path_O* obj_gc_safe = reinterpret_cast<core::Path_O*>(client);
    GC<core::Path_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Character_dummy_O:
{
     // stamp value 327
    core::Character_dummy_O* obj_gc_safe = reinterpret_cast<core::Character_dummy_O*>(client);
    GC<core::Character_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SourceManager_O:
{
     // stamp value 328
    core::SourceManager_O* obj_gc_safe = reinterpret_cast<core::SourceManager_O*>(client);
    GC<core::SourceManager_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__DataLayout_O:
{
     // stamp value 329
    llvmo::DataLayout_O* obj_gc_safe = reinterpret_cast<llvmo::DataLayout_O*>(client);
    GC<llvmo::DataLayout_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Pathname_O:
{
     // stamp value 330
    core::Pathname_O* obj_gc_safe = reinterpret_cast<core::Pathname_O*>(client);
    GC<core::Pathname_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LogicalPathname_O:
{
     // stamp value 331
    core::LogicalPathname_O* obj_gc_safe = reinterpret_cast<core::LogicalPathname_O*>(client);
    GC<core::LogicalPathname_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Cache_O:
{
     // stamp value 332
    core::Cache_O* obj_gc_safe = reinterpret_cast<core::Cache_O*>(client);
    GC<core::Cache_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LoadTimeValues_O:
{
     // stamp value 333
    core::LoadTimeValues_O* obj_gc_safe = reinterpret_cast<core::LoadTimeValues_O*>(client);
    GC<core::LoadTimeValues_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SharpEqualWrapper_O:
{
     // stamp value 334
    core::SharpEqualWrapper_O* obj_gc_safe = reinterpret_cast<core::SharpEqualWrapper_O*>(client);
    GC<core::SharpEqualWrapper_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Number_O:
{
     // stamp value 335
    core::Number_O* obj_gc_safe = reinterpret_cast<core::Number_O*>(client);
    GC<core::Number_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Real_O:
{
     // stamp value 336
    core::Real_O* obj_gc_safe = reinterpret_cast<core::Real_O*>(client);
    GC<core::Real_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Rational_O:
{
     // stamp value 337
    core::Rational_O* obj_gc_safe = reinterpret_cast<core::Rational_O*>(client);
    GC<core::Rational_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Ratio_O:
{
     // stamp value 338
    core::Ratio_O* obj_gc_safe = reinterpret_cast<core::Ratio_O*>(client);
    GC<core::Ratio_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Integer_O:
{
     // stamp value 339
    core::Integer_O* obj_gc_safe = reinterpret_cast<core::Integer_O*>(client);
    GC<core::Integer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Bignum_O:
{
     // stamp value 340
    core::Bignum_O* obj_gc_safe = reinterpret_cast<core::Bignum_O*>(client);
    GC<core::Bignum_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Fixnum_dummy_O:
{
     // stamp value 341
    core::Fixnum_dummy_O* obj_gc_safe = reinterpret_cast<core::Fixnum_dummy_O*>(client);
    GC<core::Fixnum_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Float_O:
{
     // stamp value 342
    core::Float_O* obj_gc_safe = reinterpret_cast<core::Float_O*>(client);
    GC<core::Float_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DoubleFloat_O:
{
     // stamp value 343
    core::DoubleFloat_O* obj_gc_safe = reinterpret_cast<core::DoubleFloat_O*>(client);
    GC<core::DoubleFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SingleFloat_dummy_O:
{
     // stamp value 344
    core::SingleFloat_dummy_O* obj_gc_safe = reinterpret_cast<core::SingleFloat_dummy_O*>(client);
    GC<core::SingleFloat_dummy_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LongFloat_O:
{
     // stamp value 345
    core::LongFloat_O* obj_gc_safe = reinterpret_cast<core::LongFloat_O*>(client);
    GC<core::LongFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ShortFloat_O:
{
     // stamp value 346
    core::ShortFloat_O* obj_gc_safe = reinterpret_cast<core::ShortFloat_O*>(client);
    GC<core::ShortFloat_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Complex_O:
{
     // stamp value 347
    core::Complex_O* obj_gc_safe = reinterpret_cast<core::Complex_O*>(client);
    GC<core::Complex_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Stream_O:
{
     // stamp value 348
    core::Stream_O* obj_gc_safe = reinterpret_cast<core::Stream_O*>(client);
    GC<core::Stream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__AnsiStream_O:
{
     // stamp value 349
    core::AnsiStream_O* obj_gc_safe = reinterpret_cast<core::AnsiStream_O*>(client);
    GC<core::AnsiStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__TwoWayStream_O:
{
     // stamp value 350
    core::TwoWayStream_O* obj_gc_safe = reinterpret_cast<core::TwoWayStream_O*>(client);
    GC<core::TwoWayStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__BroadcastStream_O:
{
     // stamp value 351
    core::BroadcastStream_O* obj_gc_safe = reinterpret_cast<core::BroadcastStream_O*>(client);
    GC<core::BroadcastStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SynonymStream_O:
{
     // stamp value 352
    core::SynonymStream_O* obj_gc_safe = reinterpret_cast<core::SynonymStream_O*>(client);
    GC<core::SynonymStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__ConcatenatedStream_O:
{
     // stamp value 353
    core::ConcatenatedStream_O* obj_gc_safe = reinterpret_cast<core::ConcatenatedStream_O*>(client);
    GC<core::ConcatenatedStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StringStream_O:
{
     // stamp value 354
    core::StringStream_O* obj_gc_safe = reinterpret_cast<core::StringStream_O*>(client);
    GC<core::StringStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StringOutputStream_O:
{
     // stamp value 355
    core::StringOutputStream_O* obj_gc_safe = reinterpret_cast<core::StringOutputStream_O*>(client);
    GC<core::StringOutputStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__StringInputStream_O:
{
     // stamp value 356
    core::StringInputStream_O* obj_gc_safe = reinterpret_cast<core::StringInputStream_O*>(client);
    GC<core::StringInputStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FileStream_O:
{
     // stamp value 357
    core::FileStream_O* obj_gc_safe = reinterpret_cast<core::FileStream_O*>(client);
    GC<core::FileStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__IOFileStream_O:
{
     // stamp value 358
    core::IOFileStream_O* obj_gc_safe = reinterpret_cast<core::IOFileStream_O*>(client);
    GC<core::IOFileStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__IOStreamStream_O:
{
     // stamp value 359
    core::IOStreamStream_O* obj_gc_safe = reinterpret_cast<core::IOStreamStream_O*>(client);
    GC<core::IOStreamStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__EchoStream_O:
{
     // stamp value 360
    core::EchoStream_O* obj_gc_safe = reinterpret_cast<core::EchoStream_O*>(client);
    GC<core::EchoStream_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Package_O:
{
     // stamp value 361
    core::Package_O* obj_gc_safe = reinterpret_cast<core::Package_O*>(client);
    GC<core::Package_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_llvmo__ClaspJIT_O:
{
     // stamp value 362
    llvmo::ClaspJIT_O* obj_gc_safe = reinterpret_cast<llvmo::ClaspJIT_O*>(client);
    GC<llvmo::ClaspJIT_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__FileStatus_O:
{
     // stamp value 363
    core::FileStatus_O* obj_gc_safe = reinterpret_cast<core::FileStatus_O*>(client);
    GC<core::FileStatus_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__InvocationHistoryFrameIterator_O:
{
     // stamp value 364
    core::InvocationHistoryFrameIterator_O* obj_gc_safe = reinterpret_cast<core::InvocationHistoryFrameIterator_O*>(client);
    GC<core::InvocationHistoryFrameIterator_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__PosixTime_O:
{
     // stamp value 365
    core::PosixTime_O* obj_gc_safe = reinterpret_cast<core::PosixTime_O*>(client);
    GC<core::PosixTime_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTable_O:
{
     // stamp value 366
    core::HashTable_O* obj_gc_safe = reinterpret_cast<core::HashTable_O*>(client);
    GC<core::HashTable_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqual_O:
{
     // stamp value 367
    core::HashTableEqual_O* obj_gc_safe = reinterpret_cast<core::HashTableEqual_O*>(client);
    GC<core::HashTableEqual_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqualp_O:
{
     // stamp value 368
    core::HashTableEqualp_O* obj_gc_safe = reinterpret_cast<core::HashTableEqualp_O*>(client);
    GC<core::HashTableEqualp_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEq_O:
{
     // stamp value 369
    core::HashTableEq_O* obj_gc_safe = reinterpret_cast<core::HashTableEq_O*>(client);
    GC<core::HashTableEq_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__HashTableEql_O:
{
     // stamp value 370
    core::HashTableEql_O* obj_gc_safe = reinterpret_cast<core::HashTableEql_O*>(client);
    GC<core::HashTableEql_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Exposer_O:
{
     // stamp value 371
    core::Exposer_O* obj_gc_safe = reinterpret_cast<core::Exposer_O*>(client);
    GC<core::Exposer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__CoreExposer_O:
{
     // stamp value 372
    core::CoreExposer_O* obj_gc_safe = reinterpret_cast<core::CoreExposer_O*>(client);
    GC<core::CoreExposer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_asttooling__AsttoolingExposer_O:
{
     // stamp value 373
    asttooling::AsttoolingExposer_O* obj_gc_safe = reinterpret_cast<asttooling::AsttoolingExposer_O*>(client);
    GC<asttooling::AsttoolingExposer_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SourcePosInfo_O:
{
     // stamp value 374
    core::SourcePosInfo_O* obj_gc_safe = reinterpret_cast<core::SourcePosInfo_O*>(client);
    GC<core::SourcePosInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__IntArray_O:
{
     // stamp value 375
    core::IntArray_O* obj_gc_safe = reinterpret_cast<core::IntArray_O*>(client);
    GC<core::IntArray_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__SourceFileInfo_O:
{
     // stamp value 376
    core::SourceFileInfo_O* obj_gc_safe = reinterpret_cast<core::SourceFileInfo_O*>(client);
    GC<core::SourceFileInfo_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__DirectoryEntry_O:
{
     // stamp value 377
    core::DirectoryEntry_O* obj_gc_safe = reinterpret_cast<core::DirectoryEntry_O*>(client);
    GC<core::DirectoryEntry_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__LightUserData_O:
{
     // stamp value 378
    core::LightUserData_O* obj_gc_safe = reinterpret_cast<core::LightUserData_O*>(client);
    GC<core::LightUserData_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__UserData_O:
{
     // stamp value 379
    core::UserData_O* obj_gc_safe = reinterpret_cast<core::UserData_O*>(client);
    GC<core::UserData_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Record_O:
{
     // stamp value 380
    core::Record_O* obj_gc_safe = reinterpret_cast<core::Record_O*>(client);
    GC<core::Record_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRegistry_O:
{
     // stamp value 381
    clbind::ClassRegistry_O* obj_gc_safe = reinterpret_cast<clbind::ClassRegistry_O*>(client);
    GC<clbind::ClassRegistry_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_mp__ConcurrentQueue_O:
{
     // stamp value 382
    mp::ConcurrentQueue_O* obj_gc_safe = reinterpret_cast<mp::ConcurrentQueue_O*>(client);
    GC<mp::ConcurrentQueue_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_core__Cons_O:
{
     // stamp value 383
    core::Cons_O* obj_gc_safe = reinterpret_cast<core::Cons_O*>(client);
    GC<core::Cons_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clang__ast_matchers__MatchFinder__MatchCallback:
{
     // do nothing stamp value 384
    THROW_HARD_ERROR(BF("Should never deallocate object clang::ast_matchers::MatchFinder::MatchCallback"));
}
obj_deallocate_unmanaged_instance_STAMP_core__Lisp_O:
{
     // stamp value 385
    core::Lisp_O* obj_gc_safe = reinterpret_cast<core::Lisp_O*>(client);
    GC<core::Lisp_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_:
{
     // do nothing stamp value 386
    THROW_HARD_ERROR(BF("Should never deallocate object clang::RecursiveASTVisitor<asttooling::AstVisitor_O>"));
}
obj_deallocate_unmanaged_instance_STAMP_asttooling__AstVisitor_O:
{
     // stamp value 387
    asttooling::AstVisitor_O* obj_gc_safe = reinterpret_cast<asttooling::AstVisitor_O*>(client);
    GC<asttooling::AstVisitor_O>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCContainer:
{
     // do nothing stamp value 388
    THROW_HARD_ERROR(BF("Should never deallocate object gctools::GCContainer"));
}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__KeywordArgument_:
{
     // stamp value 389
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::KeywordArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_int_:
{
     // stamp value 390
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned int>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__CacheRecord_:
{
     // stamp value 391
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::CacheRecord>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__RequiredArgument_:
{
     // stamp value 392
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::RequiredArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__:
{
     // stamp value 393
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Cons_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__:
{
     // stamp value 394
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::SequenceStepper_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_double_:
{
     // stamp value 395
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<double>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolStorage_:
{
     // stamp value 396
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::SymbolStorage>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_short_:
{
     // stamp value 397
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<short>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__DynamicBinding_:
{
     // stamp value 398
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::DynamicBinding>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__:
{
     // stamp value 399
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<clbind::ClassRep_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_long_:
{
     // stamp value 400
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned long>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_:
{
     // stamp value 401
    THROW_HARD_ERROR(BF("Should never deallocate gcbitunits gctools::GCBitUnitArray_moveable<1,unsigned int,int>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 402
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::Symbol_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_signed_char_:
{
     // stamp value 403
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<signed char>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__ExceptionEntry_:
{
     // stamp value 404
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::ExceptionEntry>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__:
{
     // stamp value 405
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::List_V>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___:
{
     // stamp value 406
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<std::pair<gctools::smart_ptr<core::T_O>,gctools::smart_ptr<core::T_O>>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_int_:
{
     // stamp value 407
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<int>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_char_:
{
     // stamp value 408
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned char>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 409
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__AuxArgument_:
{
     // stamp value 410
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::AuxArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_long_:
{
     // stamp value 411
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<long>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_int_:
{
     // stamp value 412
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<int>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__:
{
     // stamp value 413
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Symbol_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__:
{
     // stamp value 414
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::T_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolClassPair_:
{
     // stamp value 415
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::SymbolClassPair>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__:
{
     // stamp value 416
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::SingleDispatchMethod_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__:
{
     // stamp value 417
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::Package_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_float_:
{
     // stamp value 418
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<float>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__:
{
     // stamp value 419
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<gctools::smart_ptr<core::SourceFileInfo_O>>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_double_:
{
     // stamp value 420
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<double>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__T_O___:
{
     // stamp value 421
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::T_O *>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__OptionalArgument_:
{
     // stamp value 422
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<core::OptionalArgument>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_short_:
{
     // stamp value 423
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCArray_moveable<unsigned short>"));}
obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_float_:
{
     // stamp value 424
    THROW_HARD_ERROR(BF("Should never deallocate containers gctools::GCVector_moveable<float>"));}
obj_deallocate_unmanaged_instance_STAMP_clang__FrontendAction:
{
     // do nothing stamp value 425
    THROW_HARD_ERROR(BF("Should never deallocate object clang::FrontendAction"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__ASTFrontendAction:
{
     // do nothing stamp value 426
    THROW_HARD_ERROR(BF("Should never deallocate object clang::ASTFrontendAction"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__SyntaxOnlyAction:
{
     // do nothing stamp value 427
    THROW_HARD_ERROR(BF("Should never deallocate object clang::SyntaxOnlyAction"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__tooling__ToolAction:
{
     // do nothing stamp value 428
    THROW_HARD_ERROR(BF("Should never deallocate object clang::tooling::ToolAction"));
}
obj_deallocate_unmanaged_instance_STAMP_clang__tooling__FrontendActionFactory:
{
     // do nothing stamp value 429
    THROW_HARD_ERROR(BF("Should never deallocate object clang::tooling::FrontendActionFactory"));
}
obj_deallocate_unmanaged_instance_STAMP_clbind__detail__class_map:
{
     // stamp value 430
    clbind::detail::class_map* obj_gc_safe = reinterpret_cast<clbind::detail::class_map*>(client);
    GC<clbind::detail::class_map>::deallocate_unmanaged_instance(obj_gc_safe);
    return;
}
#endif // defined(GC_OBJ_DEALLOCATOR)
#if defined(GC_OBJ_DEALLOCATOR_HELPERS)

#endif // defined(GC_OBJ_DEALLOCATOR_HELPERS)
#if defined(GC_OBJ_DEALLOCATOR_TABLE)
static void* OBJ_DEALLOCATOR_table[] = { 
  /* 0 */ NULL,
  /* 1 */ &&obj_deallocate_unmanaged_instance_STAMP_core__T_O,
  /* 2 */ &&obj_deallocate_unmanaged_instance_STAMP_core__VaList_dummy_O,
  /* 3 */ &&obj_deallocate_unmanaged_instance_STAMP_core__General_O,
  /* 4 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MultiStringBuffer_O,
  /* 5 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WeakHashTable_O,
  /* 6 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WeakKeyHashTable_O,
  /* 7 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ReadTable_O,
  /* 8 */ &&obj_deallocate_unmanaged_instance_STAMP_core__PosixTimeDuration_O,
  /* 9 */ &&obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignTypeSpec_O,
  /* 10 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Instance_O,
  /* 11 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxObject_O,
  /* 12 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRep_O,
  /* 13 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SmallMap_O,
  /* 14 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WrappedPointer_O,
  /* 15 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Archive_O,
  /* 16 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SaveArchive_O,
  /* 17 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SexpSaveArchive_O,
  /* 18 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LoadArchive_O,
  /* 19 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SexpLoadArchive_O,
  /* 20 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SymbolToEnumConverter_O,
  /* 21 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Reader_O,
  /* 22 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WeakKeyMapping_O,
  /* 23 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Attribute_O,
  /* 24 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ExternalObject_O,
  /* 25 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Triple_O,
  /* 26 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetOptions_O,
  /* 27 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Pass_O,
  /* 28 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ModulePass_O,
  /* 29 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ImmutablePass_O,
  /* 30 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetLibraryInfoWrapperPass_O,
  /* 31 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPass_O,
  /* 32 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ExecutionEngine_O,
  /* 33 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMContext_O,
  /* 34 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBuilder_O,
  /* 35 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MCSubtargetInfo_O,
  /* 36 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetSubtargetInfo_O,
  /* 37 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Module_O,
  /* 38 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Target_O,
  /* 39 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Type_O,
  /* 40 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IntegerType_O,
  /* 41 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionType_O,
  /* 42 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__CompositeType_O,
  /* 43 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__SequentialType_O,
  /* 44 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PointerType_O,
  /* 45 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ArrayType_O,
  /* 46 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__VectorType_O,
  /* 47 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__StructType_O,
  /* 48 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilderBase_O,
  /* 49 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IRBuilder_O,
  /* 50 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__APFloat_O,
  /* 51 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__APInt_O,
  /* 52 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBuilder_O,
  /* 53 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__EngineBuilder_O,
  /* 54 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManagerBase_O,
  /* 55 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FunctionPassManager_O,
  /* 56 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PassManager_O,
  /* 57 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Linker_O,
  /* 58 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Metadata_O,
  /* 59 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ValueAsMetadata_O,
  /* 60 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MDString_O,
  /* 61 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__MDNode_O,
  /* 62 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DINode_O,
  /* 63 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIScope_O,
  /* 64 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILocalScope_O,
  /* 65 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubprogram_O,
  /* 66 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlockBase_O,
  /* 67 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DILexicalBlock_O,
  /* 68 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIFile_O,
  /* 69 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompileUnit_O,
  /* 70 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIType_O,
  /* 71 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DICompositeType_O,
  /* 72 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIDerivedType_O,
  /* 73 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DIBasicType_O,
  /* 74 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DISubroutineType_O,
  /* 75 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Value_O,
  /* 76 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__User_O,
  /* 77 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Instruction_O,
  /* 78 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__UnaryInstruction_O,
  /* 79 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__VAArgInst_O,
  /* 80 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LoadInst_O,
  /* 81 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AllocaInst_O,
  /* 82 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__CallInst_O,
  /* 83 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicRMWInst_O,
  /* 84 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TerminatorInst_O,
  /* 85 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__SwitchInst_O,
  /* 86 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__InvokeInst_O,
  /* 87 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__UnreachableInst_O,
  /* 88 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ReturnInst_O,
  /* 89 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__IndirectBrInst_O,
  /* 90 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ResumeInst_O,
  /* 91 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__BranchInst_O,
  /* 92 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LandingPadInst_O,
  /* 93 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AtomicCmpXchgInst_O,
  /* 94 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__FenceInst_O,
  /* 95 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__StoreInst_O,
  /* 96 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__PHINode_O,
  /* 97 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Constant_O,
  /* 98 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalValue_O,
  /* 99 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__GlobalVariable_O,
  /* 100 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Function_O,
  /* 101 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantFP_O,
  /* 102 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__BlockAddress_O,
  /* 103 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantExpr_O,
  /* 104 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantPointerNull_O,
  /* 105 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataSequential_O,
  /* 106 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantDataArray_O,
  /* 107 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__UndefValue_O,
  /* 108 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantArray_O,
  /* 109 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantStruct_O,
  /* 110 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ConstantInt_O,
  /* 111 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__Argument_O,
  /* 112 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__BasicBlock_O,
  /* 113 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__TargetMachine_O,
  /* 114 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__LLVMTargetMachine_O,
  /* 115 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__NamedMDNode_O,
  /* 116 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SmallMultimap_O,
  /* 117 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LambdaListHandler_O,
  /* 118 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Sigset_O,
  /* 119 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__AttributeSet_O,
  /* 120 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Environment_O,
  /* 121 */ &&obj_deallocate_unmanaged_instance_STAMP_core__GlueEnvironment_O,
  /* 122 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LexicalEnvironment_O,
  /* 123 */ &&obj_deallocate_unmanaged_instance_STAMP_core__RuntimeVisibleEnvironment_O,
  /* 124 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BlockEnvironment_O,
  /* 125 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FunctionValueEnvironment_O,
  /* 126 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ValueEnvironment_O,
  /* 127 */ &&obj_deallocate_unmanaged_instance_STAMP_core__TagbodyEnvironment_O,
  /* 128 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CompileTimeEnvironment_O,
  /* 129 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CatchEnvironment_O,
  /* 130 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MacroletEnvironment_O,
  /* 131 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SymbolMacroletEnvironment_O,
  /* 132 */ &&obj_deallocate_unmanaged_instance_STAMP_core__UnwindProtectEnvironment_O,
  /* 133 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FunctionContainerEnvironment_O,
  /* 134 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ActivationFrame_O,
  /* 135 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ValueFrame_O,
  /* 136 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FunctionFrame_O,
  /* 137 */ &&obj_deallocate_unmanaged_instance_STAMP_core__RandomState_O,
  /* 138 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Function_O,
  /* 139 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Closure_O,
  /* 140 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ClosureWithSlots_O,
  /* 141 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethodFunction_O,
  /* 142 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CxxMethodFunction_O,
  /* 143 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BuiltinClosure_O,
  /* 144 */ &&obj_deallocate_unmanaged_instance_STAMP_core__TranslationFunctor_O,
  /* 145 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchGenericFunctionClosure_O,
  /* 146 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchEffectiveMethodFunction_O,
  /* 147 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchCxxEffectiveMethodFunction_O,
  /* 148 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstance_O,
  /* 149 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Creator_O,
  /* 150 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ClassRepCreator_O,
  /* 151 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DerivableCxxClassCreator_O,
  /* 152 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FuncallableInstanceCreator_O,
  /* 153 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__ConstructorCreator_O,
  /* 154 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__DummyCreator_O,
  /* 155 */ &&obj_deallocate_unmanaged_instance_STAMP_core__InstanceCreator_O,
  /* 156 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StandardClassCreator_O,
  /* 157 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SpecialForm_O,
  /* 158 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SequenceStepper_O,
  /* 159 */ &&obj_deallocate_unmanaged_instance_STAMP_core__VectorStepper_O,
  /* 160 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ConsStepper_O,
  /* 161 */ &&obj_deallocate_unmanaged_instance_STAMP_core__WeakPointer_O,
  /* 162 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DebugLoc_O,
  /* 163 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SNode_O,
  /* 164 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BranchSNode_O,
  /* 165 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LeafSNode_O,
  /* 166 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ModuleHandle_O,
  /* 167 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Pointer_O,
  /* 168 */ &&obj_deallocate_unmanaged_instance_STAMP_clasp_ffi__ForeignData_O,
  /* 169 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CxxObject_O,
  /* 170 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DINodeArray_O,
  /* 171 */ &&obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_float_O,
  /* 172 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Info_O,
  /* 173 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__OptimizeInfo_O,
  /* 174 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__BlockInfo_O,
  /* 175 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionInfo_O,
  /* 176 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__GlobalMacroInfo_O,
  /* 177 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__LocalMacroInfo_O,
  /* 178 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__LocalFunctionInfo_O,
  /* 179 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__SpecialOperatorInfo_O,
  /* 180 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__LambdaNameInfo_O,
  /* 181 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__GlobalFunctionInfo_O,
  /* 182 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableInfo_O,
  /* 183 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__SpecialVariableInfo_O,
  /* 184 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__LexicalVariableInfo_O,
  /* 185 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__SymbolMacroInfo_O,
  /* 186 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__ConstantVariableInfo_O,
  /* 187 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__ConditionVariable_O,
  /* 188 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__Mutex_O,
  /* 189 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__RecursiveMutex_O,
  /* 190 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DITypeRefArray_O,
  /* 191 */ &&obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_double_O,
  /* 192 */ &&obj_deallocate_unmanaged_instance_STAMP_core__NativeVector_int_O,
  /* 193 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__SharedMutex_O,
  /* 194 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Entry_O,
  /* 195 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableType_O,
  /* 196 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableIgnore_O,
  /* 197 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Function_O,
  /* 198 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__SymbolMacro_O,
  /* 199 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionDynamicExtent_O,
  /* 200 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Inline_O,
  /* 201 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Closure_O,
  /* 202 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Optimize_O,
  /* 203 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__LambdaName_O,
  /* 204 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Tag_O,
  /* 205 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Block_O,
  /* 206 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionType_O,
  /* 207 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__GlobalEnvironment_O,
  /* 208 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__VariableDynamicExtent_O,
  /* 209 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__LexicalVariable_O,
  /* 210 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__SpecialVariable_O,
  /* 211 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__Macro_O,
  /* 212 */ &&obj_deallocate_unmanaged_instance_STAMP_clcenv__FunctionIgnore_O,
  /* 213 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__Process_O,
  /* 214 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleDispatchMethod_O,
  /* 215 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Iterator_O,
  /* 216 */ &&obj_deallocate_unmanaged_instance_STAMP_core__RecursiveDirectoryIterator_O,
  /* 217 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DirectoryIterator_O,
  /* 218 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__InsertPoint_O,
  /* 219 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Array_O,
  /* 220 */ &&obj_deallocate_unmanaged_instance_STAMP_core__AbstractSimpleVector_O,
  /* 221 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVectorFloat_O_float_core__AbstractSimpleVector_O_,
  /* 222 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVectorFloat_O,
  /* 223 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte64_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 224 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte64_t_O,
  /* 225 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int64_t_O_long_core__AbstractSimpleVector_O_,
  /* 226 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int64_t_O,
  /* 227 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleString_O,
  /* 228 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleCharacterString_O_int_core__SimpleString_O_,
  /* 229 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleCharacterString_O,
  /* 230 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleBaseString_O_unsigned_char_core__SimpleString_O_,
  /* 231 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleBaseString_O,
  /* 232 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int16_t_O_short_core__AbstractSimpleVector_O_,
  /* 233 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int16_t_O,
  /* 234 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte16_t_O_unsigned_short_core__AbstractSimpleVector_O_,
  /* 235 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte16_t_O,
  /* 236 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_fixnum_O_long_core__AbstractSimpleVector_O_,
  /* 237 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_fixnum_O,
  /* 238 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int8_t_O_signed_char_core__AbstractSimpleVector_O_,
  /* 239 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int8_t_O,
  /* 240 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_O_gctools__smart_ptr_core__T_O__core__AbstractSimpleVector_O_,
  /* 241 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_O,
  /* 242 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte8_t_O_unsigned_char_core__AbstractSimpleVector_O_,
  /* 243 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte8_t_O,
  /* 244 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_int32_t_O_int_core__AbstractSimpleVector_O_,
  /* 245 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_int32_t_O,
  /* 246 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleBitVector_O,
  /* 247 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_byte32_t_O_unsigned_int_core__AbstractSimpleVector_O_,
  /* 248 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_byte32_t_O,
  /* 249 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVector_size_t_O_unsigned_long_core__AbstractSimpleVector_O_,
  /* 250 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVector_size_t_O,
  /* 251 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleVector_core__SimpleVectorDouble_O_double_core__AbstractSimpleVector_O_,
  /* 252 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleVectorDouble_O,
  /* 253 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_O,
  /* 254 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BitVectorNs_O,
  /* 255 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte64_t_O_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__MDArray_O_,
  /* 256 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte64_t_O,
  /* 257 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int16_t_O_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__MDArray_O_,
  /* 258 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int16_t_O,
  /* 259 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int8_t_O_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__MDArray_O_,
  /* 260 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int8_t_O,
  /* 261 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayCharacter_O_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__MDArray_O_,
  /* 262 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayCharacter_O,
  /* 263 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int32_t_O_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__MDArray_O_,
  /* 264 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int32_t_O,
  /* 265 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayFloat_O_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__MDArray_O_,
  /* 266 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayFloat_O,
  /* 267 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StrNs_O,
  /* 268 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__StrWNs_O_core__SimpleCharacterString_O_core__StrNs_O_,
  /* 269 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StrWNs_O,
  /* 270 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Vector_core__Str8Ns_O_core__SimpleBaseString_O_core__StrNs_O_,
  /* 271 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Str8Ns_O,
  /* 272 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayDouble_O_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__MDArray_O_,
  /* 273 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayDouble_O,
  /* 274 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayT_O_core__SimpleMDArrayT_O_core__SimpleVector_O_core__MDArray_O_,
  /* 275 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayT_O,
  /* 276 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_size_t_O_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__MDArray_O_,
  /* 277 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_size_t_O,
  /* 278 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte8_t_O_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__MDArray_O_,
  /* 279 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte8_t_O,
  /* 280 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBit_O,
  /* 281 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_int64_t_O_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__MDArray_O_,
  /* 282 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_int64_t_O,
  /* 283 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte16_t_O_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__MDArray_O_,
  /* 284 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte16_t_O,
  /* 285 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_byte32_t_O_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__MDArray_O_,
  /* 286 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_byte32_t_O,
  /* 287 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_O,
  /* 288 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int8_t_O_core__SimpleVector_int8_t_O_core__SimpleMDArray_O_,
  /* 289 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int8_t_O,
  /* 290 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayCharacter_O_core__SimpleCharacterString_O_core__SimpleMDArray_O_,
  /* 291 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayCharacter_O,
  /* 292 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__SimpleMDArray_O_,
  /* 293 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_fixnum_O,
  /* 294 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte32_t_O_core__SimpleVector_byte32_t_O_core__SimpleMDArray_O_,
  /* 295 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte32_t_O,
  /* 296 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte16_t_O_core__SimpleVector_byte16_t_O_core__SimpleMDArray_O_,
  /* 297 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte16_t_O,
  /* 298 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayT_O_core__SimpleVector_O_core__SimpleMDArray_O_,
  /* 299 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayT_O,
  /* 300 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int32_t_O_core__SimpleVector_int32_t_O_core__SimpleMDArray_O_,
  /* 301 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int32_t_O,
  /* 302 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayDouble_O_core__SimpleVectorDouble_O_core__SimpleMDArray_O_,
  /* 303 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayDouble_O,
  /* 304 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__SimpleMDArray_O_,
  /* 305 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBaseChar_O,
  /* 306 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte64_t_O_core__SimpleVector_byte64_t_O_core__SimpleMDArray_O_,
  /* 307 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte64_t_O,
  /* 308 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayBit_O,
  /* 309 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int16_t_O_core__SimpleVector_int16_t_O_core__SimpleMDArray_O_,
  /* 310 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int16_t_O,
  /* 311 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_byte8_t_O_core__SimpleVector_byte8_t_O_core__SimpleMDArray_O_,
  /* 312 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_byte8_t_O,
  /* 313 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_size_t_O_core__SimpleVector_size_t_O_core__SimpleMDArray_O_,
  /* 314 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_size_t_O,
  /* 315 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArray_int64_t_O_core__SimpleVector_int64_t_O_core__SimpleMDArray_O_,
  /* 316 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArray_int64_t_O,
  /* 317 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_SimpleArray_core__SimpleMDArrayFloat_O_core__SimpleVectorFloat_O_core__SimpleMDArray_O_,
  /* 318 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SimpleMDArrayFloat_O,
  /* 319 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArray_fixnum_O_core__SimpleMDArray_fixnum_O_core__SimpleVector_fixnum_O_core__MDArray_O_,
  /* 320 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArray_fixnum_O,
  /* 321 */ &&obj_deallocate_unmanaged_instance_STAMP_core__template_Array_core__MDArrayBaseChar_O_core__SimpleMDArrayBaseChar_O_core__SimpleBaseString_O_core__MDArray_O_,
  /* 322 */ &&obj_deallocate_unmanaged_instance_STAMP_core__MDArrayBaseChar_O,
  /* 323 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Symbol_O,
  /* 324 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Null_O,
  /* 325 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__BlockingConcurrentQueue_O,
  /* 326 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Path_O,
  /* 327 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Character_dummy_O,
  /* 328 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SourceManager_O,
  /* 329 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__DataLayout_O,
  /* 330 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Pathname_O,
  /* 331 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LogicalPathname_O,
  /* 332 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Cache_O,
  /* 333 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LoadTimeValues_O,
  /* 334 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SharpEqualWrapper_O,
  /* 335 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Number_O,
  /* 336 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Real_O,
  /* 337 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Rational_O,
  /* 338 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Ratio_O,
  /* 339 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Integer_O,
  /* 340 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Bignum_O,
  /* 341 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Fixnum_dummy_O,
  /* 342 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Float_O,
  /* 343 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DoubleFloat_O,
  /* 344 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SingleFloat_dummy_O,
  /* 345 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LongFloat_O,
  /* 346 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ShortFloat_O,
  /* 347 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Complex_O,
  /* 348 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Stream_O,
  /* 349 */ &&obj_deallocate_unmanaged_instance_STAMP_core__AnsiStream_O,
  /* 350 */ &&obj_deallocate_unmanaged_instance_STAMP_core__TwoWayStream_O,
  /* 351 */ &&obj_deallocate_unmanaged_instance_STAMP_core__BroadcastStream_O,
  /* 352 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SynonymStream_O,
  /* 353 */ &&obj_deallocate_unmanaged_instance_STAMP_core__ConcatenatedStream_O,
  /* 354 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StringStream_O,
  /* 355 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StringOutputStream_O,
  /* 356 */ &&obj_deallocate_unmanaged_instance_STAMP_core__StringInputStream_O,
  /* 357 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FileStream_O,
  /* 358 */ &&obj_deallocate_unmanaged_instance_STAMP_core__IOFileStream_O,
  /* 359 */ &&obj_deallocate_unmanaged_instance_STAMP_core__IOStreamStream_O,
  /* 360 */ &&obj_deallocate_unmanaged_instance_STAMP_core__EchoStream_O,
  /* 361 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Package_O,
  /* 362 */ &&obj_deallocate_unmanaged_instance_STAMP_llvmo__ClaspJIT_O,
  /* 363 */ &&obj_deallocate_unmanaged_instance_STAMP_core__FileStatus_O,
  /* 364 */ &&obj_deallocate_unmanaged_instance_STAMP_core__InvocationHistoryFrameIterator_O,
  /* 365 */ &&obj_deallocate_unmanaged_instance_STAMP_core__PosixTime_O,
  /* 366 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTable_O,
  /* 367 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqual_O,
  /* 368 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEqualp_O,
  /* 369 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEq_O,
  /* 370 */ &&obj_deallocate_unmanaged_instance_STAMP_core__HashTableEql_O,
  /* 371 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Exposer_O,
  /* 372 */ &&obj_deallocate_unmanaged_instance_STAMP_core__CoreExposer_O,
  /* 373 */ &&obj_deallocate_unmanaged_instance_STAMP_asttooling__AsttoolingExposer_O,
  /* 374 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SourcePosInfo_O,
  /* 375 */ &&obj_deallocate_unmanaged_instance_STAMP_core__IntArray_O,
  /* 376 */ &&obj_deallocate_unmanaged_instance_STAMP_core__SourceFileInfo_O,
  /* 377 */ &&obj_deallocate_unmanaged_instance_STAMP_core__DirectoryEntry_O,
  /* 378 */ &&obj_deallocate_unmanaged_instance_STAMP_core__LightUserData_O,
  /* 379 */ &&obj_deallocate_unmanaged_instance_STAMP_core__UserData_O,
  /* 380 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Record_O,
  /* 381 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__ClassRegistry_O,
  /* 382 */ &&obj_deallocate_unmanaged_instance_STAMP_mp__ConcurrentQueue_O,
  /* 383 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Cons_O,
  /* 384 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__ast_matchers__MatchFinder__MatchCallback,
  /* 385 */ &&obj_deallocate_unmanaged_instance_STAMP_core__Lisp_O,
  /* 386 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__RecursiveASTVisitor_asttooling__AstVisitor_O_,
  /* 387 */ &&obj_deallocate_unmanaged_instance_STAMP_asttooling__AstVisitor_O,
  /* 388 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCContainer,
  /* 389 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__KeywordArgument_,
  /* 390 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_int_,
  /* 391 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__CacheRecord_,
  /* 392 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__RequiredArgument_,
  /* 393 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Cons_O__,
  /* 394 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SequenceStepper_O__,
  /* 395 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_double_,
  /* 396 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolStorage_,
  /* 397 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_short_,
  /* 398 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__DynamicBinding_,
  /* 399 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_clbind__ClassRep_O__,
  /* 400 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_long_,
  /* 401 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCBitUnitArray_moveable_1_unsigned_int_int_,
  /* 402 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__Symbol_O__gctools__smart_ptr_core__T_O___,
  /* 403 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_signed_char_,
  /* 404 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__ExceptionEntry_,
  /* 405 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__List_V__,
  /* 406 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_std__pair_gctools__smart_ptr_core__T_O__gctools__smart_ptr_core__T_O___,
  /* 407 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_int_,
  /* 408 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_char_,
  /* 409 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_gctools__smart_ptr_core__T_O__,
  /* 410 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__AuxArgument_,
  /* 411 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_long_,
  /* 412 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_int_,
  /* 413 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Symbol_O__,
  /* 414 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__T_O__,
  /* 415 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__SymbolClassPair_,
  /* 416 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SingleDispatchMethod_O__,
  /* 417 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__Package_O__,
  /* 418 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_float_,
  /* 419 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_gctools__smart_ptr_core__SourceFileInfo_O__,
  /* 420 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_double_,
  /* 421 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__T_O___,
  /* 422 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_core__OptionalArgument_,
  /* 423 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCArray_moveable_unsigned_short_,
  /* 424 */ &&obj_deallocate_unmanaged_instance_STAMP_gctools__GCVector_moveable_float_,
  /* 425 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__FrontendAction,
  /* 426 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__ASTFrontendAction,
  /* 427 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__SyntaxOnlyAction,
  /* 428 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__tooling__ToolAction,
  /* 429 */ &&obj_deallocate_unmanaged_instance_STAMP_clang__tooling__FrontendActionFactory,
  /* 430 */ &&obj_deallocate_unmanaged_instance_STAMP_clbind__detail__class_map,
   NULL
};
#endif // defined(GC_OBJ_DEALLOCATOR_TABLE)
#if defined(GC_GLOBAL_SYMBOLS)
#endif // defined(GC_GLOBAL_SYMBOLS)
#if defined(GC_GLOBALS)
 SMART_PTR_FIX(llvmo::DataLayout_O::static_class_symbol);
 SMART_PTR_FIX(core::StringStream_O::static_class);
 SMART_PTR_FIX(core::FileStream_O::static_class_symbol);
 SMART_PTR_FIX(core::LoadTimeValues_O::static_creator);
 SMART_PTR_FIX(core::SingleFloat_dummy_O::static_creator);
 SMART_PTR_FIX(llvmo::ValueAsMetadata_O::static_class);
 SMART_PTR_FIX(core::Record_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantPointerNull_O::static_class);
 SMART_PTR_FIX(core::Real_O::static_creator);
 SMART_PTR_FIX(llvmo::LLVMTargetMachine_O::static_class);
 SMART_PTR_FIX(core::SimpleVectorDouble_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_byte16_t_O::static_creator);
 SMART_PTR_FIX(core::Record_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_byte64_t_O::static_class);
 SMART_PTR_FIX(mp::Mutex_O::static_creator);
 SMART_PTR_FIX(core::LoadTimeValues_O::static_class);
 SMART_PTR_FIX(llvmo::IRBuilder_O::static_class_symbol);
 SMART_PTR_FIX(clbind::ClassRep_O::static_class_symbol);
 SMART_PTR_FIX(core::WeakPointer_O::static_creator);
 SMART_PTR_FIX(llvmo::Instruction_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVectorDouble_O::static_creator);
 SMART_PTR_FIX(clcenv::FunctionInfo_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::User_O::static_class);
 SMART_PTR_FIX(core::Real_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Block_O::static_class_symbol);
 SMART_PTR_FIX(core::UnwindProtectEnvironment_O::static_creator);
 SMART_PTR_FIX(clcenv::FunctionDynamicExtent_O::static_creator);
 SMART_PTR_FIX(llvmo::FunctionPassManager_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleBitVector_O::static_class);
 SMART_PTR_FIX(core::MDArrayCharacter_O::static_creator);
 SIMPLE_POINTER_FIX(gctools::global_tagged_Symbol_OP_sameAsKey);
 SMART_PTR_FIX(llvmo::PassManagerBase_O::static_creator);
 SMART_PTR_FIX(llvmo::APFloat_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVectorFloat_O::static_class_symbol);
 SMART_PTR_FIX(core::SymbolToEnumConverter_O::static_class_symbol);
 SMART_PTR_FIX(core::LexicalEnvironment_O::static_class);
 SMART_PTR_FIX(llvmo::ArrayType_O::static_creator);
 SMART_PTR_FIX(core::Creator_O::static_creator);
 SMART_PTR_FIX(clcenv::VariableIgnore_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::FenceInst_O::static_class_symbol);
 SMART_PTR_FIX(core::Fixnum_dummy_O::static_class_symbol);
 SMART_PTR_FIX(clbind::DummyCreator_O::static_creator);
 SMART_PTR_FIX(clcenv::SymbolMacroInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_byte32_t_O::static_creator);
 SMART_PTR_FIX(llvmo::SequentialType_O::static_creator);
 SMART_PTR_FIX(llvmo::DINodeArray_O::static_class);
 SMART_PTR_FIX(core::Null_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::UnaryInstruction_O::static_class_symbol);
 SMART_PTR_FIX(core::ConcatenatedStream_O::static_creator);
 SMART_PTR_FIX(mp::ConcurrentQueue_O::static_creator);
 SMART_PTR_FIX(llvmo::DILexicalBlock_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetOptions_O::static_class_symbol);
 SMART_PTR_FIX(core::StrWNs_O::static_creator);
 SMART_PTR_FIX(core::AbstractSimpleVector_O::static_class);
 SMART_PTR_FIX(clcenv::Closure_O::static_class);
 SMART_PTR_FIX(llvmo::PointerType_O::static_creator);
 SMART_PTR_FIX(llvmo::DITypeRefArray_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_byte32_t_O::static_creator);
 SMART_PTR_FIX(core::SingleDispatchCxxEffectiveMethodFunction_O::static_class_symbol);
 SMART_PTR_FIX(core::Number_O::static_creator);
 SMART_PTR_FIX(core::SpecialForm_O::static_class);
 SMART_PTR_FIX(core::LexicalEnvironment_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantPointerNull_O::static_creator);
 SMART_PTR_FIX(clcenv::LexicalVariable_O::static_creator);
 SMART_PTR_FIX(core::SourceFileInfo_O::static_class_symbol);
 SMART_PTR_FIX(asttooling::AstVisitor_O::static_class_symbol);
 SMART_PTR_FIX(core::SynonymStream_O::static_creator);
 SMART_PTR_FIX(core::FuncallableInstance_O::static_creator);
 SMART_PTR_FIX(core::Path_O::static_class);
 SMART_PTR_FIX(clcenv::Optimize_O::static_class);
 SMART_PTR_FIX(llvmo::SwitchInst_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_size_t_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::SpecialOperatorInfo_O::static_class);
 SMART_PTR_FIX(core::FunctionContainerEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::SingleDispatchMethodFunction_O::static_class);
 SMART_PTR_FIX(llvmo::PointerType_O::static_class);
 SMART_PTR_FIX(llvmo::DINode_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_int32_t_O::static_class_symbol);
 SMART_PTR_FIX(core::Complex_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetMachine_O::static_class);
 SMART_PTR_FIX(core::RandomState_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_int32_t_O::static_class);
 SMART_PTR_FIX(core::Cons_O::static_class);
 SMART_PTR_FIX(clcenv::Entry_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::MDString_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_O::static_class);
 SMART_PTR_FIX(clcenv::GlobalMacroInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::LexicalEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArrayFloat_O::static_creator);
 SMART_PTR_FIX(core::Ratio_O::static_class);
 SMART_PTR_FIX(core::FileStatus_O::static_creator);
 SMART_PTR_FIX(core::SimpleBitVector_O::static_creator);
 SMART_PTR_FIX(llvmo::DIType_O::static_class_symbol);
 SMART_PTR_FIX(core::PosixTimeDuration_O::static_creator);
 SMART_PTR_FIX(core::MDArray_O::static_creator);
 SMART_PTR_FIX(core::SimpleString_O::static_creator);
 SMART_PTR_FIX(clcenv::LambdaNameInfo_O::static_creator);
 SMART_PTR_FIX(core::PosixTime_O::static_creator);
 SMART_PTR_FIX(clcenv::GlobalMacroInfo_O::static_class);
 SMART_PTR_FIX(core::Fixnum_dummy_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_O::static_creator);
 SMART_PTR_FIX(core::SNode_O::static_class);
 SMART_PTR_FIX(llvmo::DICompileUnit_O::static_class);
 SMART_PTR_FIX(llvmo::ConstantExpr_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::SpecialVariable_O::static_class);
 SMART_PTR_FIX(clcenv::FunctionType_O::static_class_symbol);
 SMART_PTR_FIX(core::StringInputStream_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_byte16_t_O::static_creator);
 SMART_PTR_FIX(llvmo::FunctionPassManager_O::static_creator);
 SMART_PTR_FIX(core::TranslationFunctor_O::static_class);
 SMART_PTR_FIX(llvmo::TargetMachine_O::static_creator);
 SMART_PTR_FIX(core::MDArray_int8_t_O::static_class);
 SMART_PTR_FIX(core::Array_O::static_class_symbol);
 SMART_PTR_FIX(core::DirectoryIterator_O::static_class_symbol);
 SMART_PTR_FIX(core::BranchSNode_O::static_creator);
 SMART_PTR_FIX(core::Integer_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_byte32_t_O::static_creator);
 SMART_PTR_FIX(core::SingleDispatchMethod_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_O::static_creator);
 SMART_PTR_FIX(clcenv::SymbolMacro_O::static_class);
 SMART_PTR_FIX(core::ValueFrame_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayBaseChar_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_int64_t_O::static_creator);
 SMART_PTR_FIX(core::Archive_O::static_class);
 SMART_PTR_FIX(llvmo::DIScope_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantArray_O::static_creator);
 SMART_PTR_FIX(clcenv::Entry_O::static_class);
 SMART_PTR_FIX(clcenv::FunctionInfo_O::static_creator);
 SMART_PTR_FIX(mp::BlockingConcurrentQueue_O::static_class);
 SMART_PTR_FIX(llvmo::LoadInst_O::static_class);
 SMART_PTR_FIX(llvmo::ResumeInst_O::static_class);
 SMART_PTR_FIX(llvmo::Target_O::static_class);
 SMART_PTR_FIX(core::GlueEnvironment_O::static_class);
 SMART_PTR_FIX(clcenv::Entry_O::static_creator);
 SMART_PTR_FIX(core::SourceManager_O::static_creator);
 SMART_PTR_FIX(mp::Mutex_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Constant_O::static_creator);
 SMART_PTR_FIX(core::WeakKeyMapping_O::static_creator);
 SMART_PTR_FIX(llvmo::StoreInst_O::static_class);
 SMART_PTR_FIX(core::Rational_O::static_creator);
 SMART_PTR_FIX(clcenv::SymbolMacroInfo_O::static_creator);
 SMART_PTR_FIX(llvmo::InsertPoint_O::static_creator);
 SMART_PTR_FIX(asttooling::AstVisitor_O::static_class);
 SMART_PTR_FIX(clcenv::FunctionType_O::static_creator);
 SMART_PTR_FIX(core::Stream_O::static_creator);
 SMART_PTR_FIX(llvmo::Argument_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayT_O::static_creator);
 SMART_PTR_FIX(core::StandardClassCreator_O::static_creator);
 SMART_PTR_FIX(core::Environment_O::static_class);
 SMART_PTR_FIX(llvmo::VAArgInst_O::static_creator);
 SMART_PTR_FIX(core::NativeVector_float_O::static_class);
 SMART_PTR_FIX(core::IntArray_O::static_creator);
 SMART_PTR_FIX(core::SimpleString_O::static_class_symbol);
 SMART_PTR_FIX(core::SmallMap_O::static_class);
 SMART_PTR_FIX(llvmo::Instruction_O::static_creator);
 SMART_PTR_FIX(llvmo::AtomicRMWInst_O::static_class);
 SMART_PTR_FIX(core::SpecialForm_O::static_class_symbol);
 SMART_PTR_FIX(clasp_ffi::ForeignData_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::CallInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetOptions_O::static_class);
 SMART_PTR_FIX(core::StrNs_O::static_creator);
 SMART_PTR_FIX(core::FunctionFrame_O::static_class);
 SMART_PTR_FIX(llvmo::AttributeSet_O::static_creator);
 SMART_PTR_FIX(clcenv::LocalMacroInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::ValueEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Attribute_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantInt_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ReturnInst_O::static_class);
 SMART_PTR_FIX(core::Cons_O::static_class_symbol);
 SMART_PTR_FIX(core::Instance_O::static_creator);
 SMART_PTR_FIX(core::TagbodyEnvironment_O::static_class);
 SMART_PTR_FIX(clcenv::VariableInfo_O::static_class_symbol);
 SMART_PTR_FIX(mp::ConditionVariable_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Pass_O::static_class_symbol);
 SMART_PTR_FIX(core::CxxMethodFunction_O::static_creator);
 SMART_PTR_FIX(llvmo::SwitchInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::UnaryInstruction_O::static_class);
 SMART_PTR_FIX(llvmo::ModuleHandle_O::static_creator);
 SMART_PTR_FIX(core::SymbolToEnumConverter_O::static_class);
 SMART_PTR_FIX(llvmo::UnreachableInst_O::static_class);
 SMART_PTR_FIX(mp::RecursiveMutex_O::static_class);
 SMART_PTR_FIX(llvmo::CompositeType_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayCharacter_O::static_class);
 SMART_PTR_FIX(clasp_ffi::ForeignData_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayBit_O::static_creator);
 SMART_PTR_FIX(core::Instance_O::static_class);
 SMART_PTR_FIX(mp::BlockingConcurrentQueue_O::static_creator);
 SMART_PTR_FIX(clcenv::Tag_O::static_creator);
 SMART_PTR_FIX(llvmo::Target_O::static_creator);
 SMART_PTR_FIX(core::SimpleCharacterString_O::static_creator);
 SMART_PTR_FIX(core::Stream_O::static_class);
 SMART_PTR_FIX(core::Function_O::static_creator);
 SMART_PTR_FIX(llvmo::EngineBuilder_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::LocalMacroInfo_O::static_class);
 SMART_PTR_FIX(core::DirectoryEntry_O::static_class);
 SMART_PTR_FIX(llvmo::DITypeRefArray_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_byte64_t_O::static_creator);
 SMART_PTR_FIX(clcenv::ConstantVariableInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::RandomState_O::static_class_symbol);
 SMART_PTR_FIX(core::InvocationHistoryFrameIterator_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_size_t_O::static_class);
 SMART_PTR_FIX(core::TagbodyEnvironment_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_fixnum_O::static_class_symbol);
 SMART_PTR_FIX(core::WeakPointer_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Block_O::static_class);
 SMART_PTR_FIX(core::LogicalPathname_O::static_class);
 SMART_PTR_FIX(core::LeafSNode_O::static_creator);
 SMART_PTR_FIX(core::Array_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_int32_t_O::static_class);
 SMART_PTR_FIX(llvmo::ConstantStruct_O::static_creator);
 SMART_PTR_FIX(core::MDArray_int64_t_O::static_class_symbol);
 SMART_PTR_FIX(core::SexpSaveArchive_O::static_creator);
 SMART_PTR_FIX(llvmo::DebugLoc_O::static_creator);
 SMART_PTR_FIX(clcenv::Macro_O::static_class);
 SMART_PTR_FIX(llvmo::PassManager_O::static_class);
 SMART_PTR_FIX(mp::Mutex_O::static_class);
 SMART_PTR_FIX(llvmo::NamedMDNode_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ConstantFP_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArrayCharacter_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::FunctionType_O::static_class);
 SMART_PTR_FIX(llvmo::Linker_O::static_creator);
 SMART_PTR_FIX(clcenv::LexicalVariable_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::GlobalValue_O::static_class);
 SMART_PTR_FIX(mp::Process_O::static_creator);
 SMART_PTR_FIX(core::Character_dummy_O::static_class);
 SMART_PTR_FIX(llvmo::AtomicCmpXchgInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetLibraryInfoWrapperPass_O::static_creator);
 SMART_PTR_FIX(core::Complex_O::static_creator);
 SMART_PTR_FIX(core::Package_O::static_creator);
 SMART_PTR_FIX(llvmo::Metadata_O::static_creator);
 SMART_PTR_FIX(core::WrappedPointer_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_int64_t_O::static_class_symbol);
 SMART_PTR_FIX(core::ReadTable_O::static_class_symbol);
 SMART_PTR_FIX(core::SingleDispatchEffectiveMethodFunction_O::static_creator);
 SMART_PTR_FIX(core::ConcatenatedStream_O::static_class);
 SMART_PTR_FIX(core::FileStream_O::static_creator);
 SMART_PTR_FIX(clcenv::FunctionDynamicExtent_O::static_class);
 SMART_PTR_FIX(core::UnwindProtectEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_fixnum_O::static_creator);
 SMART_PTR_FIX(core::CxxObject_O::static_class);
 SMART_PTR_FIX(llvmo::PassManagerBuilder_O::static_creator);
 SMART_PTR_FIX(core::Str8Ns_O::static_class_symbol);
 SMART_PTR_FIX(core::IOFileStream_O::static_creator);
 SMART_PTR_FIX(core::SynonymStream_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_fixnum_O::static_class_symbol);
 SMART_PTR_FIX(clbind::ConstructorCreator_O::static_class);
 SMART_PTR_FIX(core::LoadArchive_O::static_class);
 SMART_PTR_FIX(core::HashTable_O::static_creator);
 SMART_PTR_FIX(llvmo::BlockAddress_O::static_creator);
 SMART_PTR_FIX(llvmo::PHINode_O::static_class_symbol);
 SMART_PTR_FIX(core::StrWNs_O::static_class);
 SMART_PTR_FIX(clcenv::SymbolMacroInfo_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_int64_t_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArrayDouble_O::static_class);
 SMART_PTR_FIX(llvmo::ConstantArray_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayDouble_O::static_creator);
 SMART_PTR_FIX(core::MDArray_int8_t_O::static_creator);
 SMART_PTR_FIX(llvmo::ArrayType_O::static_class);
 SMART_PTR_FIX(llvmo::Argument_O::static_creator);
 SMART_PTR_FIX(llvmo::FunctionType_O::static_class);
 SMART_PTR_FIX(core::SourceFileInfo_O::static_class);
 SMART_PTR_FIX(core::BlockEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Pass_O::static_class);
 SMART_PTR_FIX(clcenv::SpecialVariable_O::static_class_symbol);
 SMART_PTR_FIX(core::CatchEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::BlockAddress_O::static_class_symbol);
 SMART_PTR_FIX(core::NativeVector_int_O::static_creator);
 SMART_PTR_FIX(llvmo::VectorType_O::static_class);
 SMART_PTR_FIX(core::BuiltinClosure_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_byte16_t_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_byte16_t_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayFloat_O::static_class);
 SMART_PTR_FIX(llvmo::UnreachableInst_O::static_creator);
 SMART_PTR_FIX(core::Function_O::static_class);
 SMART_PTR_FIX(llvmo::ExecutionEngine_O::static_class);
 SIMPLE_POINTER_FIX(gctools::global_tagged_Symbol_OP_unbound);
 SMART_PTR_FIX(clcenv::LexicalVariable_O::static_class);
 SMART_PTR_FIX(core::MDArray_byte16_t_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_fixnum_O::static_class);
 SMART_PTR_FIX(core::RecursiveDirectoryIterator_O::static_class);
 SMART_PTR_FIX(clcenv::LambdaNameInfo_O::static_class);
 SMART_PTR_FIX(core::VaList_dummy_O::static_creator);
 SMART_PTR_FIX(llvmo::DIScope_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::OptimizeInfo_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Constant_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ClaspJIT_O::static_class_symbol);
 SMART_PTR_FIX(core::ConsStepper_O::static_class_symbol);
 SMART_PTR_FIX(core::NativeVector_float_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantDataArray_O::static_creator);
 SMART_PTR_FIX(llvmo::IRBuilderBase_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Module_O::static_class);
 SMART_PTR_FIX(core::SymbolMacroletEnvironment_O::static_class);
 SMART_PTR_FIX(llvmo::InsertPoint_O::static_class_symbol);
 SMART_PTR_FIX(core::VectorStepper_O::static_class);
 SMART_PTR_FIX(llvmo::LLVMContext_O::static_class);
 SMART_PTR_FIX(core::LogicalPathname_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::MCSubtargetInfo_O::static_class);
 SMART_PTR_FIX(core::SingleDispatchCxxEffectiveMethodFunction_O::static_creator);
 SMART_PTR_FIX(llvmo::MDNode_O::static_class);
 SMART_PTR_FIX(core::MDArray_byte32_t_O::static_class);
 SMART_PTR_FIX(core::BitVectorNs_O::static_class);
 SMART_PTR_FIX(core::ConsStepper_O::static_class);
 SMART_PTR_FIX(core::RuntimeVisibleEnvironment_O::static_creator);
 SMART_PTR_FIX(llvmo::UndefValue_O::static_creator);
 SMART_PTR_FIX(llvmo::Value_O::static_creator);
 SMART_PTR_FIX(clcenv::FunctionIgnore_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_byte8_t_O::static_class_symbol);
 SMART_PTR_FIX(core::SharpEqualWrapper_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_int16_t_O::static_creator);
 SMART_PTR_FIX(core::IOStreamStream_O::static_creator);
 SMART_PTR_FIX(mp::ConditionVariable_O::static_class);
 SMART_PTR_FIX(core::MDArray_byte8_t_O::static_class);
 SMART_PTR_FIX(core::SourceManager_O::static_class);
 SMART_PTR_FIX(clcenv::FunctionDynamicExtent_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Macro_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ImmutablePass_O::static_class);
 SMART_PTR_FIX(llvmo::ClaspJIT_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayDouble_O::static_class_symbol);
 SMART_PTR_FIX(core::LightUserData_O::static_class_symbol);
 SMART_PTR_FIX(core::ClassRepCreator_O::static_creator);
 SMART_PTR_FIX(core::Cache_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_byte8_t_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_fixnum_O::static_creator);
 SMART_PTR_FIX(core::General_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_int32_t_O::static_creator);
 SMART_PTR_FIX(llvmo::FunctionPass_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_int16_t_O::static_creator);
 SMART_PTR_FIX(core::WeakPointer_O::static_class);
 SMART_PTR_FIX(core::EchoStream_O::static_creator);
 SMART_PTR_FIX(core::SaveArchive_O::static_class);
 SMART_PTR_FIX(llvmo::AtomicCmpXchgInst_O::static_class);
 SMART_PTR_FIX(core::WeakHashTable_O::static_class);
 SMART_PTR_FIX(core::BuiltinClosure_O::static_creator);
 SMART_PTR_FIX(core::MDArray_O::static_class);
 SMART_PTR_FIX(core::MultiStringBuffer_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_byte32_t_O::static_class);
 SMART_PTR_FIX(llvmo::Function_O::static_class_symbol);
 SMART_PTR_FIX(core::CoreExposer_O::static_class);
 SMART_PTR_FIX(core::InstanceCreator_O::static_creator);
 SMART_PTR_FIX(llvmo::DIFile_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::GlobalFunctionInfo_O::static_creator);
 SMART_PTR_FIX(core::SingleDispatchMethodFunction_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::GlobalFunctionInfo_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DISubprogram_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetMachine_O::static_class_symbol);
 SMART_PTR_FIX(core::SexpLoadArchive_O::static_class);
 TAGGED_POINTER_FIX(_lisp);
 SMART_PTR_FIX(llvmo::DIDerivedType_O::static_class_symbol);
 SMART_PTR_FIX(core::RandomState_O::static_creator);
 SMART_PTR_FIX(core::ValueEnvironment_O::static_class);
 SMART_PTR_FIX(core::ValueEnvironment_O::static_creator);
 SMART_PTR_FIX(core::BlockEnvironment_O::static_class);
 SMART_PTR_FIX(llvmo::FunctionType_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DICompositeType_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_byte64_t_O::static_creator);
 SMART_PTR_FIX(core::SaveArchive_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_byte32_t_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::VariableType_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_int64_t_O::static_creator);
 SMART_PTR_FIX(llvmo::BasicBlock_O::static_class);
 SMART_PTR_FIX(core::Sigset_O::static_class_symbol);
 SMART_PTR_FIX(core::SingleFloat_dummy_O::static_class_symbol);
 SMART_PTR_FIX(core::FileStatus_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::IRBuilderBase_O::static_creator);
 SMART_PTR_FIX(core::BroadcastStream_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_byte16_t_O::static_class_symbol);
 SMART_PTR_FIX(core::SynonymStream_O::static_class);
 SMART_PTR_FIX(llvmo::ConstantExpr_O::static_creator);
 SMART_PTR_FIX(core::StringInputStream_O::static_class);
 SMART_PTR_FIX(llvmo::APFloat_O::static_class);
 SMART_PTR_FIX(core::CxxMethodFunction_O::static_class_symbol);
 SMART_PTR_FIX(core::SymbolToEnumConverter_O::static_creator);
 SMART_PTR_FIX(llvmo::DITypeRefArray_O::static_creator);
 SMART_PTR_FIX(core::SmallMap_O::static_class_symbol);
 SMART_PTR_FIX(core::BuiltinClosure_O::static_class);
 SMART_PTR_FIX(llvmo::IntegerType_O::static_class);
 SMART_PTR_FIX(clbind::ConstructorCreator_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ReturnInst_O::static_creator);
 SMART_PTR_FIX(core::HashTableEqualp_O::static_class);
 SMART_PTR_FIX(llvmo::AllocaInst_O::static_class_symbol);
 SMART_PTR_FIX(core::VectorStepper_O::static_creator);
 SMART_PTR_FIX(core::MDArrayBaseChar_O::static_creator);
 SMART_PTR_FIX(core::MDArrayT_O::static_class);
 SMART_PTR_FIX(clcenv::FunctionIgnore_O::static_class);
 SMART_PTR_FIX(core::PosixTimeDuration_O::static_class);
 SMART_PTR_FIX(core::Reader_O::static_class);
 SMART_PTR_FIX(llvmo::DIBuilder_O::static_class_symbol);
 SMART_PTR_FIX(core::WrappedPointer_O::static_creator);
 SMART_PTR_FIX(llvmo::DINodeArray_O::static_creator);
 SMART_PTR_FIX(core::DerivableCxxClassCreator_O::static_creator);
 SMART_PTR_FIX(core::IntArray_O::static_class);
 SMART_PTR_FIX(core::CxxMethodFunction_O::static_class);
 SMART_PTR_FIX(core::FunctionFrame_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_byte64_t_O::static_creator);
 SMART_PTR_FIX(core::WeakKeyHashTable_O::static_class_symbol);
 SMART_PTR_FIX(core::FunctionContainerEnvironment_O::static_class);
 SMART_PTR_FIX(clcenv::SpecialOperatorInfo_O::static_creator);
 SMART_PTR_FIX(llvmo::PassManagerBuilder_O::static_class_symbol);
 SMART_PTR_FIX(core::SingleDispatchEffectiveMethodFunction_O::static_class_symbol);
 SMART_PTR_FIX(core::Reader_O::static_class_symbol);
 SMART_PTR_FIX(core::SNode_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::StructType_O::static_class_symbol);
 SMART_PTR_FIX(core::Real_O::static_class);
 SMART_PTR_FIX(core::T_O::static_class_symbol);
 SMART_PTR_FIX(core::ExternalObject_O::static_creator);
 SMART_PTR_FIX(llvmo::Attribute_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::InvokeInst_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_int16_t_O::static_creator);
 SMART_PTR_FIX(core::Array_O::static_class);
 SMART_PTR_FIX(core::UserData_O::static_creator);
 SMART_PTR_FIX(clasp_ffi::ForeignTypeSpec_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayBit_O::static_class);
 SMART_PTR_FIX(core::LoadArchive_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::FunctionPassManager_O::static_class);
 SMART_PTR_FIX(core::LambdaListHandler_O::static_creator);
 SMART_PTR_FIX(core::Environment_O::static_creator);
 SMART_PTR_FIX(llvmo::CallInst_O::static_class);
 SMART_PTR_FIX(llvmo::LLVMTargetMachine_O::static_class_symbol);
 SMART_PTR_FIX(core::DoubleFloat_O::static_creator);
 SMART_PTR_FIX(llvmo::ModulePass_O::static_class);
 SMART_PTR_FIX(llvmo::LandingPadInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DILexicalBlockBase_O::static_class);
 SMART_PTR_FIX(core::Archive_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantDataArray_O::static_class_symbol);
 SMART_PTR_FIX(core::Ratio_O::static_creator);
 SMART_PTR_FIX(core::BitVectorNs_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_byte64_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetOptions_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArrayT_O::static_class);
 SMART_PTR_FIX(llvmo::IndirectBrInst_O::static_creator);
 SMART_PTR_FIX(core::BitVectorNs_O::static_creator);
 SMART_PTR_FIX(clcenv::VariableInfo_O::static_class);
 SMART_PTR_FIX(core::MDArray_byte16_t_O::static_creator);
 SMART_PTR_FIX(core::HashTableEql_O::static_class);
 SMART_PTR_FIX(core::SimpleBaseString_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_fixnum_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_int32_t_O::static_creator);
 SMART_PTR_FIX(mp::SharedMutex_O::static_creator);
 SMART_PTR_FIX(core::Path_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DataLayout_O::static_class);
 SMART_PTR_FIX(core::MDArray_size_t_O::static_creator);
 SMART_PTR_FIX(llvmo::DINodeArray_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::VectorType_O::static_creator);
 SMART_PTR_FIX(llvmo::TerminatorInst_O::static_class_symbol);
 SMART_PTR_FIX(core::NativeVector_double_O::static_creator);
 SMART_PTR_FIX(core::ActivationFrame_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ExecutionEngine_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_int8_t_O::static_class);
 SMART_PTR_FIX(clcenv::GlobalEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetSubtargetInfo_O::static_creator);
 SMART_PTR_FIX(llvmo::DICompositeType_O::static_creator);
 SMART_PTR_FIX(llvmo::EngineBuilder_O::static_class);
 SMART_PTR_FIX(core::Integer_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Macro_O::static_creator);
 SMART_PTR_FIX(core::TranslationFunctor_O::static_creator);
 SMART_PTR_FIX(core::FileStatus_O::static_class);
 SMART_PTR_FIX(core::Symbol_O::static_creator);
 SMART_PTR_FIX(llvmo::LoadInst_O::static_creator);
 SMART_PTR_FIX(llvmo::User_O::static_class_symbol);
 SMART_PTR_FIX(core::SexpLoadArchive_O::static_class_symbol);
 SMART_PTR_FIX(core::Cache_O::static_creator);
 SMART_PTR_FIX(llvmo::ArrayType_O::static_class_symbol);
 SMART_PTR_FIX(core::CxxObject_O::static_creator);
 SMART_PTR_FIX(core::LambdaListHandler_O::static_class);
 SMART_PTR_FIX(clasp_ffi::ForeignTypeSpec_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ResumeInst_O::static_creator);
 SMART_PTR_FIX(llvmo::PHINode_O::static_class);
 SMART_PTR_FIX(clcenv::ConstantVariableInfo_O::static_class);
 SMART_PTR_FIX(llvmo::Metadata_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Function_O::static_class);
 SMART_PTR_FIX(llvmo::GlobalVariable_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArrayCharacter_O::static_class);
 SMART_PTR_FIX(core::RecursiveDirectoryIterator_O::static_creator);
 SMART_PTR_FIX(llvmo::DISubprogram_O::static_class);
 SMART_PTR_FIX(llvmo::PassManagerBuilder_O::static_class);
 SMART_PTR_FIX(core::SmallMultimap_O::static_creator);
 SMART_PTR_FIX(clcenv::LocalMacroInfo_O::static_creator);
 SMART_PTR_FIX(clcenv::VariableType_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::ConstantVariableInfo_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_fixnum_O::static_class);
 SMART_PTR_FIX(llvmo::FenceInst_O::static_class);
 SMART_PTR_FIX(core::RuntimeVisibleEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TargetSubtargetInfo_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::IRBuilder_O::static_class);
 SMART_PTR_FIX(core::MacroletEnvironment_O::static_class);
 SMART_PTR_FIX(llvmo::ModuleHandle_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::LLVMContext_O::static_class_symbol);
 SMART_PTR_FIX(core::LoadTimeValues_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DICompileUnit_O::static_creator);
 SMART_PTR_FIX(llvmo::IntegerType_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Value_O::static_class_symbol);
 SMART_PTR_FIX(core::HashTableEql_O::static_class_symbol);
 SMART_PTR_FIX(core::AbstractSimpleVector_O::static_class_symbol);
 SMART_PTR_FIX(core::FunctionFrame_O::static_creator);
 SMART_PTR_FIX(core::HashTableEql_O::static_creator);
 SMART_PTR_FIX(clcenv::BlockInfo_O::static_creator);
 SMART_PTR_FIX(mp::ConcurrentQueue_O::static_class_symbol);
 SMART_PTR_FIX(core::NativeVector_float_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::MCSubtargetInfo_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::LandingPadInst_O::static_class);
 SMART_PTR_FIX(core::Integer_O::static_class);
 SMART_PTR_FIX(core::LambdaListHandler_O::static_class_symbol);
 SMART_PTR_FIX(core::SexpLoadArchive_O::static_creator);
 SMART_PTR_FIX(llvmo::PassManagerBase_O::static_class_symbol);
 SMART_PTR_FIX(core::TranslationFunctor_O::static_class_symbol);
 SMART_PTR_FIX(core::Closure_O::static_creator);
 SMART_PTR_FIX(llvmo::BlockAddress_O::static_class);
 SMART_PTR_FIX(llvmo::DIFile_O::static_creator);
 SMART_PTR_FIX(core::Bignum_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_O::static_class_symbol);
 SMART_PTR_FIX(core::Pointer_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_byte64_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DICompileUnit_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Inline_O::static_class_symbol);
 SMART_PTR_FIX(core::RuntimeVisibleEnvironment_O::static_class);
 SMART_PTR_FIX(core::FuncallableInstanceCreator_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_size_t_O::static_creator);
 SMART_PTR_FIX(core::MDArray_int64_t_O::static_creator);
 SMART_PTR_FIX(llvmo::TargetSubtargetInfo_O::static_class);
 SMART_PTR_FIX(core::Path_O::static_creator);
 SMART_PTR_FIX(llvmo::PassManagerBase_O::static_class);
 SMART_PTR_FIX(core::MDArray_int8_t_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_byte8_t_O::static_class_symbol);
 SMART_PTR_FIX(core::DoubleFloat_O::static_class);
 SMART_PTR_FIX(llvmo::Instruction_O::static_class);
 SMART_PTR_FIX(core::SingleDispatchMethodFunction_O::static_creator);
 SMART_PTR_FIX(llvmo::AttributeSet_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DIBasicType_O::static_class_symbol);
 SMART_PTR_FIX(core::IOFileStream_O::static_class);
 SMART_PTR_FIX(core::MDArray_fixnum_O::static_creator);
 SMART_PTR_FIX(core::Function_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Inline_O::static_creator);
 SMART_PTR_FIX(core::Cache_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_int8_t_O::static_creator);
 SMART_PTR_FIX(mp::ConditionVariable_O::static_creator);
 SMART_PTR_FIX(core::StrNs_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::GlobalVariable_O::static_creator);
 SMART_PTR_FIX(llvmo::SequentialType_O::static_class);
 SMART_PTR_FIX(mp::Process_O::static_class);
 SMART_PTR_FIX(core::MDArrayT_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_int16_t_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_byte8_t_O::static_class);
 SMART_PTR_FIX(core::SimpleCharacterString_O::static_class);
 SMART_PTR_FIX(core::MDArrayBit_O::static_class_symbol);
 SMART_PTR_FIX(core::EchoStream_O::static_class);
 SMART_PTR_FIX(core::MDArray_byte16_t_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Optimize_O::static_creator);
 SMART_PTR_FIX(llvmo::MCSubtargetInfo_O::static_creator);
 SMART_PTR_FIX(core::DirectoryEntry_O::static_creator);
 SMART_PTR_FIX(core::MultiStringBuffer_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArrayT_O::static_class_symbol);
 SMART_PTR_FIX(core::StandardClassCreator_O::static_class_symbol);
 SMART_PTR_FIX(core::Symbol_O::static_class_symbol);
 SMART_PTR_FIX(core::StringInputStream_O::static_creator);
 SMART_PTR_FIX(core::InstanceCreator_O::static_class);
 SMART_PTR_FIX(llvmo::DataLayout_O::static_creator);
 SMART_PTR_FIX(core::VaList_dummy_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_byte16_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Triple_O::static_class);
 SMART_PTR_FIX(core::Rational_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DISubroutineType_O::static_creator);
 SMART_PTR_FIX(core::UserData_O::static_class);
 SMART_PTR_FIX(mp::SharedMutex_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Linker_O::static_class);
 SMART_PTR_FIX(llvmo::APFloat_O::static_creator);
 SMART_PTR_FIX(llvmo::DILexicalBlockBase_O::static_creator);
 SMART_PTR_FIX(llvmo::StructType_O::static_creator);
 SMART_PTR_FIX(core::MDArray_int32_t_O::static_creator);
 SMART_PTR_FIX(llvmo::Type_O::static_class);
 SMART_PTR_FIX(core::FunctionValueEnvironment_O::static_creator);
 SMART_PTR_FIX(core::SimpleVectorFloat_O::static_class);
 SMART_PTR_FIX(core::HashTable_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Function_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::UnreachableInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::LoadInst_O::static_class_symbol);
 SMART_PTR_FIX(core::CoreExposer_O::static_class_symbol);
 SMART_PTR_FIX(core::VaList_dummy_O::static_class);
 SMART_PTR_FIX(core::InstanceCreator_O::static_class_symbol);
 SMART_PTR_FIX(core::General_O::static_class);
 SMART_PTR_FIX(core::Iterator_O::static_class_symbol);
 SMART_PTR_FIX(core::Closure_O::static_class);
 SMART_PTR_FIX(core::UserData_O::static_class_symbol);
 SMART_PTR_FIX(core::DoubleFloat_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVectorDouble_O::static_class);
 SMART_PTR_FIX(core::HashTableEqual_O::static_creator);
 SMART_PTR_FIX(clasp_ffi::ForeignData_O::static_creator);
 SMART_PTR_FIX(clcenv::Info_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::EngineBuilder_O::static_creator);
 SMART_PTR_FIX(llvmo::MDNode_O::static_creator);
 SMART_PTR_FIX(core::Iterator_O::static_creator);
 SMART_PTR_FIX(core::MacroletEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::StrWNs_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::SymbolMacro_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Constant_O::static_class);
 SMART_PTR_FIX(clcenv::GlobalEnvironment_O::static_class);
 SMART_PTR_FIX(core::Creator_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::VariableInfo_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_byte8_t_O::static_creator);
 SMART_PTR_FIX(clbind::ClassRep_O::static_class);
 SMART_PTR_FIX(core::WeakHashTable_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::CallInst_O::static_creator);
 SMART_PTR_FIX(llvmo::FenceInst_O::static_creator);
 SMART_PTR_FIX(core::MDArray_int32_t_O::static_class);
 SMART_PTR_FIX(core::SharpEqualWrapper_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_size_t_O::static_class);
 SMART_PTR_FIX(llvmo::BranchInst_O::static_creator);
 SMART_PTR_FIX(core::TwoWayStream_O::static_class);
 SMART_PTR_FIX(clcenv::LexicalVariableInfo_O::static_class);
 SMART_PTR_FIX(core::GlueEnvironment_O::static_creator);
 SMART_PTR_FIX(core::General_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DISubprogram_O::static_creator);
 SMART_PTR_FIX(clcenv::OptimizeInfo_O::static_class);
 SMART_PTR_FIX(llvmo::DIBuilder_O::static_class);
 SMART_PTR_FIX(core::SymbolMacroletEnvironment_O::static_creator);
 SMART_PTR_FIX(core::ValueFrame_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleBitVector_O::static_class_symbol);
 SMART_PTR_FIX(core::DerivableCxxObject_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DILexicalBlockBase_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DIFile_O::static_class);
 SMART_PTR_FIX(core::SexpSaveArchive_O::static_class);
 SMART_PTR_FIX(core::MDArrayFloat_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_int16_t_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::VariableIgnore_O::static_class);
 SMART_PTR_FIX(llvmo::Metadata_O::static_class);
 SMART_PTR_FIX(llvmo::AtomicRMWInst_O::static_class_symbol);
 SMART_PTR_FIX(core::Number_O::static_class_symbol);
 SMART_PTR_FIX(clbind::DummyCreator_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::BasicBlock_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_byte8_t_O::static_creator);
 SMART_PTR_FIX(llvmo::Value_O::static_class);
 SMART_PTR_FIX(core::WeakHashTable_O::static_creator);
 SMART_PTR_FIX(llvmo::Module_O::static_creator);
 SMART_PTR_FIX(clcenv::FunctionIgnore_O::static_creator);
 SMART_PTR_FIX(core::Float_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::LLVMContext_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantStruct_O::static_class_symbol);
 SMART_PTR_FIX(core::WeakKeyMapping_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::BranchInst_O::static_class_symbol);
 SMART_PTR_FIX(core::Str8Ns_O::static_class);
 SIMPLE_POINTER_FIX(gctools::global_tagged_Symbol_OP_no_thread_local_binding);
 SMART_PTR_FIX(core::DerivableCxxObject_O::static_class);
 SMART_PTR_FIX(llvmo::ClaspJIT_O::static_creator);
 SMART_PTR_FIX(clcenv::SpecialOperatorInfo_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::AtomicRMWInst_O::static_creator);
 SMART_PTR_FIX(llvmo::TargetLibraryInfoWrapperPass_O::static_class);
 SMART_PTR_FIX(core::Fixnum_dummy_O::static_creator);
 SMART_PTR_FIX(clcenv::GlobalFunctionInfo_O::static_class);
 SMART_PTR_FIX(llvmo::TargetLibraryInfoWrapperPass_O::static_class_symbol);
 SMART_PTR_FIX(core::SingleDispatchGenericFunctionClosure_O::static_class);
 SMART_PTR_FIX(clcenv::VariableDynamicExtent_O::static_creator);
 SMART_PTR_FIX(core::ClosureWithSlots_O::static_class);
 SMART_PTR_FIX(llvmo::ResumeInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::LandingPadInst_O::static_creator);
 SMART_PTR_FIX(llvmo::ReturnInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::FunctionPass_O::static_creator);
 SMART_PTR_FIX(clcenv::LambdaName_O::static_class_symbol);
 SMART_PTR_FIX(core::SexpSaveArchive_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DIDerivedType_O::static_class);
 SMART_PTR_FIX(core::Archive_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::StructType_O::static_class);
 SMART_PTR_FIX(core::Null_O::static_creator);
 SMART_PTR_FIX(core::SmallMultimap_O::static_class_symbol);
 SMART_PTR_FIX(core::T_O::static_creator);
 SMART_PTR_FIX(llvmo::BranchInst_O::static_class);
 SMART_PTR_FIX(core::SpecialForm_O::static_creator);
 SMART_PTR_FIX(core::StrNs_O::static_class);
 SMART_PTR_FIX(core::HashTableEq_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::StoreInst_O::static_creator);
 SMART_PTR_FIX(llvmo::BasicBlock_O::static_creator);
 SMART_PTR_FIX(llvmo::DIBasicType_O::static_creator);
 SMART_PTR_FIX(core::Instance_O::static_class_symbol);
 SMART_PTR_FIX(core::NativeVector_int_O::static_class_symbol);
 SMART_PTR_FIX(core::Bignum_O::static_creator);
 SMART_PTR_FIX(core::SimpleCharacterString_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::PassManager_O::static_creator);
 SMART_PTR_FIX(core::AnsiStream_O::static_class);
 SMART_PTR_FIX(clcenv::GlobalEnvironment_O::static_creator);
 SMART_PTR_FIX(clbind::ClassRegistry_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArrayCharacter_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArrayDouble_O::static_creator);
 SMART_PTR_FIX(core::ExternalObject_O::static_class);
 SMART_PTR_FIX(llvmo::DISubroutineType_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::PassManager_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::GlobalValue_O::static_class_symbol);
 SMART_PTR_FIX(core::FunctionValueEnvironment_O::static_class);
 SMART_PTR_FIX(core::Sigset_O::static_class);
 SMART_PTR_FIX(llvmo::Type_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::InvokeInst_O::static_class);
 SMART_PTR_FIX(llvmo::DILexicalBlock_O::static_class);
 SMART_PTR_FIX(core::MDArrayDouble_O::static_class);
 SMART_PTR_FIX(llvmo::NamedMDNode_O::static_class);
 SMART_PTR_FIX(llvmo::ModulePass_O::static_class_symbol);
 SMART_PTR_FIX(core::LongFloat_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ImmutablePass_O::static_creator);
 SMART_PTR_FIX(core::EchoStream_O::static_class_symbol);
 SMART_PTR_FIX(core::StandardClassCreator_O::static_class);
 SMART_PTR_FIX(llvmo::SwitchInst_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantDataArray_O::static_class);
 SMART_PTR_FIX(llvmo::Type_O::static_creator);
 SMART_PTR_FIX(clcenv::SpecialVariableInfo_O::static_class);
 SMART_PTR_FIX(core::ConsStepper_O::static_creator);
 SMART_PTR_FIX(llvmo::IRBuilderBase_O::static_class);
 SMART_PTR_FIX(core::T_O::static_class);
 SMART_PTR_FIX(asttooling::AsttoolingExposer_O::static_class);
 SMART_PTR_FIX(core::SequenceStepper_O::static_class_symbol);
 SMART_PTR_FIX(core::FileStream_O::static_class);
 SMART_PTR_FIX(llvmo::InvokeInst_O::static_class_symbol);
 SMART_PTR_FIX(core::ClosureWithSlots_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ConstantInt_O::static_class);
 SMART_PTR_FIX(core::Bignum_O::static_class_symbol);
 SMART_PTR_FIX(core::SNode_O::static_creator);
 SMART_PTR_FIX(core::ShortFloat_O::static_creator);
 SMART_PTR_FIX(core::AnsiStream_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantFP_O::static_creator);
 SMART_PTR_FIX(core::NativeVector_int_O::static_class);
 SMART_PTR_FIX(core::LightUserData_O::static_class);
 SMART_PTR_FIX(llvmo::DIType_O::static_creator);
 SMART_PTR_FIX(clcenv::Info_O::static_creator);
 SMART_PTR_FIX(core::MDArrayBaseChar_O::static_class_symbol);
 SMART_PTR_FIX(core::MacroletEnvironment_O::static_creator);
 SMART_PTR_FIX(mp::SharedMutex_O::static_class);
 SMART_PTR_FIX(core::MDArrayBaseChar_O::static_class);
 SMART_PTR_FIX(clcenv::Info_O::static_class);
 SMART_PTR_FIX(core::TwoWayStream_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Triple_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::PointerType_O::static_class_symbol);
 SMART_PTR_FIX(core::FuncallableInstanceCreator_O::static_class);
 SMART_PTR_FIX(core::Str8Ns_O::static_creator);
 SMART_PTR_FIX(core::SharpEqualWrapper_O::static_creator);
 SMART_PTR_FIX(llvmo::IRBuilder_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_byte64_t_O::static_class);
 SMART_PTR_FIX(core::Ratio_O::static_class_symbol);
 SMART_PTR_FIX(core::InvocationHistoryFrameIterator_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::SequentialType_O::static_class_symbol);
 SMART_PTR_FIX(core::Cons_O::static_creator);
 SMART_PTR_FIX(core::PosixTimeDuration_O::static_class_symbol);
 SMART_PTR_FIX(core::SourceManager_O::static_class_symbol);
 SMART_PTR_FIX(core::BroadcastStream_O::static_class);
 SMART_PTR_FIX(core::Complex_O::static_class);
 SMART_PTR_FIX(core::Float_O::static_class);
 SMART_PTR_FIX(core::WrappedPointer_O::static_class_symbol);
 SMART_PTR_FIX(core::FunctionContainerEnvironment_O::static_creator);
 SMART_PTR_FIX(core::SingleDispatchEffectiveMethodFunction_O::static_class);
 SMART_PTR_FIX(core::ActivationFrame_O::static_class);
 SMART_PTR_FIX(llvmo::VAArgInst_O::static_class_symbol);
 SMART_PTR_FIX(clbind::DummyCreator_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_int64_t_O::static_class);
 SMART_PTR_FIX(core::StringStream_O::static_creator);
 SMART_PTR_FIX(core::HashTableEq_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantDataSequential_O::static_creator);
 SMART_PTR_FIX(clbind::ClassRep_O::static_creator);
 SMART_PTR_FIX(core::Null_O::static_class);
 SMART_PTR_FIX(clcenv::LexicalVariableInfo_O::static_creator);
 SMART_PTR_FIX(llvmo::TerminatorInst_O::static_class);
 SMART_PTR_FIX(clcenv::VariableDynamicExtent_O::static_class);
 SMART_PTR_FIX(core::IOFileStream_O::static_class_symbol);
 SMART_PTR_FIX(core::Number_O::static_class);
 SMART_PTR_FIX(core::DirectoryIterator_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_O::static_class_symbol);
 SMART_PTR_FIX(core::SmallMap_O::static_creator);
 SMART_PTR_FIX(llvmo::APInt_O::static_class_symbol);
 SMART_PTR_FIX(core::Exposer_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_int16_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::IndirectBrInst_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_size_t_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantFP_O::static_class);
 SMART_PTR_FIX(clasp_ffi::ForeignTypeSpec_O::static_creator);
 SMART_PTR_FIX(core::Pathname_O::static_class);
 SMART_PTR_FIX(core::ReadTable_O::static_class);
 SMART_PTR_FIX(core::ShortFloat_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::FunctionPass_O::static_class);
 SMART_PTR_FIX(clcenv::Tag_O::static_class);
 SMART_PTR_FIX(llvmo::DINode_O::static_class_symbol);
 SMART_PTR_FIX(core::Reader_O::static_creator);
 SMART_PTR_FIX(core::LeafSNode_O::static_class);
 SMART_PTR_FIX(mp::RecursiveMutex_O::static_class_symbol);
 SMART_PTR_FIX(core::TagbodyEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::SpecialVariable_O::static_creator);
 SMART_PTR_FIX(core::SingleFloat_dummy_O::static_class);
 SMART_PTR_FIX(clcenv::Closure_O::static_class_symbol);
 SMART_PTR_FIX(core::Iterator_O::static_class);
 SMART_PTR_FIX(mp::RecursiveMutex_O::static_creator);
 SMART_PTR_FIX(clcenv::Optimize_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DILocalScope_O::static_class_symbol);
 SMART_PTR_FIX(core::CoreExposer_O::static_creator);
 SMART_PTR_FIX(core::Pathname_O::static_creator);
 SMART_PTR_FIX(clcenv::LocalFunctionInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_int16_t_O::static_class);
 SMART_PTR_FIX(core::IOStreamStream_O::static_class_symbol);
 SMART_PTR_FIX(core::ClassRepCreator_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::TerminatorInst_O::static_creator);
 SMART_PTR_FIX(core::SmallMultimap_O::static_class);
 SMART_PTR_FIX(core::AnsiStream_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ConstantPointerNull_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_byte32_t_O::static_class_symbol);
 SMART_PTR_FIX(core::ClassRepCreator_O::static_class);
 SIMPLE_POINTER_FIX(gctools::global_tagged_Symbol_OP_deleted);
 SMART_PTR_FIX(core::Exposer_O::static_creator);
 SMART_PTR_FIX(core::Sigset_O::static_creator);
 SMART_PTR_FIX(core::MDArrayBit_O::static_class);
 SMART_PTR_FIX(core::SaveArchive_O::static_creator);
 SMART_PTR_FIX(llvmo::InsertPoint_O::static_class);
 SMART_PTR_FIX(llvmo::DICompositeType_O::static_class);
 SMART_PTR_FIX(llvmo::ModuleHandle_O::static_class);
 SMART_PTR_FIX(llvmo::DISubroutineType_O::static_class);
 SMART_PTR_FIX(core::FuncallableInstanceCreator_O::static_creator);
 SMART_PTR_FIX(core::IOStreamStream_O::static_class);
 TAGGED_POINTER_FIX(clbind::globalClassMap);
 SMART_PTR_FIX(clcenv::Function_O::static_creator);
 SMART_PTR_FIX(core::HashTableEqual_O::static_class);
 SMART_PTR_FIX(core::MDArray_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::UnaryInstruction_O::static_creator);
 SMART_PTR_FIX(core::Pointer_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_int16_t_O::static_class);
 SMART_PTR_FIX(core::RecursiveDirectoryIterator_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_int64_t_O::static_class);
 SMART_PTR_FIX(core::SingleDispatchGenericFunctionClosure_O::static_class_symbol);
 SMART_PTR_FIX(core::TwoWayStream_O::static_creator);
 SMART_PTR_FIX(clcenv::SpecialVariableInfo_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArrayBaseChar_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArrayBaseChar_O::static_creator);
 SMART_PTR_FIX(core::SimpleString_O::static_class);
 SMART_PTR_FIX(llvmo::UndefValue_O::static_class);
 SMART_PTR_FIX(clcenv::VariableIgnore_O::static_creator);
 SMART_PTR_FIX(core::StringStream_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleBaseString_O::static_class);
 SMART_PTR_FIX(core::Creator_O::static_class);
 SMART_PTR_FIX(core::SimpleVector_byte8_t_O::static_creator);
 SMART_PTR_FIX(clcenv::SymbolMacro_O::static_creator);
 SMART_PTR_FIX(asttooling::AsttoolingExposer_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_byte32_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DINode_O::static_creator);
 SMART_PTR_FIX(core::ConcatenatedStream_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DebugLoc_O::static_class);
 SMART_PTR_FIX(llvmo::DebugLoc_O::static_class_symbol);
 SMART_PTR_FIX(core::Closure_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Linker_O::static_class_symbol);
 SMART_PTR_FIX(asttooling::AsttoolingExposer_O::static_class_symbol);
 SMART_PTR_FIX(clbind::ClassRegistry_O::static_class);
 SMART_PTR_FIX(llvmo::GlobalVariable_O::static_class);
 SMART_PTR_FIX(core::BranchSNode_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ConstantDataSequential_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_int16_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DILexicalBlock_O::static_creator);
 SMART_PTR_FIX(core::Package_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::FunctionType_O::static_creator);
 SMART_PTR_FIX(core::GlueEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::SingleDispatchMethod_O::static_class_symbol);
 SMART_PTR_FIX(core::DirectoryIterator_O::static_class);
 SMART_PTR_FIX(llvmo::ImmutablePass_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::LocalFunctionInfo_O::static_creator);
 SMART_PTR_FIX(llvmo::PHINode_O::static_creator);
 SMART_PTR_FIX(core::UnwindProtectEnvironment_O::static_class);
 SMART_PTR_FIX(clcenv::LambdaNameInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::LongFloat_O::static_class);
 SMART_PTR_FIX(core::MDArray_size_t_O::static_class);
 SMART_PTR_FIX(llvmo::Attribute_O::static_class);
 SMART_PTR_FIX(llvmo::IndirectBrInst_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArrayT_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_int8_t_O::static_class_symbol);
 SMART_PTR_FIX(core::SourcePosInfo_O::static_creator);
 SMART_PTR_FIX(llvmo::MDString_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DIDerivedType_O::static_creator);
 SMART_PTR_FIX(core::Environment_O::static_class_symbol);
 SMART_PTR_FIX(core::ShortFloat_O::static_class);
 SMART_PTR_FIX(llvmo::MDNode_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArrayCharacter_O::static_creator);
 SMART_PTR_FIX(llvmo::ValueAsMetadata_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::UndefValue_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleBaseString_O::static_creator);
 SMART_PTR_FIX(core::CatchEnvironment_O::static_class);
 SMART_PTR_FIX(clcenv::FunctionInfo_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_int8_t_O::static_class);
 SMART_PTR_FIX(core::SingleDispatchCxxEffectiveMethodFunction_O::static_class);
 SMART_PTR_FIX(core::ClosureWithSlots_O::static_creator);
 SMART_PTR_FIX(llvmo::VAArgInst_O::static_class);
 SMART_PTR_FIX(core::SequenceStepper_O::static_creator);
 SMART_PTR_FIX(llvmo::IntegerType_O::static_creator);
 SMART_PTR_FIX(core::FuncallableInstance_O::static_class_symbol);
 SIMPLE_POINTER_FIX(run_time_values_table);
 SMART_PTR_FIX(llvmo::Triple_O::static_creator);
 SMART_PTR_FIX(llvmo::DIType_O::static_class);
 SMART_PTR_FIX(clcenv::BlockInfo_O::static_class);
 SMART_PTR_FIX(core::NativeVector_double_O::static_class);
 SMART_PTR_FIX(llvmo::ValueAsMetadata_O::static_creator);
 SMART_PTR_FIX(core::PosixTime_O::static_class_symbol);
 SMART_PTR_FIX(core::CxxObject_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::Target_O::static_class_symbol);
 SMART_PTR_FIX(core::CompileTimeEnvironment_O::static_creator);
 SMART_PTR_FIX(mp::ConcurrentQueue_O::static_class);
 SMART_PTR_FIX(clcenv::BlockInfo_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ConstantArray_O::static_class_symbol);
 SMART_PTR_FIX(core::WeakKeyMapping_O::static_class);
 SMART_PTR_FIX(core::ExternalObject_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::APInt_O::static_creator);
 SMART_PTR_FIX(llvmo::VectorType_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::DIBasicType_O::static_class);
 SMART_PTR_FIX(core::MultiStringBuffer_O::static_creator);
 SMART_PTR_FIX(llvmo::NamedMDNode_O::static_creator);
 SMART_PTR_FIX(core::HashTableEqualp_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::GlobalMacroInfo_O::static_creator);
 SMART_PTR_FIX(core::FunctionValueEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::AbstractSimpleVector_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_int32_t_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::Closure_O::static_creator);
 SMART_PTR_FIX(core::Float_O::static_creator);
 SMART_PTR_FIX(clcenv::LexicalVariableInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::BroadcastStream_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArrayFloat_O::static_creator);
 SMART_PTR_FIX(core::ReadTable_O::static_creator);
 SMART_PTR_FIX(clcenv::Block_O::static_creator);
 SMART_PTR_FIX(core::WeakKeyHashTable_O::static_creator);
 SMART_PTR_FIX(core::ActivationFrame_O::static_creator);
 SMART_PTR_FIX(llvmo::StoreInst_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ExecutionEngine_O::static_creator);
 SMART_PTR_FIX(llvmo::ConstantInt_O::static_creator);
 SMART_PTR_FIX(core::LongFloat_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_int8_t_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVectorFloat_O::static_creator);
 SMART_PTR_FIX(llvmo::DILocalScope_O::static_class);
 SMART_PTR_FIX(core::SourceFileInfo_O::static_creator);
 SMART_PTR_FIX(core::StringOutputStream_O::static_creator);
 SMART_PTR_FIX(clbind::ClassRegistry_O::static_creator);
 SMART_PTR_FIX(core::Record_O::static_class_symbol);
 SMART_PTR_FIX(core::LogicalPathname_O::static_creator);
 SMART_PTR_FIX(clcenv::Inline_O::static_class);
 SMART_PTR_FIX(llvmo::CompositeType_O::static_class_symbol);
 SMART_PTR_FIX(core::VectorStepper_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ConstantExpr_O::static_class);
 SMART_PTR_FIX(core::DerivableCxxClassCreator_O::static_class);
 SMART_PTR_FIX(llvmo::AtomicCmpXchgInst_O::static_creator);
 SMART_PTR_FIX(llvmo::DIScope_O::static_class);
 SMART_PTR_FIX(llvmo::MDString_O::static_class);
 SMART_PTR_FIX(core::SourcePosInfo_O::static_class);
 SMART_PTR_FIX(core::Symbol_O::static_class);
 SMART_PTR_FIX(asttooling::AstVisitor_O::static_creator);
 SMART_PTR_FIX(llvmo::Function_O::static_creator);
 SMART_PTR_FIX(core::DerivableCxxClassCreator_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::AllocaInst_O::static_creator);
 SMART_PTR_FIX(mp::Process_O::static_class_symbol);
 SMART_PTR_FIX(core::Pathname_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_byte8_t_O::static_class_symbol);
 SMART_PTR_FIX(core::WeakKeyHashTable_O::static_class);
 SMART_PTR_FIX(core::NativeVector_double_O::static_class_symbol);
 SMART_PTR_FIX(mp::BlockingConcurrentQueue_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_int32_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::ConstantDataSequential_O::static_class_symbol);
 SMART_PTR_FIX(core::HashTableEq_O::static_class);
 SMART_PTR_FIX(core::Character_dummy_O::static_class_symbol);
 SMART_PTR_FIX(core::CompileTimeEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::PosixTime_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_byte32_t_O::static_class);
 SMART_PTR_FIX(core::SimpleMDArray_int64_t_O::static_class);
 SMART_PTR_FIX(core::Pointer_O::static_class);
 SMART_PTR_FIX(core::MDArray_byte64_t_O::static_class);
 SMART_PTR_FIX(llvmo::Pass_O::static_creator);
 SMART_PTR_FIX(core::CompileTimeEnvironment_O::static_class);
 SMART_PTR_FIX(core::StringOutputStream_O::static_class_symbol);
 SIMPLE_POINTER_FIX(gctools::global_tagged_Symbol_OP_nil);
 SMART_PTR_FIX(clcenv::LambdaName_O::static_creator);
 SMART_PTR_FIX(core::StringOutputStream_O::static_class);
 SMART_PTR_FIX(core::MDArrayBit_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArrayFloat_O::static_class_symbol);
 SMART_PTR_FIX(core::SequenceStepper_O::static_class);
 SMART_PTR_FIX(core::Rational_O::static_class);
 SMART_PTR_FIX(core::InvocationHistoryFrameIterator_O::static_class);
 SMART_PTR_FIX(llvmo::CompositeType_O::static_creator);
 SMART_PTR_FIX(core::MDArray_fixnum_O::static_class_symbol);
 SMART_PTR_FIX(core::HashTable_O::static_class);
 SMART_PTR_FIX(core::FuncallableInstance_O::static_class);
 SMART_PTR_FIX(llvmo::Function_O::static_class);
 SMART_PTR_FIX(llvmo::ConstantStruct_O::static_class);
 SMART_PTR_FIX(llvmo::DIBuilder_O::static_creator);
 SMART_PTR_FIX(clcenv::VariableDynamicExtent_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::LocalFunctionInfo_O::static_class);
 SMART_PTR_FIX(core::DerivableCxxObject_O::static_creator);
 SMART_PTR_FIX(clcenv::Tag_O::static_class_symbol);
 SMART_PTR_FIX(core::LightUserData_O::static_creator);
 SMART_PTR_FIX(clcenv::OptimizeInfo_O::static_creator);
 SMART_PTR_FIX(core::LeafSNode_O::static_class_symbol);
 SMART_PTR_FIX(clbind::ConstructorCreator_O::static_creator);
 SMART_PTR_FIX(core::SimpleVector_byte64_t_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::User_O::static_creator);
 SMART_PTR_FIX(core::DirectoryEntry_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleVector_int8_t_O::static_creator);
 SMART_PTR_FIX(llvmo::Argument_O::static_class_symbol);
 SMART_PTR_FIX(core::HashTableEqual_O::static_class_symbol);
 SMART_PTR_FIX(core::Stream_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArrayFloat_O::static_class);
 SMART_PTR_FIX(llvmo::GlobalValue_O::static_creator);
 SMART_PTR_FIX(core::SymbolMacroletEnvironment_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArray_size_t_O::static_class_symbol);
 SMART_PTR_FIX(clcenv::VariableType_O::static_class);
 SMART_PTR_FIX(core::Package_O::static_class);
 SMART_PTR_FIX(llvmo::Module_O::static_class_symbol);
 SMART_PTR_FIX(core::LoadArchive_O::static_creator);
 SMART_PTR_FIX(llvmo::APInt_O::static_class);
 SMART_PTR_FIX(core::BlockEnvironment_O::static_creator);
 SMART_PTR_FIX(core::CatchEnvironment_O::static_creator);
 SMART_PTR_FIX(llvmo::LLVMTargetMachine_O::static_creator);
 SMART_PTR_FIX(clcenv::LambdaName_O::static_class);
 SMART_PTR_FIX(core::SingleDispatchMethod_O::static_class);
 SMART_PTR_FIX(core::Character_dummy_O::static_creator);
 SMART_PTR_FIX(core::Exposer_O::static_class_symbol);
 SMART_PTR_FIX(core::MDArrayDouble_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::AttributeSet_O::static_class);
 SMART_PTR_FIX(llvmo::DILocalScope_O::static_creator);
 SMART_PTR_FIX(core::SingleDispatchGenericFunctionClosure_O::static_creator);
 SMART_PTR_FIX(core::BranchSNode_O::static_class);
 SMART_PTR_FIX(llvmo::ModulePass_O::static_creator);
 SMART_PTR_FIX(core::SimpleMDArray_O::static_class);
 SMART_PTR_FIX(core::HashTableEqualp_O::static_creator);
 SMART_PTR_FIX(clcenv::SpecialVariableInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArray_size_t_O::static_class_symbol);
 SMART_PTR_FIX(core::ValueFrame_O::static_creator);
 SMART_PTR_FIX(core::IntArray_O::static_class_symbol);
 SMART_PTR_FIX(llvmo::AllocaInst_O::static_class);
 SMART_PTR_FIX(core::SourcePosInfo_O::static_class_symbol);
 SMART_PTR_FIX(core::SimpleMDArrayBit_O::static_class_symbol);
#endif // defined(GC_GLOBALS)
